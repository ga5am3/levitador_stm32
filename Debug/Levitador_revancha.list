
Levitador_revancha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b24c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800b35c  0800b35c  0000c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b40c  0800b40c  0000d250  2**0
                  CONTENTS
  4 .ARM          00000008  0800b40c  0800b40c  0000c40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b414  0800b414  0000d250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b414  0800b414  0000c414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b418  0800b418  0000c418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  0800b41c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001470  20000250  0800b66c  0000d250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016c0  0800b66c  0000d6c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001393b  00000000  00000000  0000d279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003673  00000000  00000000  00020bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00024228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d94  00000000  00000000  00025408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad9f  00000000  00000000  0002619c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016465  00000000  00000000  00040f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092360  00000000  00000000  000573a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000511c  00000000  00000000  000e9744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ee860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000250 	.word	0x20000250
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b344 	.word	0x0800b344

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000254 	.word	0x20000254
 800014c:	0800b344 	.word	0x0800b344

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2f>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000734:	bf24      	itt	cs
 8000736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800073a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800073e:	d90d      	bls.n	800075c <__aeabi_d2f+0x30>
 8000740:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800074c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000754:	bf08      	it	eq
 8000756:	f020 0001 	biceq.w	r0, r0, #1
 800075a:	4770      	bx	lr
 800075c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000760:	d121      	bne.n	80007a6 <__aeabi_d2f+0x7a>
 8000762:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000766:	bfbc      	itt	lt
 8000768:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800076c:	4770      	bxlt	lr
 800076e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000772:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000776:	f1c2 0218 	rsb	r2, r2, #24
 800077a:	f1c2 0c20 	rsb	ip, r2, #32
 800077e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	bf18      	it	ne
 8000788:	f040 0001 	orrne.w	r0, r0, #1
 800078c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000794:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000798:	ea40 000c 	orr.w	r0, r0, ip
 800079c:	fa23 f302 	lsr.w	r3, r3, r2
 80007a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a4:	e7cc      	b.n	8000740 <__aeabi_d2f+0x14>
 80007a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007aa:	d107      	bne.n	80007bc <__aeabi_d2f+0x90>
 80007ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007b0:	bf1e      	ittt	ne
 80007b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007ba:	4770      	bxne	lr
 80007bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <__aeabi_frsub>:
 80007cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007d0:	e002      	b.n	80007d8 <__addsf3>
 80007d2:	bf00      	nop

080007d4 <__aeabi_fsub>:
 80007d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080007d8 <__addsf3>:
 80007d8:	0042      	lsls	r2, r0, #1
 80007da:	bf1f      	itttt	ne
 80007dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007e0:	ea92 0f03 	teqne	r2, r3
 80007e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007ec:	d06a      	beq.n	80008c4 <__addsf3+0xec>
 80007ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007f6:	bfc1      	itttt	gt
 80007f8:	18d2      	addgt	r2, r2, r3
 80007fa:	4041      	eorgt	r1, r0
 80007fc:	4048      	eorgt	r0, r1
 80007fe:	4041      	eorgt	r1, r0
 8000800:	bfb8      	it	lt
 8000802:	425b      	neglt	r3, r3
 8000804:	2b19      	cmp	r3, #25
 8000806:	bf88      	it	hi
 8000808:	4770      	bxhi	lr
 800080a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800080e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000812:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4240      	negne	r0, r0
 800081a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800081e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000822:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000826:	bf18      	it	ne
 8000828:	4249      	negne	r1, r1
 800082a:	ea92 0f03 	teq	r2, r3
 800082e:	d03f      	beq.n	80008b0 <__addsf3+0xd8>
 8000830:	f1a2 0201 	sub.w	r2, r2, #1
 8000834:	fa41 fc03 	asr.w	ip, r1, r3
 8000838:	eb10 000c 	adds.w	r0, r0, ip
 800083c:	f1c3 0320 	rsb	r3, r3, #32
 8000840:	fa01 f103 	lsl.w	r1, r1, r3
 8000844:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000848:	d502      	bpl.n	8000850 <__addsf3+0x78>
 800084a:	4249      	negs	r1, r1
 800084c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000850:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000854:	d313      	bcc.n	800087e <__addsf3+0xa6>
 8000856:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800085a:	d306      	bcc.n	800086a <__addsf3+0x92>
 800085c:	0840      	lsrs	r0, r0, #1
 800085e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000862:	f102 0201 	add.w	r2, r2, #1
 8000866:	2afe      	cmp	r2, #254	@ 0xfe
 8000868:	d251      	bcs.n	800090e <__addsf3+0x136>
 800086a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800086e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000872:	bf08      	it	eq
 8000874:	f020 0001 	biceq.w	r0, r0, #1
 8000878:	ea40 0003 	orr.w	r0, r0, r3
 800087c:	4770      	bx	lr
 800087e:	0049      	lsls	r1, r1, #1
 8000880:	eb40 0000 	adc.w	r0, r0, r0
 8000884:	3a01      	subs	r2, #1
 8000886:	bf28      	it	cs
 8000888:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800088c:	d2ed      	bcs.n	800086a <__addsf3+0x92>
 800088e:	fab0 fc80 	clz	ip, r0
 8000892:	f1ac 0c08 	sub.w	ip, ip, #8
 8000896:	ebb2 020c 	subs.w	r2, r2, ip
 800089a:	fa00 f00c 	lsl.w	r0, r0, ip
 800089e:	bfaa      	itet	ge
 80008a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008a4:	4252      	neglt	r2, r2
 80008a6:	4318      	orrge	r0, r3
 80008a8:	bfbc      	itt	lt
 80008aa:	40d0      	lsrlt	r0, r2
 80008ac:	4318      	orrlt	r0, r3
 80008ae:	4770      	bx	lr
 80008b0:	f092 0f00 	teq	r2, #0
 80008b4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80008b8:	bf06      	itte	eq
 80008ba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80008be:	3201      	addeq	r2, #1
 80008c0:	3b01      	subne	r3, #1
 80008c2:	e7b5      	b.n	8000830 <__addsf3+0x58>
 80008c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008cc:	bf18      	it	ne
 80008ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008d2:	d021      	beq.n	8000918 <__addsf3+0x140>
 80008d4:	ea92 0f03 	teq	r2, r3
 80008d8:	d004      	beq.n	80008e4 <__addsf3+0x10c>
 80008da:	f092 0f00 	teq	r2, #0
 80008de:	bf08      	it	eq
 80008e0:	4608      	moveq	r0, r1
 80008e2:	4770      	bx	lr
 80008e4:	ea90 0f01 	teq	r0, r1
 80008e8:	bf1c      	itt	ne
 80008ea:	2000      	movne	r0, #0
 80008ec:	4770      	bxne	lr
 80008ee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008f2:	d104      	bne.n	80008fe <__addsf3+0x126>
 80008f4:	0040      	lsls	r0, r0, #1
 80008f6:	bf28      	it	cs
 80008f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008fc:	4770      	bx	lr
 80008fe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000902:	bf3c      	itt	cc
 8000904:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000908:	4770      	bxcc	lr
 800090a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800090e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000912:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000916:	4770      	bx	lr
 8000918:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800091c:	bf16      	itet	ne
 800091e:	4608      	movne	r0, r1
 8000920:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000924:	4601      	movne	r1, r0
 8000926:	0242      	lsls	r2, r0, #9
 8000928:	bf06      	itte	eq
 800092a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800092e:	ea90 0f01 	teqeq	r0, r1
 8000932:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000936:	4770      	bx	lr

08000938 <__aeabi_ui2f>:
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e004      	b.n	8000948 <__aeabi_i2f+0x8>
 800093e:	bf00      	nop

08000940 <__aeabi_i2f>:
 8000940:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000944:	bf48      	it	mi
 8000946:	4240      	negmi	r0, r0
 8000948:	ea5f 0c00 	movs.w	ip, r0
 800094c:	bf08      	it	eq
 800094e:	4770      	bxeq	lr
 8000950:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000954:	4601      	mov	r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	e01c      	b.n	8000996 <__aeabi_l2f+0x2a>

0800095c <__aeabi_ul2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e00a      	b.n	8000980 <__aeabi_l2f+0x14>
 800096a:	bf00      	nop

0800096c <__aeabi_l2f>:
 800096c:	ea50 0201 	orrs.w	r2, r0, r1
 8000970:	bf08      	it	eq
 8000972:	4770      	bxeq	lr
 8000974:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000978:	d502      	bpl.n	8000980 <__aeabi_l2f+0x14>
 800097a:	4240      	negs	r0, r0
 800097c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000980:	ea5f 0c01 	movs.w	ip, r1
 8000984:	bf02      	ittt	eq
 8000986:	4684      	moveq	ip, r0
 8000988:	4601      	moveq	r1, r0
 800098a:	2000      	moveq	r0, #0
 800098c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000990:	bf08      	it	eq
 8000992:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000996:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800099a:	fabc f28c 	clz	r2, ip
 800099e:	3a08      	subs	r2, #8
 80009a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009a4:	db10      	blt.n	80009c8 <__aeabi_l2f+0x5c>
 80009a6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009aa:	4463      	add	r3, ip
 80009ac:	fa00 fc02 	lsl.w	ip, r0, r2
 80009b0:	f1c2 0220 	rsb	r2, r2, #32
 80009b4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80009b8:	fa20 f202 	lsr.w	r2, r0, r2
 80009bc:	eb43 0002 	adc.w	r0, r3, r2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f102 0220 	add.w	r2, r2, #32
 80009cc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009d0:	f1c2 0220 	rsb	r2, r2, #32
 80009d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009d8:	fa21 f202 	lsr.w	r2, r1, r2
 80009dc:	eb43 0002 	adc.w	r0, r3, r2
 80009e0:	bf08      	it	eq
 80009e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_fmul>:
 80009e8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f0:	bf1e      	ittt	ne
 80009f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f6:	ea92 0f0c 	teqne	r2, ip
 80009fa:	ea93 0f0c 	teqne	r3, ip
 80009fe:	d06f      	beq.n	8000ae0 <__aeabi_fmul+0xf8>
 8000a00:	441a      	add	r2, r3
 8000a02:	ea80 0c01 	eor.w	ip, r0, r1
 8000a06:	0240      	lsls	r0, r0, #9
 8000a08:	bf18      	it	ne
 8000a0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a0e:	d01e      	beq.n	8000a4e <__aeabi_fmul+0x66>
 8000a10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a28:	bf3e      	ittt	cc
 8000a2a:	0049      	lslcc	r1, r1, #1
 8000a2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a30:	005b      	lslcc	r3, r3, #1
 8000a32:	ea40 0001 	orr.w	r0, r0, r1
 8000a36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000a3c:	d81d      	bhi.n	8000a7a <__aeabi_fmul+0x92>
 8000a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000a42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a46:	bf08      	it	eq
 8000a48:	f020 0001 	biceq.w	r0, r0, #1
 8000a4c:	4770      	bx	lr
 8000a4e:	f090 0f00 	teq	r0, #0
 8000a52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a56:	bf08      	it	eq
 8000a58:	0249      	lsleq	r1, r1, #9
 8000a5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a62:	3a7f      	subs	r2, #127	@ 0x7f
 8000a64:	bfc2      	ittt	gt
 8000a66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a6e:	4770      	bxgt	lr
 8000a70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	3a01      	subs	r2, #1
 8000a7a:	dc5d      	bgt.n	8000b38 <__aeabi_fmul+0x150>
 8000a7c:	f112 0f19 	cmn.w	r2, #25
 8000a80:	bfdc      	itt	le
 8000a82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a86:	4770      	bxle	lr
 8000a88:	f1c2 0200 	rsb	r2, r2, #0
 8000a8c:	0041      	lsls	r1, r0, #1
 8000a8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a92:	f1c2 0220 	rsb	r2, r2, #32
 8000a96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a9e:	f140 0000 	adc.w	r0, r0, #0
 8000aa2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000aa6:	bf08      	it	eq
 8000aa8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aac:	4770      	bx	lr
 8000aae:	f092 0f00 	teq	r2, #0
 8000ab2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ab6:	bf02      	ittt	eq
 8000ab8:	0040      	lsleq	r0, r0, #1
 8000aba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000abe:	3a01      	subeq	r2, #1
 8000ac0:	d0f9      	beq.n	8000ab6 <__aeabi_fmul+0xce>
 8000ac2:	ea40 000c 	orr.w	r0, r0, ip
 8000ac6:	f093 0f00 	teq	r3, #0
 8000aca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ace:	bf02      	ittt	eq
 8000ad0:	0049      	lsleq	r1, r1, #1
 8000ad2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ad6:	3b01      	subeq	r3, #1
 8000ad8:	d0f9      	beq.n	8000ace <__aeabi_fmul+0xe6>
 8000ada:	ea41 010c 	orr.w	r1, r1, ip
 8000ade:	e78f      	b.n	8000a00 <__aeabi_fmul+0x18>
 8000ae0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ae4:	ea92 0f0c 	teq	r2, ip
 8000ae8:	bf18      	it	ne
 8000aea:	ea93 0f0c 	teqne	r3, ip
 8000aee:	d00a      	beq.n	8000b06 <__aeabi_fmul+0x11e>
 8000af0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000af4:	bf18      	it	ne
 8000af6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000afa:	d1d8      	bne.n	8000aae <__aeabi_fmul+0xc6>
 8000afc:	ea80 0001 	eor.w	r0, r0, r1
 8000b00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b04:	4770      	bx	lr
 8000b06:	f090 0f00 	teq	r0, #0
 8000b0a:	bf17      	itett	ne
 8000b0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000b10:	4608      	moveq	r0, r1
 8000b12:	f091 0f00 	teqne	r1, #0
 8000b16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b1a:	d014      	beq.n	8000b46 <__aeabi_fmul+0x15e>
 8000b1c:	ea92 0f0c 	teq	r2, ip
 8000b20:	d101      	bne.n	8000b26 <__aeabi_fmul+0x13e>
 8000b22:	0242      	lsls	r2, r0, #9
 8000b24:	d10f      	bne.n	8000b46 <__aeabi_fmul+0x15e>
 8000b26:	ea93 0f0c 	teq	r3, ip
 8000b2a:	d103      	bne.n	8000b34 <__aeabi_fmul+0x14c>
 8000b2c:	024b      	lsls	r3, r1, #9
 8000b2e:	bf18      	it	ne
 8000b30:	4608      	movne	r0, r1
 8000b32:	d108      	bne.n	8000b46 <__aeabi_fmul+0x15e>
 8000b34:	ea80 0001 	eor.w	r0, r0, r1
 8000b38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_fdiv>:
 8000b50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b58:	bf1e      	ittt	ne
 8000b5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b5e:	ea92 0f0c 	teqne	r2, ip
 8000b62:	ea93 0f0c 	teqne	r3, ip
 8000b66:	d069      	beq.n	8000c3c <__aeabi_fdiv+0xec>
 8000b68:	eba2 0203 	sub.w	r2, r2, r3
 8000b6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b70:	0249      	lsls	r1, r1, #9
 8000b72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b76:	d037      	beq.n	8000be8 <__aeabi_fdiv+0x98>
 8000b78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	bf38      	it	cc
 8000b8c:	005b      	lslcc	r3, r3, #1
 8000b8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b96:	428b      	cmp	r3, r1
 8000b98:	bf24      	itt	cs
 8000b9a:	1a5b      	subcs	r3, r3, r1
 8000b9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ba0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ba4:	bf24      	itt	cs
 8000ba6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000baa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bb2:	bf24      	itt	cs
 8000bb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000bb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bc0:	bf24      	itt	cs
 8000bc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	bf18      	it	ne
 8000bce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bd2:	d1e0      	bne.n	8000b96 <__aeabi_fdiv+0x46>
 8000bd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000bd6:	f63f af50 	bhi.w	8000a7a <__aeabi_fmul+0x92>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bf0:	327f      	adds	r2, #127	@ 0x7f
 8000bf2:	bfc2      	ittt	gt
 8000bf4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bf8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bfc:	4770      	bxgt	lr
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c02:	f04f 0300 	mov.w	r3, #0
 8000c06:	3a01      	subs	r2, #1
 8000c08:	e737      	b.n	8000a7a <__aeabi_fmul+0x92>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c12:	bf02      	ittt	eq
 8000c14:	0040      	lsleq	r0, r0, #1
 8000c16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c1a:	3a01      	subeq	r2, #1
 8000c1c:	d0f9      	beq.n	8000c12 <__aeabi_fdiv+0xc2>
 8000c1e:	ea40 000c 	orr.w	r0, r0, ip
 8000c22:	f093 0f00 	teq	r3, #0
 8000c26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c2a:	bf02      	ittt	eq
 8000c2c:	0049      	lsleq	r1, r1, #1
 8000c2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c32:	3b01      	subeq	r3, #1
 8000c34:	d0f9      	beq.n	8000c2a <__aeabi_fdiv+0xda>
 8000c36:	ea41 010c 	orr.w	r1, r1, ip
 8000c3a:	e795      	b.n	8000b68 <__aeabi_fdiv+0x18>
 8000c3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c40:	ea92 0f0c 	teq	r2, ip
 8000c44:	d108      	bne.n	8000c58 <__aeabi_fdiv+0x108>
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	f47f af7d 	bne.w	8000b46 <__aeabi_fmul+0x15e>
 8000c4c:	ea93 0f0c 	teq	r3, ip
 8000c50:	f47f af70 	bne.w	8000b34 <__aeabi_fmul+0x14c>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e776      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c58:	ea93 0f0c 	teq	r3, ip
 8000c5c:	d104      	bne.n	8000c68 <__aeabi_fdiv+0x118>
 8000c5e:	024b      	lsls	r3, r1, #9
 8000c60:	f43f af4c 	beq.w	8000afc <__aeabi_fmul+0x114>
 8000c64:	4608      	mov	r0, r1
 8000c66:	e76e      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c72:	d1ca      	bne.n	8000c0a <__aeabi_fdiv+0xba>
 8000c74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c78:	f47f af5c 	bne.w	8000b34 <__aeabi_fmul+0x14c>
 8000c7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c80:	f47f af3c 	bne.w	8000afc <__aeabi_fmul+0x114>
 8000c84:	e75f      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c86:	bf00      	nop

08000c88 <__gesf2>:
 8000c88:	f04f 3cff 	mov.w	ip, #4294967295
 8000c8c:	e006      	b.n	8000c9c <__cmpsf2+0x4>
 8000c8e:	bf00      	nop

08000c90 <__lesf2>:
 8000c90:	f04f 0c01 	mov.w	ip, #1
 8000c94:	e002      	b.n	8000c9c <__cmpsf2+0x4>
 8000c96:	bf00      	nop

08000c98 <__cmpsf2>:
 8000c98:	f04f 0c01 	mov.w	ip, #1
 8000c9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ca0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d011      	beq.n	8000cd8 <__cmpsf2+0x40>
 8000cb4:	b001      	add	sp, #4
 8000cb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cba:	bf18      	it	ne
 8000cbc:	ea90 0f01 	teqne	r0, r1
 8000cc0:	bf58      	it	pl
 8000cc2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cc6:	bf88      	it	hi
 8000cc8:	17c8      	asrhi	r0, r1, #31
 8000cca:	bf38      	it	cc
 8000ccc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cd0:	bf18      	it	ne
 8000cd2:	f040 0001 	orrne.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cdc:	d102      	bne.n	8000ce4 <__cmpsf2+0x4c>
 8000cde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ce2:	d105      	bne.n	8000cf0 <__cmpsf2+0x58>
 8000ce4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ce8:	d1e4      	bne.n	8000cb4 <__cmpsf2+0x1c>
 8000cea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cee:	d0e1      	beq.n	8000cb4 <__cmpsf2+0x1c>
 8000cf0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_cfrcmple>:
 8000cf8:	4684      	mov	ip, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4661      	mov	r1, ip
 8000cfe:	e7ff      	b.n	8000d00 <__aeabi_cfcmpeq>

08000d00 <__aeabi_cfcmpeq>:
 8000d00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d02:	f7ff ffc9 	bl	8000c98 <__cmpsf2>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	bf48      	it	mi
 8000d0a:	f110 0f00 	cmnmi.w	r0, #0
 8000d0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d10 <__aeabi_fcmpeq>:
 8000d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d14:	f7ff fff4 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d18:	bf0c      	ite	eq
 8000d1a:	2001      	moveq	r0, #1
 8000d1c:	2000      	movne	r0, #0
 8000d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d22:	bf00      	nop

08000d24 <__aeabi_fcmplt>:
 8000d24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d28:	f7ff ffea 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d2c:	bf34      	ite	cc
 8000d2e:	2001      	movcc	r0, #1
 8000d30:	2000      	movcs	r0, #0
 8000d32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d36:	bf00      	nop

08000d38 <__aeabi_fcmple>:
 8000d38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d3c:	f7ff ffe0 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d40:	bf94      	ite	ls
 8000d42:	2001      	movls	r0, #1
 8000d44:	2000      	movhi	r0, #0
 8000d46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4a:	bf00      	nop

08000d4c <__aeabi_fcmpge>:
 8000d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d50:	f7ff ffd2 	bl	8000cf8 <__aeabi_cfrcmple>
 8000d54:	bf94      	ite	ls
 8000d56:	2001      	movls	r0, #1
 8000d58:	2000      	movhi	r0, #0
 8000d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5e:	bf00      	nop

08000d60 <__aeabi_fcmpgt>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff ffc8 	bl	8000cf8 <__aeabi_cfrcmple>
 8000d68:	bf34      	ite	cc
 8000d6a:	2001      	movcc	r0, #1
 8000d6c:	2000      	movcs	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_f2iz>:
 8000d74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d7c:	d30f      	bcc.n	8000d9e <__aeabi_f2iz+0x2a>
 8000d7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d86:	d90d      	bls.n	8000da4 <__aeabi_f2iz+0x30>
 8000d88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d90:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d94:	fa23 f002 	lsr.w	r0, r3, r2
 8000d98:	bf18      	it	ne
 8000d9a:	4240      	negne	r0, r0
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000da8:	d101      	bne.n	8000dae <__aeabi_f2iz+0x3a>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d105      	bne.n	8000dba <__aeabi_f2iz+0x46>
 8000dae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_f2uiz>:
 8000dc0:	0042      	lsls	r2, r0, #1
 8000dc2:	d20e      	bcs.n	8000de2 <__aeabi_f2uiz+0x22>
 8000dc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000dc8:	d30b      	bcc.n	8000de2 <__aeabi_f2uiz+0x22>
 8000dca:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000dce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dd2:	d409      	bmi.n	8000de8 <__aeabi_f2uiz+0x28>
 8000dd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ddc:	fa23 f002 	lsr.w	r0, r3, r2
 8000de0:	4770      	bx	lr
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	4770      	bx	lr
 8000de8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dec:	d101      	bne.n	8000df2 <__aeabi_f2uiz+0x32>
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	d102      	bne.n	8000df8 <__aeabi_f2uiz+0x38>
 8000df2:	f04f 30ff 	mov.w	r0, #4294967295
 8000df6:	4770      	bx	lr
 8000df8:	f04f 0000 	mov.w	r0, #0
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <fixed_to_float>:
// conversion entre fixed point y int
fixed_point_t float_to_fixed(float x){
    return (fixed_point_t)(x * (1 << FRACTIONAL_BITS));
}

float fixed_to_float(fixed_point_t x){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    return (float) x/(1<< FRACTIONAL_BITS);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fd99 	bl	8000940 <__aeabi_i2f>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe9b 	bl	8000b50 <__aeabi_fdiv>
 8000e1a:	4603      	mov	r3, r0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <fixed_multiply>:

fixed_point_t fixed_multiply(fixed_point_t a, fixed_point_t b) {
 8000e24:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
    return (fixed_point_t)(((int64_t)a * b) >> FRACTIONAL_BITS);
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	17c8      	asrs	r0, r1, #31
 8000e34:	4688      	mov	r8, r1
 8000e36:	4681      	mov	r9, r0
 8000e38:	6839      	ldr	r1, [r7, #0]
 8000e3a:	17c8      	asrs	r0, r1, #31
 8000e3c:	460c      	mov	r4, r1
 8000e3e:	4605      	mov	r5, r0
 8000e40:	fb04 f009 	mul.w	r0, r4, r9
 8000e44:	fb08 f105 	mul.w	r1, r8, r5
 8000e48:	4401      	add	r1, r0
 8000e4a:	fba8 2304 	umull	r2, r3, r8, r4
 8000e4e:	4419      	add	r1, r3
 8000e50:	460b      	mov	r3, r1
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	f04f 0100 	mov.w	r1, #0
 8000e5a:	0d90      	lsrs	r0, r2, #22
 8000e5c:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 8000e60:	1599      	asrs	r1, r3, #22
 8000e62:	4603      	mov	r3, r0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000e6e:	4770      	bx	lr

08000e70 <matmul>:

void matmul(int rowsA, int colsA, int colsB,
            const fixed_point_t A[rowsA][colsA],
            const fixed_point_t B[colsA][colsB],
            fixed_point_t result[rowsA][colsB]){
 8000e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e74:	b08d      	sub	sp, #52	@ 0x34
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6178      	str	r0, [r7, #20]
 8000e7a:	6139      	str	r1, [r7, #16]
 8000e7c:	60fa      	str	r2, [r7, #12]
 8000e7e:	60bb      	str	r3, [r7, #8]
            const fixed_point_t A[rowsA][colsA],
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	1e53      	subs	r3, r2, #1
void matmul(int rowsA, int colsA, int colsB,
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	4692      	mov	sl, r2
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000e9a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000e9e:	ea4f 124a 	mov.w	r2, sl, lsl #5
            const fixed_point_t B[colsA][colsB],
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	603a      	str	r2, [r7, #0]
 8000ea6:	1e53      	subs	r3, r2, #1
void matmul(int rowsA, int colsA, int colsB,
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	4690      	mov	r8, r2
 8000eae:	4699      	mov	r9, r3
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ebc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000ec0:	ea4f 1248 	mov.w	r2, r8, lsl #5
            fixed_point_t result[rowsA][colsB]){
 8000ec4:	68fe      	ldr	r6, [r7, #12]
 8000ec6:	1e73      	subs	r3, r6, #1
void matmul(int rowsA, int colsA, int colsB,
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	4632      	mov	r2, r6
 8000ecc:	2300      	movs	r3, #0
 8000ece:	4614      	mov	r4, r2
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	016b      	lsls	r3, r5, #5
 8000edc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ee0:	0162      	lsls	r2, r4, #5
    for (int i = 0; i < rowsA; i++) 
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ee6:	e04d      	b.n	8000f84 <matmul+0x114>
    {
        for (int j = 0; j < colsB; j++) 
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eec:	e043      	b.n	8000f76 <matmul+0x106>
        {
          result[i][j] = 0;
 8000eee:	4632      	mov	r2, r6
 8000ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000efa:	4413      	add	r3, r2
 8000efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000efe:	2100      	movs	r1, #0
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          for (int k = 0; k < colsA; k++) 
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f08:	e02e      	b.n	8000f68 <matmul+0xf8>
            {
            result[i][j]+=fixed_multiply(A[i][k],B[k][j]);
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	4413      	add	r3, r2
 8000f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000f2a:	4413      	add	r3, r2
 8000f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff ff76 	bl	8000e24 <fixed_multiply>
 8000f38:	4632      	mov	r2, r6
 8000f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000f44:	4413      	add	r3, r2
 8000f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f50:	fb01 f303 	mul.w	r3, r1, r3
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000f58:	440b      	add	r3, r1
 8000f5a:	1881      	adds	r1, r0, r2
 8000f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          for (int k = 0; k < colsA; k++) 
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	3301      	adds	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbcc      	blt.n	8000f0a <matmul+0x9a>
        for (int j = 0; j < colsB; j++) 
 8000f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f72:	3301      	adds	r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbb7      	blt.n	8000eee <matmul+0x7e>
    for (int i = 0; i < rowsA; i++) 
 8000f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f80:	3301      	adds	r3, #1
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbad      	blt.n	8000ee8 <matmul+0x78>
            }
        }
    } 
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3734      	adds	r7, #52	@ 0x34
 8000f92:	46bd      	mov	sp, r7
 8000f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f98 <vecadd>:
 * @param result The output vector where the element-wise sum of `a` and `b` will be stored.
 */
void vecadd(int size,
            const fixed_point_t a[size][1], 
            const fixed_point_t b[size][1], 
            fixed_point_t result[size][1]) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size; i++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e012      	b.n	8000fd2 <vecadd+0x3a>
        result[i][0] = a[i][0] + b[i][0];
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	4403      	add	r3, r0
 8000fc8:	440a      	add	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < size; i++) {
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3e8      	bcc.n	8000fac <vecadd+0x14>
    }
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_TIM_IC_CaptureCallback>:
/// pin de señal de sensado de la camara. 
/// Cuando se ejecuta, se actualiza el valor de h_prom con el valor de la señal, y
/// se hace un toggle al PIN 13, (???) (que hace el pin 13?)
/// @param htim 
int captura = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	h_prom = TIM3->CCR1;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ff8:	601a      	str	r2, [r3, #0]
  // I don't remember why this is here
  //	mayor a 2900 lo ignoro, sino actualizo el valor por los pixeles al final del sensor
	if (captura==0){
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d116      	bne.n	8001030 <HAL_TIM_IC_CaptureCallback+0x48>
		if(h_prom>2900){
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f640 3254 	movw	r2, #2900	@ 0xb54
 800100a:	4293      	cmp	r3, r2
 800100c:	dd04      	ble.n	8001018 <HAL_TIM_IC_CaptureCallback+0x30>
		    h_prom = h_prom;
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e003      	b.n	8001020 <HAL_TIM_IC_CaptureCallback+0x38>
		  }else{
		    h_prom = 2900;
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 800101a:	f640 3254 	movw	r2, #2900	@ 0xb54
 800101e:	601a      	str	r2, [r3, #0]
		  }
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // What is this for??? A LED?
 8001020:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001026:	f001 fdc7 	bl	8002bb8 <HAL_GPIO_TogglePin>
		captura = 1;
 800102a:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x58>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
	}
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40000400 	.word	0x40000400
 800103c:	20000074 	.word	0x20000074
 8001040:	2000039c 	.word	0x2000039c
 8001044:	40011000 	.word	0x40011000

08001048 <HAL_ADC_ConvCpltCallback>:

float i;
float u_float = 5.8;
float h; // Declare the variable h
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b095      	sub	sp, #84	@ 0x54
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]

	i = HAL_ADC_GetValue(&hadc1)*0.0023157-4.785;
 8001050:	48a7      	ldr	r0, [pc, #668]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001052:	f001 f897 	bl	8002184 <HAL_ADC_GetValue>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff faed 	bl	8000638 <__aeabi_ui2d>
 800105e:	a398      	add	r3, pc, #608	@ (adr r3, 80012c0 <HAL_ADC_ConvCpltCallback+0x278>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff f87c 	bl	8000160 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	a395      	add	r3, pc, #596	@ (adr r3, 80012c8 <HAL_ADC_ConvCpltCallback+0x280>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff f9a1 	bl	80003bc <__aeabi_dsub>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fb53 	bl	800072c <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	4a9a      	ldr	r2, [pc, #616]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800108a:	6013      	str	r3, [r2, #0]
	h = ((h_prom)*0.0272065-63.235847)*0.001; // valor en mm
 800108c:	4b9a      	ldr	r3, [pc, #616]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fae1 	bl	8000658 <__aeabi_i2d>
 8001096:	a38e      	add	r3, pc, #568	@ (adr r3, 80012d0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f860 	bl	8000160 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	a38b      	add	r3, pc, #556	@ (adr r3, 80012d8 <HAL_ADC_ConvCpltCallback+0x290>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff f985 	bl	80003bc <__aeabi_dsub>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	a389      	add	r3, pc, #548	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x298>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff f84e 	bl	8000160 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fb2e 	bl	800072c <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a8a      	ldr	r2, [pc, #552]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x2b4>)
 80010d4:	6013      	str	r3, [r2, #0]

	// x_0 = [i; h; 0]
	x_hat[0][0] = FLOAT_TO_FIXED(i);
 80010d6:	4b87      	ldr	r3, [pc, #540]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fc82 	bl	80009e8 <__aeabi_fmul>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe44 	bl	8000d74 <__aeabi_f2iz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a84      	ldr	r2, [pc, #528]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80010f0:	6013      	str	r3, [r2, #0]
	x_hat[1][0] = FLOAT_TO_FIXED(h);
 80010f2:	4b82      	ldr	r3, [pc, #520]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x2b4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc74 	bl	80009e8 <__aeabi_fmul>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe36 	bl	8000d74 <__aeabi_f2iz>
 8001108:	4603      	mov	r3, r0
 800110a:	4a7d      	ldr	r2, [pc, #500]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800110c:	6053      	str	r3, [r2, #4]
	x_hat[2][0] = FLOAT_TO_FIXED(0.0f);
 800110e:	4b7c      	ldr	r3, [pc, #496]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]

	// Perform calculations
	// step 1: x_hat = G*x_hat + H*u
	fixed_point_t Gx_hat[3][1];
	fixed_point_t x_hat_1[3][1];
	matmul(3, 3, 1, G, x_hat, Gx_hat);
 8001114:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	4b79      	ldr	r3, [pc, #484]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4b79      	ldr	r3, [pc, #484]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8001120:	2201      	movs	r2, #1
 8001122:	2103      	movs	r1, #3
 8001124:	2003      	movs	r0, #3
 8001126:	f7ff fea3 	bl	8000e70 <matmul>
	// H*u = H_fixed * u_float
	fixed_point_t H_fixed_u[3][1];
	H_fixed_u[0][0] = fixed_multiply(H_fixed[0][0], FLOAT_TO_FIXED(u_float));
 800112a:	4b77      	ldr	r3, [pc, #476]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x2c0>)
 800112c:	681c      	ldr	r4, [r3, #0]
 800112e:	4b77      	ldr	r3, [pc, #476]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fc56 	bl	80009e8 <__aeabi_fmul>
 800113c:	4603      	mov	r3, r0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fe18 	bl	8000d74 <__aeabi_f2iz>
 8001144:	4603      	mov	r3, r0
 8001146:	4619      	mov	r1, r3
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff fe6b 	bl	8000e24 <fixed_multiply>
 800114e:	4603      	mov	r3, r0
 8001150:	61bb      	str	r3, [r7, #24]
	H_fixed_u[2][0] = fixed_multiply(H_fixed[0][2], FLOAT_TO_FIXED(u_float));
 8001152:	4b6d      	ldr	r3, [pc, #436]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8001154:	689c      	ldr	r4, [r3, #8]
 8001156:	4b6d      	ldr	r3, [pc, #436]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fc42 	bl	80009e8 <__aeabi_fmul>
 8001164:	4603      	mov	r3, r0
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe04 	bl	8000d74 <__aeabi_f2iz>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff fe57 	bl	8000e24 <fixed_multiply>
 8001176:	4603      	mov	r3, r0
 8001178:	623b      	str	r3, [r7, #32]
	vecadd(3, Gx_hat, H_fixed_u, x_hat_1);
 800117a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117e:	f107 0218 	add.w	r2, r7, #24
 8001182:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001186:	2003      	movs	r0, #3
 8001188:	f7ff ff06 	bl	8000f98 <vecadd>
	// step 2: y_hat = Cminus*x_hat
	//fixed_point_t y_hat_negative[2][1];
	matmul(2, 3, 1, Cminus, x_hat_1, y_hat_negative);
 800118c:	4b60      	ldr	r3, [pc, #384]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	4b5f      	ldr	r3, [pc, #380]	@ (8001314 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8001198:	2201      	movs	r2, #1
 800119a:	2103      	movs	r1, #3
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff fe67 	bl	8000e70 <matmul>
	// step 3: z_hat = y + y_hat_negative
	vecadd(2, y, y_hat_negative, z_hat);
 80011a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001318 <HAL_ADC_ConvCpltCallback+0x2d0>)
 80011a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 80011a6:	495d      	ldr	r1, [pc, #372]	@ (800131c <HAL_ADC_ConvCpltCallback+0x2d4>)
 80011a8:	2002      	movs	r0, #2
 80011aa:	f7ff fef5 	bl	8000f98 <vecadd>
	// step 4: x_hat = x_hat + K*z_hat
	matmul(3, 2, 1, Kkalman, z_hat, lz);
 80011ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x2d8>)
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b59      	ldr	r3, [pc, #356]	@ (8001318 <HAL_ADC_ConvCpltCallback+0x2d0>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001324 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	2102      	movs	r1, #2
 80011bc:	2003      	movs	r0, #3
 80011be:	f7ff fe57 	bl	8000e70 <matmul>
	vecadd(3, x_hat_1, lz, x_hat_result);
 80011c2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80011c6:	4b58      	ldr	r3, [pc, #352]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80011c8:	4a55      	ldr	r2, [pc, #340]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x2d8>)
 80011ca:	2003      	movs	r0, #3
 80011cc:	f7ff fee4 	bl	8000f98 <vecadd>
	// Save x_hat_result back to x_hat
	for (int i = 0; i < 3; i++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80011d4:	e00a      	b.n	80011ec <HAL_ADC_ConvCpltCallback+0x1a4>
		x_hat[i][0] = x_hat_result[i][0];
 80011d6:	4a54      	ldr	r2, [pc, #336]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80011d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011de:	4948      	ldr	r1, [pc, #288]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80011e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 80011e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e8:	3301      	adds	r3, #1
 80011ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80011ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	ddf1      	ble.n	80011d6 <HAL_ADC_ConvCpltCallback+0x18e>
	}
	// LQR
	// Kd = [0.018029293079868  -4.111538385920691  -0.146874468496660]
	// precomp = -1.662218623972525
	// step 1: u = -K*x + precomp * h_ref
	fixed_point_t Kd[1][3] = {
 80011f2:	4a4e      	ldr	r2, [pc, #312]	@ (800132c <HAL_ADC_ConvCpltCallback+0x2e4>)
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  FLOAT_TO_FIXED(0.0018029293079868),
	  FLOAT_TO_FIXED(-0.4111538385920691),
	  FLOAT_TO_FIXED(-0.0146874468496660)
	}
	};
	fixed_point_t h_ref = FLOAT_TO_FIXED(0.025f);
 80011fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001330 <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001200:	643b      	str	r3, [r7, #64]	@ 0x40
	fixed_point_t precomp = FLOAT_TO_FIXED(-0.1662218623972525);
 8001202:	4b4c      	ldr	r3, [pc, #304]	@ (8001334 <HAL_ADC_ConvCpltCallback+0x2ec>)
 8001204:	63fb      	str	r3, [r7, #60]	@ 0x3c
	fixed_point_t u[1][1];
	matmul(1, 3, 1, Kd, x_hat_result, u);
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	4b45      	ldr	r3, [pc, #276]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4613      	mov	r3, r2
 8001216:	2201      	movs	r2, #1
 8001218:	2103      	movs	r1, #3
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fe28 	bl	8000e70 <matmul>
	u[0][0] = fixed_multiply(precomp, h_ref);
 8001220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001222:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001224:	f7ff fdfe 	bl	8000e24 <fixed_multiply>
 8001228:	4603      	mov	r3, r0
 800122a:	60bb      	str	r3, [r7, #8]
	u_float = - 1e3 * fixed_to_float(u[0][0]);
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fde6 	bl	8000e00 <fixed_to_float>
 8001234:	4603      	mov	r3, r0
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fa20 	bl	800067c <__aeabi_f2d>
 800123c:	a32a      	add	r3, pc, #168	@ (adr r3, 80012e8 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7fe ff8d 	bl	8000160 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fa6d 	bl	800072c <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a2d      	ldr	r2, [pc, #180]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 8001256:	6013      	str	r3, [r2, #0]
	// Use x_hat_result_float for further processing
	// convert u to the range of the PWM
	// Convert u to the range of the PWM, v_max = 12, v_min = 0
	// ARR = 7199
	// duty_cycle = CRR/ARR
	if(u_float < 0){
 8001258:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f04f 0100 	mov.w	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fd5f 	bl	8000d24 <__aeabi_fcmplt>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <HAL_ADC_ConvCpltCallback+0x22e>
		u_float = 0;
 800126c:	4b27      	ldr	r3, [pc, #156]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e00b      	b.n	800128e <HAL_ADC_ConvCpltCallback+0x246>
	}else if(u_float > 12){
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	492f      	ldr	r1, [pc, #188]	@ (8001338 <HAL_ADC_ConvCpltCallback+0x2f0>)
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fd6f 	bl	8000d60 <__aeabi_fcmpgt>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <HAL_ADC_ConvCpltCallback+0x246>
		u_float = 12;
 8001288:	4b20      	ldr	r3, [pc, #128]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 800128a:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <HAL_ADC_ConvCpltCallback+0x2f0>)
 800128c:	601a      	str	r2, [r3, #0]
	}
		TIM1->CCR1 = (uint32_t)(u_float/12) * 7199; // 12 is max voltage, 7199 is ARR
 800128e:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4929      	ldr	r1, [pc, #164]	@ (8001338 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fc5b 	bl	8000b50 <__aeabi_fdiv>
 800129a:	4603      	mov	r3, r0
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fd8f 	bl	8000dc0 <__aeabi_f2uiz>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a25      	ldr	r2, [pc, #148]	@ (800133c <HAL_ADC_ConvCpltCallback+0x2f4>)
 80012a6:	f641 411f 	movw	r1, #7199	@ 0x1c1f
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	6353      	str	r3, [r2, #52]	@ 0x34
		captura = 0;
 80012b0:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <HAL_ADC_ConvCpltCallback+0x2f8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
	}
 80012b6:	bf00      	nop
 80012b8:	374c      	adds	r7, #76	@ 0x4c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	f88e1bb7 	.word	0xf88e1bb7
 80012c4:	3f62f85f 	.word	0x3f62f85f
 80012c8:	0a3d70a4 	.word	0x0a3d70a4
 80012cc:	401323d7 	.word	0x401323d7
 80012d0:	4ef459da 	.word	0x4ef459da
 80012d4:	3f9bdc05 	.word	0x3f9bdc05
 80012d8:	3c07ee0b 	.word	0x3c07ee0b
 80012dc:	404f9e30 	.word	0x404f9e30
 80012e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80012e4:	3f50624d 	.word	0x3f50624d
 80012e8:	00000000 	.word	0x00000000
 80012ec:	c08f4000 	.word	0xc08f4000
 80012f0:	2000026c 	.word	0x2000026c
 80012f4:	200003a0 	.word	0x200003a0
 80012f8:	20000074 	.word	0x20000074
 80012fc:	200003a4 	.word	0x200003a4
 8001300:	20000024 	.word	0x20000024
 8001304:	20000000 	.word	0x20000000
 8001308:	20000060 	.word	0x20000060
 800130c:	20000078 	.word	0x20000078
 8001310:	20000374 	.word	0x20000374
 8001314:	20000030 	.word	0x20000030
 8001318:	2000037c 	.word	0x2000037c
 800131c:	2000006c 	.word	0x2000006c
 8001320:	20000384 	.word	0x20000384
 8001324:	20000048 	.word	0x20000048
 8001328:	20000390 	.word	0x20000390
 800132c:	0800b35c 	.word	0x0800b35c
 8001330:	00019999 	.word	0x00019999
 8001334:	fff55c9f 	.word	0xfff55c9f
 8001338:	41400000 	.word	0x41400000
 800133c:	40012c00 	.word	0x40012c00
 8001340:	2000039c 	.word	0x2000039c

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134a:	f000 fd07 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134e:	f000 f879 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001352:	f000 fa6b 	bl	800182c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001356:	f000 f8d3 	bl	8001500 <MX_ADC1_Init>
  MX_TIM1_Init();
 800135a:	f000 f90f 	bl	800157c <MX_TIM1_Init>
  MX_TIM2_Init();
 800135e:	f000 f991 	bl	8001684 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001362:	f000 f9e7 	bl	8001734 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001366:	f008 fea1 	bl	800a0ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800136a:	482c      	ldr	r0, [pc, #176]	@ (800141c <main+0xd8>)
 800136c:	f000 fe54 	bl	8002018 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001370:	2104      	movs	r1, #4
 8001372:	482b      	ldr	r0, [pc, #172]	@ (8001420 <main+0xdc>)
 8001374:	f003 fe7e 	bl	8005074 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001378:	2100      	movs	r1, #0
 800137a:	4829      	ldr	r0, [pc, #164]	@ (8001420 <main+0xdc>)
 800137c:	f003 ff6c 	bl	8005258 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001380:	2100      	movs	r1, #0
 8001382:	4828      	ldr	r0, [pc, #160]	@ (8001424 <main+0xe0>)
 8001384:	f003 fe76 	bl	8005074 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001388:	2100      	movs	r1, #0
 800138a:	4827      	ldr	r0, [pc, #156]	@ (8001428 <main+0xe4>)
 800138c:	f003 fe72 	bl	8005074 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001390:	2100      	movs	r1, #0
 8001392:	4825      	ldr	r0, [pc, #148]	@ (8001428 <main+0xe4>)
 8001394:	f004 fe06 	bl	8005fa4 <HAL_TIMEx_PWMN_Start>
  char data[35];

  while (1)
  {
    /* USER CODE END WHILE */
    h_hat = fixed_to_float(x_hat_result[1][0]);
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <main+0xe8>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fd2f 	bl	8000e00 <fixed_to_float>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <main+0xec>)
 80013a6:	6013      	str	r3, [r2, #0]
    //	sprintf(data, "%d %d %d",h_prom, (int)(10000*h), (int)(10000*h_hat)); // Test position and kalman
    //	CDC_Transmit_FS(data,strlen(data));
    //	HAL_Delay(100);
    // sprintf(data, "%d\n", h_prom);
    value += direction;
 80013a8:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <main+0xf0>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <main+0xf4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a20      	ldr	r2, [pc, #128]	@ (8001434 <main+0xf0>)
 80013b4:	6013      	str	r3, [r2, #0]
    value2 -= direction;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <main+0xf8>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <main+0xf4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <main+0xf8>)
 80013c2:	6013      	str	r3, [r2, #0]
    if (value > 100) {
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <main+0xf0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b64      	cmp	r3, #100	@ 0x64
 80013ca:	dd07      	ble.n	80013dc <main+0x98>
        value = 100;  // Constrain to max value
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <main+0xf0>)
 80013ce:	2264      	movs	r2, #100	@ 0x64
 80013d0:	601a      	str	r2, [r3, #0]
        direction = -1;  // Change direction
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <main+0xf4>)
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e009      	b.n	80013f0 <main+0xac>
    } else if (value < 0) {
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <main+0xf0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	da05      	bge.n	80013f0 <main+0xac>
        value = 0;  // Constrain to min value
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <main+0xf0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
        direction = 1;  // Change direction
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <main+0xf4>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
    }

    HAL_Delay(100);
 80013f0:	2064      	movs	r0, #100	@ 0x64
 80013f2:	f000 fd15 	bl	8001e20 <HAL_Delay>
    sprintf(data, "%d\n", value);
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <main+0xf0>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4910      	ldr	r1, [pc, #64]	@ (8001440 <main+0xfc>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f009 faf0 	bl	800a9e4 <siprintf>
    
    CDC_Transmit_FS(data, strlen(data));
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe fea2 	bl	8000150 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f008 ff07 	bl	800a228 <CDC_Transmit_FS>
    h_hat = fixed_to_float(x_hat_result[1][0]);
 800141a:	e7bd      	b.n	8001398 <main+0x54>
 800141c:	2000026c 	.word	0x2000026c
 8001420:	2000032c 	.word	0x2000032c
 8001424:	200002e4 	.word	0x200002e4
 8001428:	2000029c 	.word	0x2000029c
 800142c:	20000390 	.word	0x20000390
 8001430:	200003a8 	.word	0x200003a8
 8001434:	200003ac 	.word	0x200003ac
 8001438:	2000007c 	.word	0x2000007c
 800143c:	20000080 	.word	0x20000080
 8001440:	0800b368 	.word	0x0800b368

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	@ 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800144e:	2228      	movs	r2, #40	@ 0x28
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f009 fae6 	bl	800aa24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001474:	2301      	movs	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001478:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001482:	2301      	movs	r3, #1
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800148e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001490:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001494:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800149a:	4618      	mov	r0, r3
 800149c:	f003 f906 	bl	80046ac <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014a6:	f000 fa19 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2102      	movs	r1, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fb72 	bl	8004bb0 <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014d2:	f000 fa03 	bl	80018dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80014d6:	2312      	movs	r3, #18
 80014d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014de:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fcbe 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80014f2:	f000 f9f3 	bl	80018dc <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3750      	adds	r7, #80	@ 0x50
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_ADC1_Init+0x74>)
 8001512:	4a19      	ldr	r2, [pc, #100]	@ (8001578 <MX_ADC1_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <MX_ADC1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800151c:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_ADC1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001522:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <MX_ADC1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <MX_ADC1_Init+0x74>)
 800152a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800152e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <MX_ADC1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001536:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_ADC1_Init+0x74>)
 8001538:	2201      	movs	r2, #1
 800153a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153c:	480d      	ldr	r0, [pc, #52]	@ (8001574 <MX_ADC1_Init+0x74>)
 800153e:	f000 fc93 	bl	8001e68 <HAL_ADC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001548:	f000 f9c8 	bl	80018dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001550:	2301      	movs	r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_ADC1_Init+0x74>)
 800155e:	f000 fee5 	bl	800232c <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001568:	f000 f9b8 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000026c 	.word	0x2000026c
 8001578:	40012400 	.word	0x40012400

0800157c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b092      	sub	sp, #72	@ 0x48
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001582:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2220      	movs	r2, #32
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f009 fa3c 	bl	800aa24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ac:	4b33      	ldr	r3, [pc, #204]	@ (800167c <MX_TIM1_Init+0x100>)
 80015ae:	4a34      	ldr	r2, [pc, #208]	@ (8001680 <MX_TIM1_Init+0x104>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015b2:	4b32      	ldr	r3, [pc, #200]	@ (800167c <MX_TIM1_Init+0x100>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b30      	ldr	r3, [pc, #192]	@ (800167c <MX_TIM1_Init+0x100>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80015be:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <MX_TIM1_Init+0x100>)
 80015c0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80015c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <MX_TIM1_Init+0x100>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <MX_TIM1_Init+0x100>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <MX_TIM1_Init+0x100>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015d8:	4828      	ldr	r0, [pc, #160]	@ (800167c <MX_TIM1_Init+0x100>)
 80015da:	f003 fcfb 	bl	8004fd4 <HAL_TIM_PWM_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80015e4:	f000 f97a 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015e8:	2320      	movs	r3, #32
 80015ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015f4:	4619      	mov	r1, r3
 80015f6:	4821      	ldr	r0, [pc, #132]	@ (800167c <MX_TIM1_Init+0x100>)
 80015f8:	f004 fd72 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001602:	f000 f96b 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001606:	2360      	movs	r3, #96	@ 0x60
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 3600;
 800160a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001614:	2308      	movs	r3, #8
 8001616:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	4813      	ldr	r0, [pc, #76]	@ (800167c <MX_TIM1_Init+0x100>)
 800162e:	f004 f8ab 	bl	8005788 <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001638:	f000 f950 	bl	80018dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 36;
 8001648:	2324      	movs	r3, #36	@ 0x24
 800164a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001654:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4807      	ldr	r0, [pc, #28]	@ (800167c <MX_TIM1_Init+0x100>)
 8001660:	f004 fd9c 	bl	800619c <HAL_TIMEx_ConfigBreakDeadTime>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800166a:	f000 f937 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800166e:	4803      	ldr	r0, [pc, #12]	@ (800167c <MX_TIM1_Init+0x100>)
 8001670:	f000 fa26 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 8001674:	bf00      	nop
 8001676:	3748      	adds	r7, #72	@ 0x48
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000029c 	.word	0x2000029c
 8001680:	40012c00 	.word	0x40012c00

08001684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a6:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <MX_TIM2_Init+0xac>)
 80016a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <MX_TIM2_Init+0xac>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <MX_TIM2_Init+0xac>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 71;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <MX_TIM2_Init+0xac>)
 80016bc:	2247      	movs	r2, #71	@ 0x47
 80016be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <MX_TIM2_Init+0xac>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <MX_TIM2_Init+0xac>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016cc:	4818      	ldr	r0, [pc, #96]	@ (8001730 <MX_TIM2_Init+0xac>)
 80016ce:	f003 fc81 	bl	8004fd4 <HAL_TIM_PWM_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80016d8:	f000 f900 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4619      	mov	r1, r3
 80016ea:	4811      	ldr	r0, [pc, #68]	@ (8001730 <MX_TIM2_Init+0xac>)
 80016ec:	f004 fcf8 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80016f6:	f000 f8f1 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fa:	2360      	movs	r3, #96	@ 0x60
 80016fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 35;
 80016fe:	2323      	movs	r3, #35	@ 0x23
 8001700:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001702:	2302      	movs	r3, #2
 8001704:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4807      	ldr	r0, [pc, #28]	@ (8001730 <MX_TIM2_Init+0xac>)
 8001712:	f004 f839 	bl	8005788 <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800171c:	f000 f8de 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <MX_TIM2_Init+0xac>)
 8001722:	f000 f9cd 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002e4 	.word	0x200002e4

08001734 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08e      	sub	sp, #56	@ 0x38
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	615a      	str	r2, [r3, #20]
 8001762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001764:	4b2f      	ldr	r3, [pc, #188]	@ (8001824 <MX_TIM3_Init+0xf0>)
 8001766:	4a30      	ldr	r2, [pc, #192]	@ (8001828 <MX_TIM3_Init+0xf4>)
 8001768:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <MX_TIM3_Init+0xf0>)
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b2c      	ldr	r3, [pc, #176]	@ (8001824 <MX_TIM3_Init+0xf0>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <MX_TIM3_Init+0xf0>)
 8001778:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800177c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177e:	4b29      	ldr	r3, [pc, #164]	@ (8001824 <MX_TIM3_Init+0xf0>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001784:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <MX_TIM3_Init+0xf0>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800178a:	4826      	ldr	r0, [pc, #152]	@ (8001824 <MX_TIM3_Init+0xf0>)
 800178c:	f003 fd14 	bl	80051b8 <HAL_TIM_IC_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001796:	f000 f8a1 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800179a:	4822      	ldr	r0, [pc, #136]	@ (8001824 <MX_TIM3_Init+0xf0>)
 800179c:	f003 fc1a 	bl	8004fd4 <HAL_TIM_PWM_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017a6:	f000 f899 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017aa:	2320      	movs	r3, #32
 80017ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017b6:	4619      	mov	r1, r3
 80017b8:	481a      	ldr	r0, [pc, #104]	@ (8001824 <MX_TIM3_Init+0xf0>)
 80017ba:	f004 fc91 	bl	80060e0 <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017c4:	f000 f88a 	bl	80018dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017cc:	2301      	movs	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICFilter = 15;
 80017d4:	230f      	movs	r3, #15
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017d8:	f107 0320 	add.w	r3, r7, #32
 80017dc:	2200      	movs	r2, #0
 80017de:	4619      	mov	r1, r3
 80017e0:	4810      	ldr	r0, [pc, #64]	@ (8001824 <MX_TIM3_Init+0xf0>)
 80017e2:	f003 ff35 	bl	8005650 <HAL_TIM_IC_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80017ec:	f000 f876 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f0:	2360      	movs	r3, #96	@ 0x60
 80017f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72;
 80017f4:	2348      	movs	r3, #72	@ 0x48
 80017f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2204      	movs	r2, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4807      	ldr	r0, [pc, #28]	@ (8001824 <MX_TIM3_Init+0xf0>)
 8001808:	f003 ffbe 	bl	8005788 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001812:	f000 f863 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001816:	4803      	ldr	r0, [pc, #12]	@ (8001824 <MX_TIM3_Init+0xf0>)
 8001818:	f000 f952 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 800181c:	bf00      	nop
 800181e:	3738      	adds	r7, #56	@ 0x38
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000032c 	.word	0x2000032c
 8001828:	40000400 	.word	0x40000400

0800182c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001840:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a23      	ldr	r2, [pc, #140]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a1d      	ldr	r2, [pc, #116]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 800185e:	f043 0320 	orr.w	r3, r3, #32
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a17      	ldr	r2, [pc, #92]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a11      	ldr	r2, [pc, #68]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <MX_GPIO_Init+0xa8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018a6:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <MX_GPIO_Init+0xac>)
 80018a8:	f001 f96e 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	4619      	mov	r1, r3
 80018c4:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <MX_GPIO_Init+0xac>)
 80018c6:	f000 ffdb 	bl	8002880 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40011000 	.word	0x40011000

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <Error_Handler+0x8>

080018e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <HAL_MspInit+0x5c>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	4a14      	ldr	r2, [pc, #80]	@ (8001944 <HAL_MspInit+0x5c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6193      	str	r3, [r2, #24]
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_MspInit+0x5c>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_MspInit+0x5c>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a0e      	ldr	r2, [pc, #56]	@ (8001944 <HAL_MspInit+0x5c>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <HAL_MspInit+0x5c>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <HAL_MspInit+0x60>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <HAL_MspInit+0x60>)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	40021000 	.word	0x40021000
 8001948:	40010000 	.word	0x40010000

0800194c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a18      	ldr	r2, [pc, #96]	@ (80019c8 <HAL_ADC_MspInit+0x7c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d129      	bne.n	80019c0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_ADC_MspInit+0x80>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a16      	ldr	r2, [pc, #88]	@ (80019cc <HAL_ADC_MspInit+0x80>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_ADC_MspInit+0x80>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_ADC_MspInit+0x80>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a10      	ldr	r2, [pc, #64]	@ (80019cc <HAL_ADC_MspInit+0x80>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <HAL_ADC_MspInit+0x80>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800199c:	2301      	movs	r3, #1
 800199e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a0:	2303      	movs	r3, #3
 80019a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	4619      	mov	r1, r3
 80019aa:	4809      	ldr	r0, [pc, #36]	@ (80019d0 <HAL_ADC_MspInit+0x84>)
 80019ac:	f000 ff68 	bl	8002880 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2012      	movs	r0, #18
 80019b6:	f000 ff2c 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019ba:	2012      	movs	r0, #18
 80019bc:	f000 ff45 	bl	800284a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019c0:	bf00      	nop
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40012400 	.word	0x40012400
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010800 	.word	0x40010800

080019d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <HAL_TIM_PWM_MspInit+0x58>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10c      	bne.n	8001a00 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_TIM_PWM_MspInit+0x5c>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <HAL_TIM_PWM_MspInit+0x5c>)
 80019ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019f0:	6193      	str	r3, [r2, #24]
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_TIM_PWM_MspInit+0x5c>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019fe:	e010      	b.n	8001a22 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a08:	d10b      	bne.n	8001a22 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_TIM_PWM_MspInit+0x5c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_TIM_PWM_MspInit+0x5c>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_TIM_PWM_MspInit+0x5c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a19      	ldr	r2, [pc, #100]	@ (8001ab4 <HAL_TIM_IC_MspInit+0x80>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d12b      	bne.n	8001aac <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <HAL_TIM_IC_MspInit+0x84>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	4a17      	ldr	r2, [pc, #92]	@ (8001ab8 <HAL_TIM_IC_MspInit+0x84>)
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	61d3      	str	r3, [r2, #28]
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_TIM_IC_MspInit+0x84>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_TIM_IC_MspInit+0x84>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a11      	ldr	r2, [pc, #68]	@ (8001ab8 <HAL_TIM_IC_MspInit+0x84>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <HAL_TIM_IC_MspInit+0x84>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a84:	2340      	movs	r3, #64	@ 0x40
 8001a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	4809      	ldr	r0, [pc, #36]	@ (8001abc <HAL_TIM_IC_MspInit+0x88>)
 8001a98:	f000 fef2 	bl	8002880 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	201d      	movs	r0, #29
 8001aa2:	f000 feb6 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aa6:	201d      	movs	r0, #29
 8001aa8:	f000 fecf 	bl	800284a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40000400 	.word	0x40000400
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010800 	.word	0x40010800

08001ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	@ 0x30
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a44      	ldr	r2, [pc, #272]	@ (8001bec <HAL_TIM_MspPostInit+0x12c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d132      	bne.n	8001b46 <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae0:	4b43      	ldr	r3, [pc, #268]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a42      	ldr	r2, [pc, #264]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b40      	ldr	r3, [pc, #256]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a3c      	ldr	r2, [pc, #240]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4833      	ldr	r0, [pc, #204]	@ (8001bf4 <HAL_TIM_MspPostInit+0x134>)
 8001b26:	f000 feab 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	482e      	ldr	r0, [pc, #184]	@ (8001bf8 <HAL_TIM_MspPostInit+0x138>)
 8001b40:	f000 fe9e 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b44:	e04d      	b.n	8001be2 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b4e:	d12b      	bne.n	8001ba8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2302      	movs	r3, #2
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	481e      	ldr	r0, [pc, #120]	@ (8001bf8 <HAL_TIM_MspPostInit+0x138>)
 8001b7e:	f000 fe7f 	bl	8002880 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_TIM_MspPostInit+0x13c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b92:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba0:	4a16      	ldr	r2, [pc, #88]	@ (8001bfc <HAL_TIM_MspPostInit+0x13c>)
 8001ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba4:	6053      	str	r3, [r2, #4]
}
 8001ba6:	e01c      	b.n	8001be2 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a14      	ldr	r2, [pc, #80]	@ (8001c00 <HAL_TIM_MspPostInit+0x140>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d117      	bne.n	8001be2 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6193      	str	r3, [r2, #24]
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_TIM_MspPostInit+0x130>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <HAL_TIM_MspPostInit+0x138>)
 8001bde:	f000 fe4f 	bl	8002880 <HAL_GPIO_Init>
}
 8001be2:	bf00      	nop
 8001be4:	3730      	adds	r7, #48	@ 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010c00 	.word	0x40010c00
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40000400 	.word	0x40000400

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <NMI_Handler+0x4>

08001c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 f8c8 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <ADC1_2_IRQHandler+0x10>)
 8001c62:	f000 fa9b 	bl	800219c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000026c 	.word	0x2000026c

08001c70 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001c76:	f001 f8d4 	bl	8002e22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20001080 	.word	0x20001080

08001c84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <TIM3_IRQHandler+0x10>)
 8001c8a:	f003 fbf1 	bl	8005470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000032c 	.word	0x2000032c

08001c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <_sbrk+0x5c>)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <_sbrk+0x60>)
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <_sbrk+0x64>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <_sbrk+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d207      	bcs.n	8001cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc8:	f008 feb4 	bl	800aa34 <__errno>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	220c      	movs	r2, #12
 8001cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	e009      	b.n	8001cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <_sbrk+0x64>)
 8001ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cea:	68fb      	ldr	r3, [r7, #12]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20005000 	.word	0x20005000
 8001cf8:	00000400 	.word	0x00000400
 8001cfc:	200003b0 	.word	0x200003b0
 8001d00:	200016c0 	.word	0x200016c0

08001d04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d10:	f7ff fff8 	bl	8001d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d14:	480b      	ldr	r0, [pc, #44]	@ (8001d44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d16:	490c      	ldr	r1, [pc, #48]	@ (8001d48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d18:	4a0c      	ldr	r2, [pc, #48]	@ (8001d4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d2c:	4c09      	ldr	r4, [pc, #36]	@ (8001d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f008 fe81 	bl	800aa40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d3e:	f7ff fb01 	bl	8001344 <main>
  bx lr
 8001d42:	4770      	bx	lr
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8001d4c:	0800b41c 	.word	0x0800b41c
  ldr r2, =_sbss
 8001d50:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8001d54:	200016c0 	.word	0x200016c0

08001d58 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <CAN1_RX1_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d60:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <HAL_Init+0x28>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a07      	ldr	r2, [pc, #28]	@ (8001d84 <HAL_Init+0x28>)
 8001d66:	f043 0310 	orr.w	r3, r3, #16
 8001d6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f000 fd45 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d72:	200f      	movs	r0, #15
 8001d74:	f000 f808 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d78:	f7ff fdb6 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_InitTick+0x54>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_InitTick+0x58>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fd5d 	bl	8002866 <HAL_SYSTICK_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00e      	b.n	8001dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d80a      	bhi.n	8001dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f000 fd25 	bl	8002812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	@ (8001de4 <HAL_InitTick+0x5c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000084 	.word	0x20000084
 8001de0:	2000008c 	.word	0x2000008c
 8001de4:	20000088 	.word	0x20000088

08001de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_IncTick+0x1c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_IncTick+0x20>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	4a03      	ldr	r2, [pc, #12]	@ (8001e08 <HAL_IncTick+0x20>)
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	2000008c 	.word	0x2000008c
 8001e08:	200003b4 	.word	0x200003b4

08001e0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b02      	ldr	r3, [pc, #8]	@ (8001e1c <HAL_GetTick+0x10>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	200003b4 	.word	0x200003b4

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff fff0 	bl	8001e0c <HAL_GetTick>
 8001e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d005      	beq.n	8001e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_Delay+0x44>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e46:	bf00      	nop
 8001e48:	f7ff ffe0 	bl	8001e0c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d8f7      	bhi.n	8001e48 <HAL_Delay+0x28>
  {
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000008c 	.word	0x2000008c

08001e68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0be      	b.n	8002008 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fd50 	bl	800194c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fb8f 	bl	80025d0 <ADC_ConversionStop_Disable>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 8099 	bne.w	8001ff6 <HAL_ADC_Init+0x18e>
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 8095 	bne.w	8001ff6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ed4:	f023 0302 	bic.w	r3, r3, #2
 8001ed8:	f043 0202 	orr.w	r2, r3, #2
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ee8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7b1b      	ldrb	r3, [r3, #12]
 8001eee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ef0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f00:	d003      	beq.n	8001f0a <HAL_ADC_Init+0xa2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_ADC_Init+0xa8>
 8001f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f0e:	e000      	b.n	8001f12 <HAL_ADC_Init+0xaa>
 8001f10:	2300      	movs	r3, #0
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7d1b      	ldrb	r3, [r3, #20]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d119      	bne.n	8001f54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7b1b      	ldrb	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	035a      	lsls	r2, r3, #13
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	e00b      	b.n	8001f54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	f043 0220 	orr.w	r2, r3, #32
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <HAL_ADC_Init+0x1a8>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f84:	d003      	beq.n	8001f8e <HAL_ADC_Init+0x126>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d104      	bne.n	8001f98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	051b      	lsls	r3, r3, #20
 8001f96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <HAL_ADC_Init+0x1ac>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d10b      	bne.n	8001fd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fd2:	e018      	b.n	8002006 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	f023 0312 	bic.w	r3, r3, #18
 8001fdc:	f043 0210 	orr.w	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ff4:	e007      	b.n	8002006 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002006:	7dfb      	ldrb	r3, [r7, #23]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	ffe1f7fd 	.word	0xffe1f7fd
 8002014:	ff1f0efe 	.word	0xff1f0efe

08002018 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_ADC_Start_IT+0x1a>
 800202e:	2302      	movs	r3, #2
 8002030:	e0a0      	b.n	8002174 <HAL_ADC_Start_IT+0x15c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa6e 	bl	800251c <ADC_Enable>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 808f 	bne.w	800216a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002050:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a45      	ldr	r2, [pc, #276]	@ (800217c <HAL_ADC_Start_IT+0x164>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d105      	bne.n	8002076 <HAL_ADC_Start_IT+0x5e>
 800206a:	4b45      	ldr	r3, [pc, #276]	@ (8002180 <HAL_ADC_Start_IT+0x168>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208c:	2b00      	cmp	r3, #0
 800208e:	d026      	beq.n	80020de <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002098:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a0:	e01d      	b.n	80020de <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a33      	ldr	r2, [pc, #204]	@ (8002180 <HAL_ADC_Start_IT+0x168>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d004      	beq.n	80020c2 <HAL_ADC_Start_IT+0xaa>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a2f      	ldr	r2, [pc, #188]	@ (800217c <HAL_ADC_Start_IT+0x164>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10d      	bne.n	80020de <HAL_ADC_Start_IT+0xc6>
 80020c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002180 <HAL_ADC_Start_IT+0x168>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	f023 0206 	bic.w	r2, r3, #6
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020f6:	e002      	b.n	80020fe <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f06f 0202 	mvn.w	r2, #2
 800210e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800212a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800212e:	d113      	bne.n	8002158 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002134:	4a11      	ldr	r2, [pc, #68]	@ (800217c <HAL_ADC_Start_IT+0x164>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d105      	bne.n	8002146 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800213a:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <HAL_ADC_Start_IT+0x168>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d108      	bne.n	8002158 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	e00c      	b.n	8002172 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e003      	b.n	8002172 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40012800 	.word	0x40012800
 8002180:	40012400 	.word	0x40012400

08002184 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03e      	beq.n	800223c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d039      	beq.n	800223c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021ee:	d11d      	bne.n	800222c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d119      	bne.n	800222c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0220 	bic.w	r2, r2, #32
 8002206:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7fe ff0b 	bl	8001048 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f06f 0212 	mvn.w	r2, #18
 800223a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002242:	2b00      	cmp	r3, #0
 8002244:	d04d      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d048      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002272:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002276:	d012      	beq.n	800229e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002282:	2b00      	cmp	r3, #0
 8002284:	d125      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002290:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002294:	d11d      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d119      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022ac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f9bd 	bl	8002652 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 020c 	mvn.w	r2, #12
 80022e0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d012      	beq.n	8002312 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f809 	bl	800231a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0201 	mvn.w	r2, #1
 8002310:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x20>
 8002348:	2302      	movs	r3, #2
 800234a:	e0dc      	b.n	8002506 <HAL_ADC_ConfigChannel+0x1da>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b06      	cmp	r3, #6
 800235a:	d81c      	bhi.n	8002396 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b05      	subs	r3, #5
 800236e:	221f      	movs	r2, #31
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	4019      	ands	r1, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	3b05      	subs	r3, #5
 8002388:	fa00 f203 	lsl.w	r2, r0, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	635a      	str	r2, [r3, #52]	@ 0x34
 8002394:	e03c      	b.n	8002410 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d81c      	bhi.n	80023d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b23      	subs	r3, #35	@ 0x23
 80023b0:	221f      	movs	r2, #31
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	4019      	ands	r1, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3b23      	subs	r3, #35	@ 0x23
 80023ca:	fa00 f203 	lsl.w	r2, r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80023d6:	e01b      	b.n	8002410 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3b41      	subs	r3, #65	@ 0x41
 80023ea:	221f      	movs	r2, #31
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4019      	ands	r1, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	3b41      	subs	r3, #65	@ 0x41
 8002404:	fa00 f203 	lsl.w	r2, r0, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b09      	cmp	r3, #9
 8002416:	d91c      	bls.n	8002452 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68d9      	ldr	r1, [r3, #12]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	3b1e      	subs	r3, #30
 800242a:	2207      	movs	r2, #7
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	4019      	ands	r1, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6898      	ldr	r0, [r3, #8]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	3b1e      	subs	r3, #30
 8002444:	fa00 f203 	lsl.w	r2, r0, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	e019      	b.n	8002486 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6919      	ldr	r1, [r3, #16]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	2207      	movs	r2, #7
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	4019      	ands	r1, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6898      	ldr	r0, [r3, #8]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	fa00 f203 	lsl.w	r2, r0, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b10      	cmp	r3, #16
 800248c:	d003      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002492:	2b11      	cmp	r3, #17
 8002494:	d132      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <HAL_ADC_ConfigChannel+0x1e4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d125      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d126      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80024bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d11a      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024c6:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_ADC_ConfigChannel+0x1e8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <HAL_ADC_ConfigChannel+0x1ec>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	0c9a      	lsrs	r2, r3, #18
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024dc:	e002      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f9      	bne.n	80024de <HAL_ADC_ConfigChannel+0x1b2>
 80024ea:	e007      	b.n	80024fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	40012400 	.word	0x40012400
 8002514:	20000084 	.word	0x20000084
 8002518:	431bde83 	.word	0x431bde83

0800251c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d040      	beq.n	80025bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800254a:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <ADC_Enable+0xac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1f      	ldr	r2, [pc, #124]	@ (80025cc <ADC_Enable+0xb0>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	0c9b      	lsrs	r3, r3, #18
 8002556:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002558:	e002      	b.n	8002560 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3b01      	subs	r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f9      	bne.n	800255a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002566:	f7ff fc51 	bl	8001e0c <HAL_GetTick>
 800256a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800256c:	e01f      	b.n	80025ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800256e:	f7ff fc4d 	bl	8001e0c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d918      	bls.n	80025ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d011      	beq.n	80025ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e007      	b.n	80025be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d1d8      	bne.n	800256e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000084 	.word	0x20000084
 80025cc:	431bde83 	.word	0x431bde83

080025d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d12e      	bne.n	8002648 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025fa:	f7ff fc07 	bl	8001e0c <HAL_GetTick>
 80025fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002600:	e01b      	b.n	800263a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002602:	f7ff fc03 	bl	8001e0c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d914      	bls.n	800263a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d10d      	bne.n	800263a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e007      	b.n	800264a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d0dc      	beq.n	8002602 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4906      	ldr	r1, [pc, #24]	@ (80026fc <__NVIC_EnableIRQ+0x34>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	@ (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	@ (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c8:	d301      	bcc.n	80027ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <SysTick_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d6:	210f      	movs	r1, #15
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f7ff ff90 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <SysTick_Config+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e6:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <SysTick_Config+0x40>)
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff2d 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002824:	f7ff ff42 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7ff ff90 	bl	8002754 <NVIC_EncodePriority>
 8002834:	4602      	mov	r2, r0
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff5f 	bl	8002700 <__NVIC_SetPriority>
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff35 	bl	80026c8 <__NVIC_EnableIRQ>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffa2 	bl	80027b8 <SysTick_Config>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b08b      	sub	sp, #44	@ 0x2c
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002892:	e169      	b.n	8002b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002894:	2201      	movs	r2, #1
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 8158 	bne.w	8002b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a9a      	ldr	r2, [pc, #616]	@ (8002b20 <HAL_GPIO_Init+0x2a0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d05e      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028bc:	4a98      	ldr	r2, [pc, #608]	@ (8002b20 <HAL_GPIO_Init+0x2a0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d875      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028c2:	4a98      	ldr	r2, [pc, #608]	@ (8002b24 <HAL_GPIO_Init+0x2a4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d058      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028c8:	4a96      	ldr	r2, [pc, #600]	@ (8002b24 <HAL_GPIO_Init+0x2a4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d86f      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028ce:	4a96      	ldr	r2, [pc, #600]	@ (8002b28 <HAL_GPIO_Init+0x2a8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d052      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028d4:	4a94      	ldr	r2, [pc, #592]	@ (8002b28 <HAL_GPIO_Init+0x2a8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d869      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028da:	4a94      	ldr	r2, [pc, #592]	@ (8002b2c <HAL_GPIO_Init+0x2ac>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d04c      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028e0:	4a92      	ldr	r2, [pc, #584]	@ (8002b2c <HAL_GPIO_Init+0x2ac>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d863      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028e6:	4a92      	ldr	r2, [pc, #584]	@ (8002b30 <HAL_GPIO_Init+0x2b0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d046      	beq.n	800297a <HAL_GPIO_Init+0xfa>
 80028ec:	4a90      	ldr	r2, [pc, #576]	@ (8002b30 <HAL_GPIO_Init+0x2b0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d85d      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028f2:	2b12      	cmp	r3, #18
 80028f4:	d82a      	bhi.n	800294c <HAL_GPIO_Init+0xcc>
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	d859      	bhi.n	80029ae <HAL_GPIO_Init+0x12e>
 80028fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <HAL_GPIO_Init+0x80>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	0800297b 	.word	0x0800297b
 8002904:	08002955 	.word	0x08002955
 8002908:	08002967 	.word	0x08002967
 800290c:	080029a9 	.word	0x080029a9
 8002910:	080029af 	.word	0x080029af
 8002914:	080029af 	.word	0x080029af
 8002918:	080029af 	.word	0x080029af
 800291c:	080029af 	.word	0x080029af
 8002920:	080029af 	.word	0x080029af
 8002924:	080029af 	.word	0x080029af
 8002928:	080029af 	.word	0x080029af
 800292c:	080029af 	.word	0x080029af
 8002930:	080029af 	.word	0x080029af
 8002934:	080029af 	.word	0x080029af
 8002938:	080029af 	.word	0x080029af
 800293c:	080029af 	.word	0x080029af
 8002940:	080029af 	.word	0x080029af
 8002944:	0800295d 	.word	0x0800295d
 8002948:	08002971 	.word	0x08002971
 800294c:	4a79      	ldr	r2, [pc, #484]	@ (8002b34 <HAL_GPIO_Init+0x2b4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002952:	e02c      	b.n	80029ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	623b      	str	r3, [r7, #32]
          break;
 800295a:	e029      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	3304      	adds	r3, #4
 8002962:	623b      	str	r3, [r7, #32]
          break;
 8002964:	e024      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	3308      	adds	r3, #8
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e01f      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	330c      	adds	r3, #12
 8002976:	623b      	str	r3, [r7, #32]
          break;
 8002978:	e01a      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002982:	2304      	movs	r3, #4
 8002984:	623b      	str	r3, [r7, #32]
          break;
 8002986:	e013      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002990:	2308      	movs	r3, #8
 8002992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	611a      	str	r2, [r3, #16]
          break;
 800299a:	e009      	b.n	80029b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800299c:	2308      	movs	r3, #8
 800299e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	615a      	str	r2, [r3, #20]
          break;
 80029a6:	e003      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
          break;
 80029ac:	e000      	b.n	80029b0 <HAL_GPIO_Init+0x130>
          break;
 80029ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2bff      	cmp	r3, #255	@ 0xff
 80029b4:	d801      	bhi.n	80029ba <HAL_GPIO_Init+0x13a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	e001      	b.n	80029be <HAL_GPIO_Init+0x13e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2bff      	cmp	r3, #255	@ 0xff
 80029c4:	d802      	bhi.n	80029cc <HAL_GPIO_Init+0x14c>
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	e002      	b.n	80029d2 <HAL_GPIO_Init+0x152>
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	3b08      	subs	r3, #8
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	210f      	movs	r1, #15
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	401a      	ands	r2, r3
 80029e4:	6a39      	ldr	r1, [r7, #32]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	431a      	orrs	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80b1 	beq.w	8002b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a00:	4b4d      	ldr	r3, [pc, #308]	@ (8002b38 <HAL_GPIO_Init+0x2b8>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a4c      	ldr	r2, [pc, #304]	@ (8002b38 <HAL_GPIO_Init+0x2b8>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b38 <HAL_GPIO_Init+0x2b8>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a18:	4a48      	ldr	r2, [pc, #288]	@ (8002b3c <HAL_GPIO_Init+0x2bc>)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	220f      	movs	r2, #15
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a40      	ldr	r2, [pc, #256]	@ (8002b40 <HAL_GPIO_Init+0x2c0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3f      	ldr	r2, [pc, #252]	@ (8002b44 <HAL_GPIO_Init+0x2c4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00d      	beq.n	8002a68 <HAL_GPIO_Init+0x1e8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b48 <HAL_GPIO_Init+0x2c8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d007      	beq.n	8002a64 <HAL_GPIO_Init+0x1e4>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3d      	ldr	r2, [pc, #244]	@ (8002b4c <HAL_GPIO_Init+0x2cc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_GPIO_Init+0x1e0>
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e006      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e004      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e002      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a70:	f002 0203 	and.w	r2, r2, #3
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	4093      	lsls	r3, r2
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a7e:	492f      	ldr	r1, [pc, #188]	@ (8002b3c <HAL_GPIO_Init+0x2bc>)
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a98:	4b2d      	ldr	r3, [pc, #180]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	492c      	ldr	r1, [pc, #176]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4928      	ldr	r1, [pc, #160]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ac0:	4b23      	ldr	r3, [pc, #140]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	4922      	ldr	r1, [pc, #136]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60cb      	str	r3, [r1, #12]
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ace:	4b20      	ldr	r3, [pc, #128]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	491e      	ldr	r1, [pc, #120]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4918      	ldr	r1, [pc, #96]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4914      	ldr	r1, [pc, #80]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d021      	beq.n	8002b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	490e      	ldr	r1, [pc, #56]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e021      	b.n	8002b62 <HAL_GPIO_Init+0x2e2>
 8002b1e:	bf00      	nop
 8002b20:	10320000 	.word	0x10320000
 8002b24:	10310000 	.word	0x10310000
 8002b28:	10220000 	.word	0x10220000
 8002b2c:	10210000 	.word	0x10210000
 8002b30:	10120000 	.word	0x10120000
 8002b34:	10110000 	.word	0x10110000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40010800 	.word	0x40010800
 8002b44:	40010c00 	.word	0x40010c00
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_GPIO_Init+0x304>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	4909      	ldr	r1, [pc, #36]	@ (8002b84 <HAL_GPIO_Init+0x304>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f47f ae8e 	bne.w	8002894 <HAL_GPIO_Init+0x14>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	372c      	adds	r7, #44	@ 0x2c
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	40010400 	.word	0x40010400

08002b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
 8002b94:	4613      	mov	r3, r2
 8002b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ba4:	e003      	b.n	8002bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	041a      	lsls	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43d9      	mvns	r1, r3
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	400b      	ands	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	611a      	str	r2, [r3, #16]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0e8      	b.n	8002dce <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f007 fc3d 	bl	800a490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2203      	movs	r2, #3
 8002c1a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 fb61 	bl	80062f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c38:	f003 fb37 	bl	80062aa <USB_CoreInit>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0bf      	b.n	8002dce <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fb65 	bl	8006324 <USB_SetCurrentMode>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0b0      	b.n	8002dce <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e03e      	b.n	8002cf0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	3311      	adds	r3, #17
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	3310      	adds	r3, #16
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3313      	adds	r3, #19
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3320      	adds	r3, #32
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	3324      	adds	r3, #36	@ 0x24
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	3301      	adds	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	791b      	ldrb	r3, [r3, #4]
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d3bb      	bcc.n	8002c72 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	e044      	b.n	8002d8a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	3301      	adds	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	791b      	ldrb	r3, [r3, #4]
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d3b5      	bcc.n	8002d00 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d9e:	f003 facd 	bl	800633c <USB_DevInit>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e00c      	b.n	8002dce <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f005 fd4d 	bl	8008866 <USB_DevDisconnect>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_PCD_Start+0x16>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e016      	b.n	8002e1a <HAL_PCD_Start+0x44>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fa63 	bl	80062c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002dfe:	2101      	movs	r1, #1
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f007 fdb8 	bl	800a976 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f005 fd21 	bl	8008852 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b088      	sub	sp, #32
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f005 fd23 	bl	800887a <USB_ReadInterrupts>
 8002e34:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fb1a 	bl	800347a <PCD_EP_ISR_Handler>

    return;
 8002e46:	e119      	b.n	800307c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d013      	beq.n	8002e7a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e64:	b292      	uxth	r2, r2
 8002e66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f007 fb8b 	bl	800a586 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e70:	2100      	movs	r1, #0
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f905 	bl	8003082 <HAL_PCD_SetAddress>

    return;
 8002e78:	e100      	b.n	800307c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00c      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e96:	b292      	uxth	r2, r2
 8002e98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e9c:	e0ee      	b.n	800307c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ec0:	e0dc      	b.n	800307c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d027      	beq.n	8002f1c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0204 	bic.w	r2, r2, #4
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0208 	bic.w	r2, r2, #8
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f007 fb7b 	bl	800a5f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f14:	b292      	uxth	r2, r2
 8002f16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f1a:	e0af      	b.n	800307c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8083 	beq.w	800302e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e010      	b.n	8002f50 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	7ffb      	ldrb	r3, [r7, #31]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	441a      	add	r2, r3
 8002f3a:	7ffb      	ldrb	r3, [r7, #31]
 8002f3c:	8812      	ldrh	r2, [r2, #0]
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	3320      	adds	r3, #32
 8002f44:	443b      	add	r3, r7
 8002f46:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002f4a:	7ffb      	ldrb	r3, [r7, #31]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	7ffb      	ldrb	r3, [r7, #31]
 8002f52:	2b07      	cmp	r3, #7
 8002f54:	d9eb      	bls.n	8002f2e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	b292      	uxth	r2, r2
 8002f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	b292      	uxth	r2, r2
 8002f82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f86:	bf00      	nop
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f6      	beq.n	8002f88 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fac:	b292      	uxth	r2, r2
 8002fae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e00f      	b.n	8002fd8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002fb8:	7ffb      	ldrb	r3, [r7, #31]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	7ffa      	ldrb	r2, [r7, #31]
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	440a      	add	r2, r1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	3320      	adds	r3, #32
 8002fca:	443b      	add	r3, r7
 8002fcc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002fd0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	7ffb      	ldrb	r3, [r7, #31]
 8002fda:	2b07      	cmp	r3, #7
 8002fdc:	d9ec      	bls.n	8002fb8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0208 	orr.w	r2, r2, #8
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003008:	b292      	uxth	r2, r2
 800300a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003016:	b29a      	uxth	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0204 	orr.w	r2, r2, #4
 8003020:	b292      	uxth	r2, r2
 8003022:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f007 facc 	bl	800a5c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800302c:	e026      	b.n	800307c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00f      	beq.n	8003058 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003040:	b29a      	uxth	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800304a:	b292      	uxth	r2, r2
 800304c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f007 fa8a 	bl	800a56a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003056:	e011      	b.n	800307c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00c      	beq.n	800307c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003074:	b292      	uxth	r2, r2
 8003076:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800307a:	bf00      	nop
  }
}
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_PCD_SetAddress+0x1a>
 8003098:	2302      	movs	r3, #2
 800309a:	e012      	b.n	80030c2 <HAL_PCD_SetAddress+0x40>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f005 fbba 	bl	800882c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	4608      	mov	r0, r1
 80030d4:	4611      	mov	r1, r2
 80030d6:	461a      	mov	r2, r3
 80030d8:	4603      	mov	r3, r0
 80030da:	70fb      	strb	r3, [r7, #3]
 80030dc:	460b      	mov	r3, r1
 80030de:	803b      	strh	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da0e      	bge.n	800310e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 0207 	and.w	r2, r3, #7
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	3310      	adds	r3, #16
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	705a      	strb	r2, [r3, #1]
 800310c:	e00e      	b.n	800312c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 0207 	and.w	r2, r3, #7
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003138:	883a      	ldrh	r2, [r7, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	78ba      	ldrb	r2, [r7, #2]
 8003142:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003144:	78bb      	ldrb	r3, [r7, #2]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d102      	bne.n	8003150 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_PCD_EP_Open+0x94>
 800315a:	2302      	movs	r3, #2
 800315c:	e00e      	b.n	800317c <HAL_PCD_EP_Open+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68f9      	ldr	r1, [r7, #12]
 800316c:	4618      	mov	r0, r3
 800316e:	f003 f903 	bl	8006378 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800317a:	7afb      	ldrb	r3, [r7, #11]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003194:	2b00      	cmp	r3, #0
 8003196:	da0e      	bge.n	80031b6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 0207 	and.w	r2, r3, #7
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	3310      	adds	r3, #16
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	705a      	strb	r2, [r3, #1]
 80031b4:	e00e      	b.n	80031d4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 0207 	and.w	r2, r3, #7
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_PCD_EP_Close+0x6a>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e00e      	b.n	800320c <HAL_PCD_EP_Close+0x88>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68f9      	ldr	r1, [r7, #12]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 fc7b 	bl	8006af8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	460b      	mov	r3, r1
 8003222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003224:	7afb      	ldrb	r3, [r7, #11]
 8003226:	f003 0207 	and.w	r2, r3, #7
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	b2da      	uxtb	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6979      	ldr	r1, [r7, #20]
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fe32 	bl	8006ed0 <USB_EPStartXfer>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0207 	and.w	r2, r3, #7
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003298:	681b      	ldr	r3, [r3, #0]
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	460b      	mov	r3, r1
 80032b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b4:	7afb      	ldrb	r3, [r7, #11]
 80032b6:	f003 0207 	and.w	r2, r3, #7
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	3310      	adds	r3, #16
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2201      	movs	r2, #1
 80032ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f0:	7afb      	ldrb	r3, [r7, #11]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6979      	ldr	r1, [r7, #20]
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fde4 	bl	8006ed0 <USB_EPStartXfer>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	7912      	ldrb	r2, [r2, #4]
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e04c      	b.n	80033ca <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003334:	2b00      	cmp	r3, #0
 8003336:	da0e      	bge.n	8003356 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	f003 0207 	and.w	r2, r3, #7
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	3310      	adds	r3, #16
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	705a      	strb	r2, [r3, #1]
 8003354:	e00c      	b.n	8003370 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_PCD_EP_SetStall+0x7e>
 800338c:	2302      	movs	r3, #2
 800338e:	e01c      	b.n	80033ca <HAL_PCD_EP_SetStall+0xb8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68f9      	ldr	r1, [r7, #12]
 800339e:	4618      	mov	r0, r3
 80033a0:	f005 f947 	bl	8008632 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f005 fa6c 	bl	8008898 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	7912      	ldrb	r2, [r2, #4]
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e040      	b.n	8003472 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da0e      	bge.n	8003416 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 0207 	and.w	r2, r3, #7
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	3310      	adds	r3, #16
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4413      	add	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	705a      	strb	r2, [r3, #1]
 8003414:	e00e      	b.n	8003434 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	f003 0207 	and.w	r2, r3, #7
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_PCD_EP_ClrStall+0x82>
 8003450:	2302      	movs	r3, #2
 8003452:	e00e      	b.n	8003472 <HAL_PCD_EP_ClrStall+0xa0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68f9      	ldr	r1, [r7, #12]
 8003462:	4618      	mov	r0, r3
 8003464:	f005 f935 	bl	80086d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b096      	sub	sp, #88	@ 0x58
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003482:	e3bb      	b.n	8003bfc <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800348c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800349e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8175 	bne.w	8003792 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d14e      	bne.n	8003552 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80034c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c4:	81fb      	strh	r3, [r7, #14]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	89fb      	ldrh	r3, [r7, #14]
 80034cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3310      	adds	r3, #16
 80034dc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	3302      	adds	r3, #2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003508:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800350a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	441a      	add	r2, r3
 8003514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003516:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003518:	2100      	movs	r1, #0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f007 f80b 	bl	800a536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7b5b      	ldrb	r3, [r3, #13]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8368 	beq.w	8003bfc <PCD_EP_ISR_Handler+0x782>
 800352c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 8363 	bne.w	8003bfc <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	7b5b      	ldrb	r3, [r3, #13]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	735a      	strb	r2, [r3, #13]
 8003550:	e354      	b.n	8003bfc <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003558:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003564:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800356c:	2b00      	cmp	r3, #0
 800356e:	d034      	beq.n	80035da <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003578:	b29b      	uxth	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	3306      	adds	r3, #6
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f005 f9c2 	bl	8008938 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035c0:	4013      	ands	r3, r2
 80035c2:	823b      	strh	r3, [r7, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	8a3a      	ldrh	r2, [r7, #16]
 80035ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035ce:	b292      	uxth	r2, r2
 80035d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f006 ff82 	bl	800a4dc <HAL_PCD_SetupStageCallback>
 80035d8:	e310      	b.n	8003bfc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035da:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f280 830c 	bge.w	8003bfc <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035f0:	4013      	ands	r3, r2
 80035f2:	83fb      	strh	r3, [r7, #30]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	8bfa      	ldrh	r2, [r7, #30]
 80035fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035fe:	b292      	uxth	r2, r2
 8003600:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800360a:	b29b      	uxth	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	3306      	adds	r3, #6
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800362e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d019      	beq.n	800366a <PCD_EP_ISR_Handler+0x1f0>
 8003636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d015      	beq.n	800366a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003644:	6959      	ldr	r1, [r3, #20]
 8003646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003648:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800364a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800364c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800364e:	b29b      	uxth	r3, r3
 8003650:	f005 f972 	bl	8008938 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	441a      	add	r2, r3
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003662:	2100      	movs	r1, #0
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f006 ff4b 	bl	800a500 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003674:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800367c:	2b00      	cmp	r3, #0
 800367e:	f040 82bd 	bne.w	8003bfc <PCD_EP_ISR_Handler+0x782>
 8003682:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003686:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800368a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800368e:	f000 82b5 	beq.w	8003bfc <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4413      	add	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036bc:	b29a      	uxth	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	801a      	strh	r2, [r3, #0]
 80036c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80036c8:	d91d      	bls.n	8003706 <PCD_EP_ISR_Handler+0x28c>
 80036ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <PCD_EP_ISR_Handler+0x26a>
 80036de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036e0:	3b01      	subs	r3, #1
 80036e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036fe:	b29a      	uxth	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	e026      	b.n	8003754 <PCD_EP_ISR_Handler+0x2da>
 8003706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <PCD_EP_ISR_Handler+0x2aa>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800371c:	b29a      	uxth	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e017      	b.n	8003754 <PCD_EP_ISR_Handler+0x2da>
 8003724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	647b      	str	r3, [r7, #68]	@ 0x44
 800372c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <PCD_EP_ISR_Handler+0x2c4>
 8003738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800373a:	3301      	adds	r3, #1
 800373c:	647b      	str	r3, [r7, #68]	@ 0x44
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29a      	uxth	r2, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003746:	b29b      	uxth	r3, r3
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	b29b      	uxth	r3, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	b29a      	uxth	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003764:	827b      	strh	r3, [r7, #18]
 8003766:	8a7b      	ldrh	r3, [r7, #18]
 8003768:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800376c:	827b      	strh	r3, [r7, #18]
 800376e:	8a7b      	ldrh	r3, [r7, #18]
 8003770:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003774:	827b      	strh	r3, [r7, #18]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	8a7b      	ldrh	r3, [r7, #18]
 800377c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800378c:	b29b      	uxth	r3, r3
 800378e:	8013      	strh	r3, [r2, #0]
 8003790:	e234      	b.n	8003bfc <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f280 80fc 	bge.w	80039a8 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80037c6:	4013      	ands	r3, r2
 80037c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80037de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037e2:	b292      	uxth	r2, r2
 80037e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037e6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fe:	7b1b      	ldrb	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d125      	bne.n	8003850 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800380c:	b29b      	uxth	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	3306      	adds	r3, #6
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003830:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8092 	beq.w	800395e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	6959      	ldr	r1, [r3, #20]
 8003842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003844:	88da      	ldrh	r2, [r3, #6]
 8003846:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800384a:	f005 f875 	bl	8008938 <USB_ReadPMA>
 800384e:	e086      	b.n	800395e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003852:	78db      	ldrb	r3, [r3, #3]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d10a      	bne.n	800386e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003858:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800385c:	461a      	mov	r2, r3
 800385e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f9d9 	bl	8003c18 <HAL_PCD_EP_DB_Receive>
 8003866:	4603      	mov	r3, r0
 8003868:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800386c:	e077      	b.n	800395e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003888:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	441a      	add	r2, r3
 800389a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800389e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d024      	beq.n	8003916 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	3302      	adds	r3, #2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80038f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02e      	beq.n	800395e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003906:	6959      	ldr	r1, [r3, #20]
 8003908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390a:	891a      	ldrh	r2, [r3, #8]
 800390c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003910:	f005 f812 	bl	8008938 <USB_ReadPMA>
 8003914:	e023      	b.n	800395e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800391e:	b29b      	uxth	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	3306      	adds	r3, #6
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800393e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003942:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003950:	6959      	ldr	r1, [r3, #20]
 8003952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003954:	895a      	ldrh	r2, [r3, #10]
 8003956:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800395a:	f004 ffed 	bl	8008938 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800395e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003966:	441a      	add	r2, r3
 8003968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800396c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003974:	441a      	add	r2, r3
 8003976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003978:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800397a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <PCD_EP_ISR_Handler+0x514>
 8003982:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	429a      	cmp	r2, r3
 800398c:	d206      	bcs.n	800399c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800398e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f006 fdb3 	bl	800a500 <HAL_PCD_DataOutStageCallback>
 800399a:	e005      	b.n	80039a8 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039a2:	4618      	mov	r0, r3
 80039a4:	f003 fa94 	bl	8006ed0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80039a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8123 	beq.w	8003bfc <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80039b6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	3310      	adds	r3, #16
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80039e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80039fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a08:	78db      	ldrb	r3, [r3, #3]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	f040 80a2 	bne.w	8003b54 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a12:	2200      	movs	r2, #0
 8003a14:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a18:	7b1b      	ldrb	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8093 	beq.w	8003b46 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d046      	beq.n	8003aba <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2e:	785b      	ldrb	r3, [r3, #1]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d126      	bne.n	8003a82 <PCD_EP_ISR_Handler+0x608>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	4413      	add	r3, r2
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	011a      	lsls	r2, r3, #4
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	4413      	add	r3, r2
 8003a56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a5a:	623b      	str	r3, [r7, #32]
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	801a      	strh	r2, [r3, #0]
 8003a80:	e061      	b.n	8003b46 <PCD_EP_ISR_Handler+0x6cc>
 8003a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a84:	785b      	ldrb	r3, [r3, #1]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d15d      	bne.n	8003b46 <PCD_EP_ISR_Handler+0x6cc>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9e:	4413      	add	r3, r2
 8003aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	011a      	lsls	r2, r3, #4
 8003aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aaa:	4413      	add	r3, r2
 8003aac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	801a      	strh	r2, [r3, #0]
 8003ab8:	e045      	b.n	8003b46 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d126      	bne.n	8003b16 <PCD_EP_ISR_Handler+0x69c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003adc:	4413      	add	r3, r2
 8003ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	011a      	lsls	r2, r3, #4
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae8:	4413      	add	r3, r2
 8003aea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	801a      	strh	r2, [r3, #0]
 8003b14:	e017      	b.n	8003b46 <PCD_EP_ISR_Handler+0x6cc>
 8003b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d113      	bne.n	8003b46 <PCD_EP_ISR_Handler+0x6cc>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2c:	4413      	add	r3, r2
 8003b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	011a      	lsls	r2, r3, #4
 8003b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b38:	4413      	add	r3, r2
 8003b3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b42:	2200      	movs	r2, #0
 8003b44:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f006 fcf2 	bl	800a536 <HAL_PCD_DataInStageCallback>
 8003b52:	e053      	b.n	8003bfc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003b54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d146      	bne.n	8003bee <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	3302      	adds	r3, #2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b88:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d907      	bls.n	8003ba8 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	699a      	ldr	r2, [r3, #24]
 8003b9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ba0:	1ad2      	subs	r2, r2, r3
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba4:	619a      	str	r2, [r3, #24]
 8003ba6:	e002      	b.n	8003bae <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003baa:	2200      	movs	r2, #0
 8003bac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f006 fcba 	bl	800a536 <HAL_PCD_DataInStageCallback>
 8003bc2:	e01b      	b.n	8003bfc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003bcc:	441a      	add	r2, r3
 8003bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003bda:	441a      	add	r2, r3
 8003bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bde:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 f972 	bl	8006ed0 <USB_EPStartXfer>
 8003bec:	e006      	b.n	8003bfc <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003bee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f91b 	bl	8003e32 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f6ff ac3b 	blt.w	8003484 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3758      	adds	r7, #88	@ 0x58
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d07e      	beq.n	8003d2e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	3302      	adds	r3, #2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c58:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	8b7b      	ldrh	r3, [r7, #26]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d306      	bcc.n	8003c72 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	8b7b      	ldrh	r3, [r7, #26]
 8003c6a:	1ad2      	subs	r2, r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	619a      	str	r2, [r3, #24]
 8003c70:	e002      	b.n	8003c78 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d123      	bne.n	8003cc8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9a:	833b      	strh	r3, [r7, #24]
 8003c9c:	8b3b      	ldrh	r3, [r7, #24]
 8003c9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ca2:	833b      	strh	r3, [r7, #24]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	441a      	add	r2, r3
 8003cb2:	8b3b      	ldrh	r3, [r7, #24]
 8003cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01f      	beq.n	8003d12 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cec:	82fb      	strh	r3, [r7, #22]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	441a      	add	r2, r3
 8003cfc:	8afb      	ldrh	r3, [r7, #22]
 8003cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d12:	8b7b      	ldrh	r3, [r7, #26]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8087 	beq.w	8003e28 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6959      	ldr	r1, [r3, #20]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	891a      	ldrh	r2, [r3, #8]
 8003d26:	8b7b      	ldrh	r3, [r7, #26]
 8003d28:	f004 fe06 	bl	8008938 <USB_ReadPMA>
 8003d2c:	e07c      	b.n	8003e28 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	3306      	adds	r3, #6
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d56:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	8b7b      	ldrh	r3, [r7, #26]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d306      	bcc.n	8003d70 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	8b7b      	ldrh	r3, [r7, #26]
 8003d68:	1ad2      	subs	r2, r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	619a      	str	r2, [r3, #24]
 8003d6e:	e002      	b.n	8003d76 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d123      	bne.n	8003dc6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d98:	83fb      	strh	r3, [r7, #30]
 8003d9a:	8bfb      	ldrh	r3, [r7, #30]
 8003d9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003da0:	83fb      	strh	r3, [r7, #30]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	441a      	add	r2, r3
 8003db0:	8bfb      	ldrh	r3, [r7, #30]
 8003db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11f      	bne.n	8003e10 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dea:	83bb      	strh	r3, [r7, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	8bbb      	ldrh	r3, [r7, #28]
 8003dfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e10:	8b7b      	ldrh	r3, [r7, #26]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6959      	ldr	r1, [r3, #20]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	895a      	ldrh	r2, [r3, #10]
 8003e22:	8b7b      	ldrh	r3, [r7, #26]
 8003e24:	f004 fd88 	bl	8008938 <USB_ReadPMA>
    }
  }

  return count;
 8003e28:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b0a4      	sub	sp, #144	@ 0x90
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 81dd 	beq.w	8004206 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	3302      	adds	r3, #2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e74:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d907      	bls.n	8003e94 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e8c:	1ad2      	subs	r2, r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	619a      	str	r2, [r3, #24]
 8003e92:	e002      	b.n	8003e9a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2200      	movs	r2, #0
 8003e98:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 80b9 	bne.w	8004016 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d126      	bne.n	8003efa <HAL_PCD_EP_DB_Transmit+0xc8>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec0:	4413      	add	r3, r2
 8003ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	011a      	lsls	r2, r3, #4
 8003eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	801a      	strh	r2, [r3, #0]
 8003ef8:	e01a      	b.n	8003f30 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	785b      	ldrb	r3, [r3, #1]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d116      	bne.n	8003f30 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f16:	4413      	add	r3, r2
 8003f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	011a      	lsls	r2, r3, #4
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	4413      	add	r3, r2
 8003f24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	785b      	ldrb	r3, [r3, #1]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d126      	bne.n	8003f8c <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	4413      	add	r3, r2
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	011a      	lsls	r2, r3, #4
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	e017      	b.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	785b      	ldrb	r3, [r3, #1]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d113      	bne.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	4413      	add	r3, r2
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	011a      	lsls	r2, r3, #4
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	4413      	add	r3, r2
 8003fb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fb4:	623b      	str	r3, [r7, #32]
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f006 fab7 	bl	800a536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 82fc 	beq.w	80045cc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fee:	82fb      	strh	r3, [r7, #22]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	8afb      	ldrh	r3, [r7, #22]
 8004000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004008:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800400c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004010:	b29b      	uxth	r3, r3
 8004012:	8013      	strh	r3, [r2, #0]
 8004014:	e2da      	b.n	80045cc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d021      	beq.n	8004064 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	441a      	add	r2, r3
 800404c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004058:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800405c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004060:	b29b      	uxth	r3, r3
 8004062:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800406a:	2b01      	cmp	r3, #1
 800406c:	f040 82ae 	bne.w	80045cc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004078:	441a      	add	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004086:	441a      	add	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6a1a      	ldr	r2, [r3, #32]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	429a      	cmp	r2, r3
 8004096:	d30b      	bcc.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6a1a      	ldr	r2, [r3, #32]
 80040a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040a8:	1ad2      	subs	r2, r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	621a      	str	r2, [r3, #32]
 80040ae:	e017      	b.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d108      	bne.n	80040ca <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80040b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80040c8:	e00a      	b.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2200      	movs	r2, #0
 80040de:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d165      	bne.n	80041b4 <HAL_PCD_EP_DB_Transmit+0x382>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040fc:	4413      	add	r3, r2
 80040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	011a      	lsls	r2, r3, #4
 8004106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004108:	4413      	add	r3, r2
 800410a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800410e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800411a:	b29a      	uxth	r2, r3
 800411c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411e:	801a      	strh	r2, [r3, #0]
 8004120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004124:	2b3e      	cmp	r3, #62	@ 0x3e
 8004126:	d91d      	bls.n	8004164 <HAL_PCD_EP_DB_Transmit+0x332>
 8004128:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004130:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <HAL_PCD_EP_DB_Transmit+0x310>
 800413c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800413e:	3b01      	subs	r3, #1
 8004140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29a      	uxth	r2, r3
 8004148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800414a:	b29b      	uxth	r3, r3
 800414c:	029b      	lsls	r3, r3, #10
 800414e:	b29b      	uxth	r3, r3
 8004150:	4313      	orrs	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415c:	b29a      	uxth	r2, r3
 800415e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	e044      	b.n	80041ee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <HAL_PCD_EP_DB_Transmit+0x350>
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417a:	b29a      	uxth	r2, r3
 800417c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417e:	801a      	strh	r2, [r3, #0]
 8004180:	e035      	b.n	80041ee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800418a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_PCD_EP_DB_Transmit+0x36a>
 8004196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004198:	3301      	adds	r3, #1
 800419a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	029b      	lsls	r3, r3, #10
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4313      	orrs	r3, r2
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b0:	801a      	strh	r2, [r3, #0]
 80041b2:	e01c      	b.n	80041ee <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d118      	bne.n	80041ee <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d0:	4413      	add	r3, r2
 80041d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	011a      	lsls	r2, r3, #4
 80041da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041dc:	4413      	add	r3, r2
 80041de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80041e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6959      	ldr	r1, [r3, #20]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	891a      	ldrh	r2, [r3, #8]
 80041fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f004 fb55 	bl	80088ae <USB_WritePMA>
 8004204:	e1e2      	b.n	80045cc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800420e:	b29b      	uxth	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	3306      	adds	r3, #6
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800422e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800423a:	429a      	cmp	r2, r3
 800423c:	d307      	bcc.n	800424e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004246:	1ad2      	subs	r2, r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	619a      	str	r2, [r3, #24]
 800424c:	e002      	b.n	8004254 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2200      	movs	r2, #0
 8004252:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 80c0 	bne.w	80043de <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d126      	bne.n	80042b4 <HAL_PCD_EP_DB_Transmit+0x482>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800427a:	4413      	add	r3, r2
 800427c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	011a      	lsls	r2, r3, #4
 8004284:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004286:	4413      	add	r3, r2
 8004288:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800428c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800428e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004298:	b29a      	uxth	r2, r3
 800429a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	e01a      	b.n	80042ea <HAL_PCD_EP_DB_Transmit+0x4b8>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d116      	bne.n	80042ea <HAL_PCD_EP_DB_Transmit+0x4b8>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042d0:	4413      	add	r3, r2
 80042d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	011a      	lsls	r2, r3, #4
 80042da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042dc:	4413      	add	r3, r2
 80042de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80042e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042e6:	2200      	movs	r2, #0
 80042e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d12b      	bne.n	8004350 <HAL_PCD_EP_DB_Transmit+0x51e>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004306:	b29b      	uxth	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800430c:	4413      	add	r3, r2
 800430e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	011a      	lsls	r2, r3, #4
 8004316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004318:	4413      	add	r3, r2
 800431a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800431e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004322:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800432e:	b29a      	uxth	r2, r3
 8004330:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004346:	b29a      	uxth	r2, r3
 8004348:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e017      	b.n	8004380 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d113      	bne.n	8004380 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004360:	b29b      	uxth	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004366:	4413      	add	r3, r2
 8004368:	677b      	str	r3, [r7, #116]	@ 0x74
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	011a      	lsls	r2, r3, #4
 8004370:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004372:	4413      	add	r3, r2
 8004374:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004378:	673b      	str	r3, [r7, #112]	@ 0x70
 800437a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800437c:	2200      	movs	r2, #0
 800437e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	4619      	mov	r1, r3
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f006 f8d5 	bl	800a536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 811a 	bne.w	80045cc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80043c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d8:	b29b      	uxth	r3, r3
 80043da:	8013      	strh	r3, [r2, #0]
 80043dc:	e0f6      	b.n	80045cc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d121      	bne.n	800442c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004402:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	441a      	add	r2, r3
 8004414:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800441c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004420:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004428:	b29b      	uxth	r3, r3
 800442a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004432:	2b01      	cmp	r3, #1
 8004434:	f040 80ca 	bne.w	80045cc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004440:	441a      	add	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800444e:	441a      	add	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6a1a      	ldr	r2, [r3, #32]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	429a      	cmp	r2, r3
 800445e:	d30b      	bcc.n	8004478 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	6a1a      	ldr	r2, [r3, #32]
 800446c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004470:	1ad2      	subs	r2, r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	621a      	str	r2, [r3, #32]
 8004476:	e017      	b.n	80044a8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d108      	bne.n	8004492 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004480:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004484:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004490:	e00a      	b.n	80044a8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2200      	movs	r2, #0
 800449e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d165      	bne.n	8004582 <HAL_PCD_EP_DB_Transmit+0x750>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044ca:	4413      	add	r3, r2
 80044cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	011a      	lsls	r2, r3, #4
 80044d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d6:	4413      	add	r3, r2
 80044d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80044f4:	d91d      	bls.n	8004532 <HAL_PCD_EP_DB_Transmit+0x700>
 80044f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_PCD_EP_DB_Transmit+0x6de>
 800450a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800450c:	3b01      	subs	r3, #1
 800450e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29a      	uxth	r2, r3
 8004516:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004518:	b29b      	uxth	r3, r3
 800451a:	029b      	lsls	r3, r3, #10
 800451c:	b29b      	uxth	r3, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	b29b      	uxth	r3, r3
 8004522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800452a:	b29a      	uxth	r2, r3
 800452c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800452e:	801a      	strh	r2, [r3, #0]
 8004530:	e041      	b.n	80045b6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <HAL_PCD_EP_DB_Transmit+0x71e>
 800453a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004548:	b29a      	uxth	r2, r3
 800454a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	e032      	b.n	80045b6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004550:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_PCD_EP_DB_Transmit+0x738>
 8004564:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004566:	3301      	adds	r3, #1
 8004568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800456a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29a      	uxth	r2, r3
 8004570:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004572:	b29b      	uxth	r3, r3
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	b29b      	uxth	r3, r3
 8004578:	4313      	orrs	r3, r2
 800457a:	b29a      	uxth	r2, r3
 800457c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	e019      	b.n	80045b6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d115      	bne.n	80045b6 <HAL_PCD_EP_DB_Transmit+0x784>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004598:	4413      	add	r3, r2
 800459a:	657b      	str	r3, [r7, #84]	@ 0x54
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	011a      	lsls	r2, r3, #4
 80045a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6959      	ldr	r1, [r3, #20]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	895a      	ldrh	r2, [r3, #10]
 80045c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f004 f971 	bl	80088ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e6:	82bb      	strh	r3, [r7, #20]
 80045e8:	8abb      	ldrh	r3, [r7, #20]
 80045ea:	f083 0310 	eor.w	r3, r3, #16
 80045ee:	82bb      	strh	r3, [r7, #20]
 80045f0:	8abb      	ldrh	r3, [r7, #20]
 80045f2:	f083 0320 	eor.w	r3, r3, #32
 80045f6:	82bb      	strh	r3, [r7, #20]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	8abb      	ldrh	r3, [r7, #20]
 8004608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800460c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004618:	b29b      	uxth	r3, r3
 800461a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3790      	adds	r7, #144	@ 0x90
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004626:	b480      	push	{r7}
 8004628:	b087      	sub	sp, #28
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	817b      	strh	r3, [r7, #10]
 8004634:	4613      	mov	r3, r2
 8004636:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004638:	897b      	ldrh	r3, [r7, #10]
 800463a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00b      	beq.n	800465c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004644:	897b      	ldrh	r3, [r7, #10]
 8004646:	f003 0207 	and.w	r2, r3, #7
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	3310      	adds	r3, #16
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e009      	b.n	8004670 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800465c:	897a      	ldrh	r2, [r7, #10]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004670:	893b      	ldrh	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	b29a      	uxth	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	80da      	strh	r2, [r3, #6]
 8004684:	e00b      	b.n	800469e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2201      	movs	r2, #1
 800468a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	b29a      	uxth	r2, r3
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	b29a      	uxth	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e272      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8087 	beq.w	80047da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046cc:	4b92      	ldr	r3, [pc, #584]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d00c      	beq.n	80046f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d112      	bne.n	800470a <HAL_RCC_OscConfig+0x5e>
 80046e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f0:	d10b      	bne.n	800470a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f2:	4b89      	ldr	r3, [pc, #548]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d06c      	beq.n	80047d8 <HAL_RCC_OscConfig+0x12c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d168      	bne.n	80047d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e24c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x76>
 8004714:	4b80      	ldr	r3, [pc, #512]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a7f      	ldr	r2, [pc, #508]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800471a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	e02e      	b.n	8004780 <HAL_RCC_OscConfig+0xd4>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0x98>
 800472a:	4b7b      	ldr	r3, [pc, #492]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a7a      	ldr	r2, [pc, #488]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	4b78      	ldr	r3, [pc, #480]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a77      	ldr	r2, [pc, #476]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800473c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e01d      	b.n	8004780 <HAL_RCC_OscConfig+0xd4>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0xbc>
 800474e:	4b72      	ldr	r3, [pc, #456]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a71      	ldr	r2, [pc, #452]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b6f      	ldr	r3, [pc, #444]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a6e      	ldr	r2, [pc, #440]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0xd4>
 8004768:	4b6b      	ldr	r3, [pc, #428]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a6a      	ldr	r2, [pc, #424]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800476e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	4b68      	ldr	r3, [pc, #416]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a67      	ldr	r2, [pc, #412]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800477a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800477e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d013      	beq.n	80047b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fd fb40 	bl	8001e0c <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7fd fb3c 	bl	8001e0c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	@ 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e200      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0xe4>
 80047ae:	e014      	b.n	80047da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fd fb2c 	bl	8001e0c <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fd fb28 	bl	8001e0c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	@ 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e1ec      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ca:	4b53      	ldr	r3, [pc, #332]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x10c>
 80047d6:	e000      	b.n	80047da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d063      	beq.n	80048ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047f2:	4b49      	ldr	r3, [pc, #292]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d11c      	bne.n	8004838 <HAL_RCC_OscConfig+0x18c>
 80047fe:	4b46      	ldr	r3, [pc, #280]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d116      	bne.n	8004838 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	4b43      	ldr	r3, [pc, #268]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <HAL_RCC_OscConfig+0x176>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d001      	beq.n	8004822 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e1c0      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004822:	4b3d      	ldr	r3, [pc, #244]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4939      	ldr	r1, [pc, #228]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004836:	e03a      	b.n	80048ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004840:	4b36      	ldr	r3, [pc, #216]	@ (800491c <HAL_RCC_OscConfig+0x270>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7fd fae1 	bl	8001e0c <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484e:	f7fd fadd 	bl	8001e0c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e1a1      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004860:	4b2d      	ldr	r3, [pc, #180]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486c:	4b2a      	ldr	r3, [pc, #168]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4927      	ldr	r1, [pc, #156]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	e015      	b.n	80048ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004882:	4b26      	ldr	r3, [pc, #152]	@ (800491c <HAL_RCC_OscConfig+0x270>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fd fac0 	bl	8001e0c <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004890:	f7fd fabc 	bl	8001e0c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e180      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d03a      	beq.n	8004930 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d019      	beq.n	80048f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c2:	4b17      	ldr	r3, [pc, #92]	@ (8004920 <HAL_RCC_OscConfig+0x274>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c8:	f7fd faa0 	bl	8001e0c <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d0:	f7fd fa9c 	bl	8001e0c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e160      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048ee:	2001      	movs	r0, #1
 80048f0:	f000 fa9c 	bl	8004e2c <RCC_Delay>
 80048f4:	e01c      	b.n	8004930 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004920 <HAL_RCC_OscConfig+0x274>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fc:	f7fd fa86 	bl	8001e0c <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004902:	e00f      	b.n	8004924 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004904:	f7fd fa82 	bl	8001e0c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d908      	bls.n	8004924 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e146      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000
 800491c:	42420000 	.word	0x42420000
 8004920:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004924:	4b92      	ldr	r3, [pc, #584]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e9      	bne.n	8004904 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80a6 	beq.w	8004a8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004942:	4b8b      	ldr	r3, [pc, #556]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	4b88      	ldr	r3, [pc, #544]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4a87      	ldr	r2, [pc, #540]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004958:	61d3      	str	r3, [r2, #28]
 800495a:	4b85      	ldr	r3, [pc, #532]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004962:	60bb      	str	r3, [r7, #8]
 8004964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496a:	4b82      	ldr	r3, [pc, #520]	@ (8004b74 <HAL_RCC_OscConfig+0x4c8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d118      	bne.n	80049a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004976:	4b7f      	ldr	r3, [pc, #508]	@ (8004b74 <HAL_RCC_OscConfig+0x4c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b74 <HAL_RCC_OscConfig+0x4c8>)
 800497c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004982:	f7fd fa43 	bl	8001e0c <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498a:	f7fd fa3f 	bl	8001e0c <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b64      	cmp	r3, #100	@ 0x64
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e103      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499c:	4b75      	ldr	r3, [pc, #468]	@ (8004b74 <HAL_RCC_OscConfig+0x4c8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x312>
 80049b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6213      	str	r3, [r2, #32]
 80049bc:	e02d      	b.n	8004a1a <HAL_RCC_OscConfig+0x36e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x334>
 80049c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4a69      	ldr	r2, [pc, #420]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6213      	str	r3, [r2, #32]
 80049d2:	4b67      	ldr	r3, [pc, #412]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4a66      	ldr	r2, [pc, #408]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	f023 0304 	bic.w	r3, r3, #4
 80049dc:	6213      	str	r3, [r2, #32]
 80049de:	e01c      	b.n	8004a1a <HAL_RCC_OscConfig+0x36e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b05      	cmp	r3, #5
 80049e6:	d10c      	bne.n	8004a02 <HAL_RCC_OscConfig+0x356>
 80049e8:	4b61      	ldr	r3, [pc, #388]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	4a60      	ldr	r2, [pc, #384]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	6213      	str	r3, [r2, #32]
 80049f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6213      	str	r3, [r2, #32]
 8004a00:	e00b      	b.n	8004a1a <HAL_RCC_OscConfig+0x36e>
 8004a02:	4b5b      	ldr	r3, [pc, #364]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4a5a      	ldr	r2, [pc, #360]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6213      	str	r3, [r2, #32]
 8004a0e:	4b58      	ldr	r3, [pc, #352]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4a57      	ldr	r2, [pc, #348]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d015      	beq.n	8004a4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a22:	f7fd f9f3 	bl	8001e0c <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fd f9ef 	bl	8001e0c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e0b1      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a40:	4b4b      	ldr	r3, [pc, #300]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ee      	beq.n	8004a2a <HAL_RCC_OscConfig+0x37e>
 8004a4c:	e014      	b.n	8004a78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4e:	f7fd f9dd 	bl	8001e0c <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fd f9d9 	bl	8001e0c <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e09b      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6c:	4b40      	ldr	r3, [pc, #256]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ee      	bne.n	8004a56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4a3b      	ldr	r2, [pc, #236]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8087 	beq.w	8004ba2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a94:	4b36      	ldr	r3, [pc, #216]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d061      	beq.n	8004b64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d146      	bne.n	8004b36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa8:	4b33      	ldr	r3, [pc, #204]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aae:	f7fd f9ad 	bl	8001e0c <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab6:	f7fd f9a9 	bl	8001e0c <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e06d      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac8:	4b29      	ldr	r3, [pc, #164]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f0      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004adc:	d108      	bne.n	8004af0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ade:	4b24      	ldr	r3, [pc, #144]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	4921      	ldr	r1, [pc, #132]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a19      	ldr	r1, [r3, #32]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	430b      	orrs	r3, r1
 8004b02:	491b      	ldr	r1, [pc, #108]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b08:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0e:	f7fd f97d 	bl	8001e0c <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fd f979 	bl	8001e0c <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e03d      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b28:	4b11      	ldr	r3, [pc, #68]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x46a>
 8004b34:	e035      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b36:	4b10      	ldr	r3, [pc, #64]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fd f966 	bl	8001e0c <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fd f962 	bl	8001e0c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e026      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b56:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <HAL_RCC_OscConfig+0x4c4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x498>
 8004b62:	e01e      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e019      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40007000 	.word	0x40007000
 8004b78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <HAL_RCC_OscConfig+0x500>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000

08004bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0d0      	b.n	8004d66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d910      	bls.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b67      	ldr	r3, [pc, #412]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 0207 	bic.w	r2, r3, #7
 8004bda:	4965      	ldr	r1, [pc, #404]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be2:	4b63      	ldr	r3, [pc, #396]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0b8      	b.n	8004d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d020      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c0c:	4b59      	ldr	r3, [pc, #356]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4a58      	ldr	r2, [pc, #352]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c24:	4b53      	ldr	r3, [pc, #332]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4a52      	ldr	r2, [pc, #328]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c30:	4b50      	ldr	r3, [pc, #320]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	494d      	ldr	r1, [pc, #308]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d040      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d107      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c56:	4b47      	ldr	r3, [pc, #284]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d115      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e07f      	b.n	8004d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6e:	4b41      	ldr	r3, [pc, #260]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e073      	b.n	8004d66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e06b      	b.n	8004d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c8e:	4b39      	ldr	r3, [pc, #228]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f023 0203 	bic.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4936      	ldr	r1, [pc, #216]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca0:	f7fd f8b4 	bl	8001e0c <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fd f8b0 	bl	8001e0c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e053      	b.n	8004d66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f003 020c 	and.w	r2, r3, #12
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d1eb      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b27      	ldr	r3, [pc, #156]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d210      	bcs.n	8004d00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b24      	ldr	r3, [pc, #144]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 0207 	bic.w	r2, r3, #7
 8004ce6:	4922      	ldr	r1, [pc, #136]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	4b20      	ldr	r3, [pc, #128]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e032      	b.n	8004d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d0c:	4b19      	ldr	r3, [pc, #100]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4916      	ldr	r1, [pc, #88]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d2a:	4b12      	ldr	r3, [pc, #72]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	490e      	ldr	r1, [pc, #56]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d3e:	f000 f821 	bl	8004d84 <HAL_RCC_GetSysClockFreq>
 8004d42:	4602      	mov	r2, r0
 8004d44:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	490a      	ldr	r1, [pc, #40]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d50:	5ccb      	ldrb	r3, [r1, r3]
 8004d52:	fa22 f303 	lsr.w	r3, r2, r3
 8004d56:	4a09      	ldr	r2, [pc, #36]	@ (8004d7c <HAL_RCC_ClockConfig+0x1cc>)
 8004d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d5a:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <HAL_RCC_ClockConfig+0x1d0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fd f812 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40022000 	.word	0x40022000
 8004d74:	40021000 	.word	0x40021000
 8004d78:	0800b3b4 	.word	0x0800b3b4
 8004d7c:	20000084 	.word	0x20000084
 8004d80:	20000088 	.word	0x20000088

08004d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d002      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x30>
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_GetSysClockFreq+0x36>
 8004db2:	e027      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004db4:	4b19      	ldr	r3, [pc, #100]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004db6:	613b      	str	r3, [r7, #16]
      break;
 8004db8:	e027      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	0c9b      	lsrs	r3, r3, #18
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	4a17      	ldr	r2, [pc, #92]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004dc4:	5cd3      	ldrb	r3, [r2, r3]
 8004dc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d010      	beq.n	8004df4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dd2:	4b11      	ldr	r3, [pc, #68]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	0c5b      	lsrs	r3, r3, #17
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	4a11      	ldr	r2, [pc, #68]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004dde:	5cd3      	ldrb	r3, [r2, r3]
 8004de0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a0d      	ldr	r2, [pc, #52]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004de6:	fb03 f202 	mul.w	r2, r3, r2
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e004      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a0c      	ldr	r2, [pc, #48]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004df8:	fb02 f303 	mul.w	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	613b      	str	r3, [r7, #16]
      break;
 8004e02:	e002      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e04:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004e06:	613b      	str	r3, [r7, #16]
      break;
 8004e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0a:	693b      	ldr	r3, [r7, #16]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	007a1200 	.word	0x007a1200
 8004e20:	0800b3c4 	.word	0x0800b3c4
 8004e24:	0800b3d4 	.word	0x0800b3d4
 8004e28:	003d0900 	.word	0x003d0900

08004e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e34:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <RCC_Delay+0x34>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a0a      	ldr	r2, [pc, #40]	@ (8004e64 <RCC_Delay+0x38>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	0a5b      	lsrs	r3, r3, #9
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e48:	bf00      	nop
  }
  while (Delay --);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	60fa      	str	r2, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f9      	bne.n	8004e48 <RCC_Delay+0x1c>
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	20000084 	.word	0x20000084
 8004e64:	10624dd3 	.word	0x10624dd3

08004e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d07d      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e84:	2300      	movs	r3, #0
 8004e86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e88:	4b4f      	ldr	r3, [pc, #316]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10d      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e94:	4b4c      	ldr	r3, [pc, #304]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	4a4b      	ldr	r2, [pc, #300]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e9e:	61d3      	str	r3, [r2, #28]
 8004ea0:	4b49      	ldr	r3, [pc, #292]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eac:	2301      	movs	r3, #1
 8004eae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb0:	4b46      	ldr	r3, [pc, #280]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d118      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ebc:	4b43      	ldr	r3, [pc, #268]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a42      	ldr	r2, [pc, #264]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec8:	f7fc ffa0 	bl	8001e0c <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ece:	e008      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed0:	f7fc ff9c 	bl	8001e0c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	@ 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e06d      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eee:	4b36      	ldr	r3, [pc, #216]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d02e      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d027      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f16:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f22:	4a29      	ldr	r2, [pc, #164]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fc ff6b 	bl	8001e0c <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f38:	e00a      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fc ff67 	bl	8001e0c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e036      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f50:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ee      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4917      	ldr	r1, [pc, #92]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f74:	4b14      	ldr	r3, [pc, #80]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4a13      	ldr	r2, [pc, #76]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	490b      	ldr	r1, [pc, #44]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004faa:	4b07      	ldr	r3, [pc, #28]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	4904      	ldr	r1, [pc, #16]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	40007000 	.word	0x40007000
 8004fd0:	42420440 	.word	0x42420440

08004fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e041      	b.n	800506a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc fcea 	bl	80019d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fc9e 	bl	8005954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d109      	bne.n	8005098 <HAL_TIM_PWM_Start+0x24>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	e022      	b.n	80050de <HAL_TIM_PWM_Start+0x6a>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b04      	cmp	r3, #4
 800509c:	d109      	bne.n	80050b2 <HAL_TIM_PWM_Start+0x3e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	bf14      	ite	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	2300      	moveq	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e015      	b.n	80050de <HAL_TIM_PWM_Start+0x6a>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d109      	bne.n	80050cc <HAL_TIM_PWM_Start+0x58>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	bf14      	ite	ne
 80050c4:	2301      	movne	r3, #1
 80050c6:	2300      	moveq	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	e008      	b.n	80050de <HAL_TIM_PWM_Start+0x6a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e05e      	b.n	80051a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_Start+0x82>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050f4:	e013      	b.n	800511e <HAL_TIM_PWM_Start+0xaa>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_PWM_Start+0x92>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005104:	e00b      	b.n	800511e <HAL_TIM_PWM_Start+0xaa>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d104      	bne.n	8005116 <HAL_TIM_PWM_Start+0xa2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005114:	e003      	b.n	800511e <HAL_TIM_PWM_Start+0xaa>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2201      	movs	r2, #1
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 ff17 	bl	8005f5a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1e      	ldr	r2, [pc, #120]	@ (80051ac <HAL_TIM_PWM_Start+0x138>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d107      	bne.n	8005146 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005144:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a18      	ldr	r2, [pc, #96]	@ (80051ac <HAL_TIM_PWM_Start+0x138>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00e      	beq.n	800516e <HAL_TIM_PWM_Start+0xfa>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005158:	d009      	beq.n	800516e <HAL_TIM_PWM_Start+0xfa>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a14      	ldr	r2, [pc, #80]	@ (80051b0 <HAL_TIM_PWM_Start+0x13c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_TIM_PWM_Start+0xfa>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a12      	ldr	r2, [pc, #72]	@ (80051b4 <HAL_TIM_PWM_Start+0x140>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d111      	bne.n	8005192 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b06      	cmp	r3, #6
 800517e:	d010      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	e007      	b.n	80051a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800

080051b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e041      	b.n	800524e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc fc28 	bl	8001a34 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 fbac 	bl	8005954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_TIM_IC_Start_IT+0x1e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e013      	b.n	800529e <HAL_TIM_IC_Start_IT+0x46>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_TIM_IC_Start_IT+0x2e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005282:	b2db      	uxtb	r3, r3
 8005284:	e00b      	b.n	800529e <HAL_TIM_IC_Start_IT+0x46>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_TIM_IC_Start_IT+0x3e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005292:	b2db      	uxtb	r3, r3
 8005294:	e003      	b.n	800529e <HAL_TIM_IC_Start_IT+0x46>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <HAL_TIM_IC_Start_IT+0x58>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e013      	b.n	80052d8 <HAL_TIM_IC_Start_IT+0x80>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d104      	bne.n	80052c0 <HAL_TIM_IC_Start_IT+0x68>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	e00b      	b.n	80052d8 <HAL_TIM_IC_Start_IT+0x80>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d104      	bne.n	80052d0 <HAL_TIM_IC_Start_IT+0x78>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	e003      	b.n	80052d8 <HAL_TIM_IC_Start_IT+0x80>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052da:	7bbb      	ldrb	r3, [r7, #14]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d102      	bne.n	80052e6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052e0:	7b7b      	ldrb	r3, [r7, #13]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d001      	beq.n	80052ea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e0b8      	b.n	800545c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_IC_Start_IT+0xa2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f8:	e013      	b.n	8005322 <HAL_TIM_IC_Start_IT+0xca>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d104      	bne.n	800530a <HAL_TIM_IC_Start_IT+0xb2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005308:	e00b      	b.n	8005322 <HAL_TIM_IC_Start_IT+0xca>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d104      	bne.n	800531a <HAL_TIM_IC_Start_IT+0xc2>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005318:	e003      	b.n	8005322 <HAL_TIM_IC_Start_IT+0xca>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <HAL_TIM_IC_Start_IT+0xda>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005330:	e013      	b.n	800535a <HAL_TIM_IC_Start_IT+0x102>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b04      	cmp	r3, #4
 8005336:	d104      	bne.n	8005342 <HAL_TIM_IC_Start_IT+0xea>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005340:	e00b      	b.n	800535a <HAL_TIM_IC_Start_IT+0x102>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d104      	bne.n	8005352 <HAL_TIM_IC_Start_IT+0xfa>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005350:	e003      	b.n	800535a <HAL_TIM_IC_Start_IT+0x102>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d841      	bhi.n	80053e4 <HAL_TIM_IC_Start_IT+0x18c>
 8005360:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <HAL_TIM_IC_Start_IT+0x110>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	0800539d 	.word	0x0800539d
 800536c:	080053e5 	.word	0x080053e5
 8005370:	080053e5 	.word	0x080053e5
 8005374:	080053e5 	.word	0x080053e5
 8005378:	080053af 	.word	0x080053af
 800537c:	080053e5 	.word	0x080053e5
 8005380:	080053e5 	.word	0x080053e5
 8005384:	080053e5 	.word	0x080053e5
 8005388:	080053c1 	.word	0x080053c1
 800538c:	080053e5 	.word	0x080053e5
 8005390:	080053e5 	.word	0x080053e5
 8005394:	080053e5 	.word	0x080053e5
 8005398:	080053d3 	.word	0x080053d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0202 	orr.w	r2, r2, #2
 80053aa:	60da      	str	r2, [r3, #12]
      break;
 80053ac:	e01d      	b.n	80053ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0204 	orr.w	r2, r2, #4
 80053bc:	60da      	str	r2, [r3, #12]
      break;
 80053be:	e014      	b.n	80053ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0208 	orr.w	r2, r2, #8
 80053ce:	60da      	str	r2, [r3, #12]
      break;
 80053d0:	e00b      	b.n	80053ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0210 	orr.w	r2, r2, #16
 80053e0:	60da      	str	r2, [r3, #12]
      break;
 80053e2:	e002      	b.n	80053ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
      break;
 80053e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d134      	bne.n	800545a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fdae 	bl	8005f5a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a18      	ldr	r2, [pc, #96]	@ (8005464 <HAL_TIM_IC_Start_IT+0x20c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1ce>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005410:	d009      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1ce>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a14      	ldr	r2, [pc, #80]	@ (8005468 <HAL_TIM_IC_Start_IT+0x210>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1ce>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a12      	ldr	r2, [pc, #72]	@ (800546c <HAL_TIM_IC_Start_IT+0x214>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d111      	bne.n	800544a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b06      	cmp	r3, #6
 8005436:	d010      	beq.n	800545a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005448:	e007      	b.n	800545a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800

08005470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d020      	beq.n	80054d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01b      	beq.n	80054d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0202 	mvn.w	r2, #2
 80054a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fb fd94 	bl	8000fe8 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa2b 	bl	800591e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fa31 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d020      	beq.n	8005520 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01b      	beq.n	8005520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0204 	mvn.w	r2, #4
 80054f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fb fd6e 	bl	8000fe8 <HAL_TIM_IC_CaptureCallback>
 800550c:	e005      	b.n	800551a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa05 	bl	800591e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fa0b 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d020      	beq.n	800556c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0208 	mvn.w	r2, #8
 800553c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2204      	movs	r2, #4
 8005542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fb fd48 	bl	8000fe8 <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9df 	bl	800591e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f9e5 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b00      	cmp	r3, #0
 8005574:	d020      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01b      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0210 	mvn.w	r2, #16
 8005588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2208      	movs	r2, #8
 800558e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fb fd22 	bl	8000fe8 <HAL_TIM_IC_CaptureCallback>
 80055a4:	e005      	b.n	80055b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f9b9 	bl	800591e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f9bf 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00c      	beq.n	80055dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0201 	mvn.w	r2, #1
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f998 	bl	800590c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00c      	beq.n	8005600 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fe28 	bl	8006250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00c      	beq.n	8005624 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800561c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f98f 	bl	8005942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00c      	beq.n	8005648 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0220 	mvn.w	r2, #32
 8005640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fdfb 	bl	800623e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_TIM_IC_ConfigChannel+0x1e>
 800566a:	2302      	movs	r3, #2
 800566c:	e088      	b.n	8005780 <HAL_TIM_IC_ConfigChannel+0x130>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11b      	bne.n	80056b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800568c:	f000 fb58 	bl	8005d40 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 020c 	bic.w	r2, r2, #12
 800569e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6999      	ldr	r1, [r3, #24]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	619a      	str	r2, [r3, #24]
 80056b2:	e060      	b.n	8005776 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d11c      	bne.n	80056f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80056ca:	f000 fb93 	bl	8005df4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80056dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6999      	ldr	r1, [r3, #24]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	021a      	lsls	r2, r3, #8
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	619a      	str	r2, [r3, #24]
 80056f2:	e040      	b.n	8005776 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d11b      	bne.n	8005732 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800570a:	f000 fbaf 	bl	8005e6c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 020c 	bic.w	r2, r2, #12
 800571c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69d9      	ldr	r1, [r3, #28]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	61da      	str	r2, [r3, #28]
 8005730:	e021      	b.n	8005776 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b0c      	cmp	r3, #12
 8005736:	d11c      	bne.n	8005772 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005748:	f000 fbcb 	bl	8005ee2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800575a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69d9      	ldr	r1, [r3, #28]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	021a      	lsls	r2, r3, #8
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	61da      	str	r2, [r3, #28]
 8005770:	e001      	b.n	8005776 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e0ae      	b.n	8005904 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b0c      	cmp	r3, #12
 80057b2:	f200 809f 	bhi.w	80058f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057b6:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	080057f1 	.word	0x080057f1
 80057c0:	080058f5 	.word	0x080058f5
 80057c4:	080058f5 	.word	0x080058f5
 80057c8:	080058f5 	.word	0x080058f5
 80057cc:	08005831 	.word	0x08005831
 80057d0:	080058f5 	.word	0x080058f5
 80057d4:	080058f5 	.word	0x080058f5
 80057d8:	080058f5 	.word	0x080058f5
 80057dc:	08005873 	.word	0x08005873
 80057e0:	080058f5 	.word	0x080058f5
 80057e4:	080058f5 	.word	0x080058f5
 80057e8:	080058f5 	.word	0x080058f5
 80057ec:	080058b3 	.word	0x080058b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f91a 	bl	8005a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0208 	orr.w	r2, r2, #8
 800580a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0204 	bic.w	r2, r2, #4
 800581a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6999      	ldr	r1, [r3, #24]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	619a      	str	r2, [r3, #24]
      break;
 800582e:	e064      	b.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 f960 	bl	8005afc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800584a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800585a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6999      	ldr	r1, [r3, #24]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	021a      	lsls	r2, r3, #8
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	619a      	str	r2, [r3, #24]
      break;
 8005870:	e043      	b.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f9a9 	bl	8005bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0208 	orr.w	r2, r2, #8
 800588c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0204 	bic.w	r2, r2, #4
 800589c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69d9      	ldr	r1, [r3, #28]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	61da      	str	r2, [r3, #28]
      break;
 80058b0:	e023      	b.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f9f3 	bl	8005ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69d9      	ldr	r1, [r3, #28]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	021a      	lsls	r2, r3, #8
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	61da      	str	r2, [r3, #28]
      break;
 80058f2:	e002      	b.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
      break;
 80058f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005902:	7dfb      	ldrb	r3, [r7, #23]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr

08005942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a2f      	ldr	r2, [pc, #188]	@ (8005a24 <TIM_Base_SetConfig+0xd0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0x30>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0x30>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a2c      	ldr	r2, [pc, #176]	@ (8005a28 <TIM_Base_SetConfig+0xd4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0x30>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a2c <TIM_Base_SetConfig+0xd8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a22      	ldr	r2, [pc, #136]	@ (8005a24 <TIM_Base_SetConfig+0xd0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00b      	beq.n	80059b6 <TIM_Base_SetConfig+0x62>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a4:	d007      	beq.n	80059b6 <TIM_Base_SetConfig+0x62>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a28 <TIM_Base_SetConfig+0xd4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_Base_SetConfig+0x62>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a2c <TIM_Base_SetConfig+0xd8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d108      	bne.n	80059c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005a24 <TIM_Base_SetConfig+0xd0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d103      	bne.n	80059fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f023 0201 	bic.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800

08005a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f023 0201 	bic.w	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f023 0302 	bic.w	r3, r3, #2
 8005a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	@ (8005af8 <TIM_OC1_SetConfig+0xc8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d10c      	bne.n	8005aa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0308 	bic.w	r3, r3, #8
 8005a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f023 0304 	bic.w	r3, r3, #4
 8005aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a13      	ldr	r2, [pc, #76]	@ (8005af8 <TIM_OC1_SetConfig+0xc8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d111      	bne.n	8005ad2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	621a      	str	r2, [r3, #32]
}
 8005aec:	bf00      	nop
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40012c00 	.word	0x40012c00

08005afc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	f023 0210 	bic.w	r2, r3, #16
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0320 	bic.w	r3, r3, #32
 8005b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a1d      	ldr	r2, [pc, #116]	@ (8005bcc <TIM_OC2_SetConfig+0xd0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10d      	bne.n	8005b78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a14      	ldr	r2, [pc, #80]	@ (8005bcc <TIM_OC2_SetConfig+0xd0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d113      	bne.n	8005ba8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	40012c00 	.word	0x40012c00

08005bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca0 <TIM_OC3_SetConfig+0xd0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d10d      	bne.n	8005c4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a14      	ldr	r2, [pc, #80]	@ (8005ca0 <TIM_OC3_SetConfig+0xd0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d113      	bne.n	8005c7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	621a      	str	r2, [r3, #32]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40012c00 	.word	0x40012c00

08005ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	031b      	lsls	r3, r3, #12
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8005d3c <TIM_OC4_SetConfig+0x98>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d109      	bne.n	8005d18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	019b      	lsls	r3, r3, #6
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr
 8005d3c:	40012c00 	.word	0x40012c00

08005d40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f023 0201 	bic.w	r2, r3, #1
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4a1f      	ldr	r2, [pc, #124]	@ (8005de8 <TIM_TI1_SetConfig+0xa8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00b      	beq.n	8005d86 <TIM_TI1_SetConfig+0x46>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d74:	d007      	beq.n	8005d86 <TIM_TI1_SetConfig+0x46>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a1c      	ldr	r2, [pc, #112]	@ (8005dec <TIM_TI1_SetConfig+0xac>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_TI1_SetConfig+0x46>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <TIM_TI1_SetConfig+0xb0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d101      	bne.n	8005d8a <TIM_TI1_SetConfig+0x4a>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <TIM_TI1_SetConfig+0x4c>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0303 	bic.w	r3, r3, #3
 8005d96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	e003      	b.n	8005daa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f023 030a 	bic.w	r3, r3, #10
 8005dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f003 030a 	and.w	r3, r3, #10
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800

08005df4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f023 0210 	bic.w	r2, r3, #16
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	031b      	lsls	r3, r3, #12
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f023 0303 	bic.w	r3, r3, #3
 8005e98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ea8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	621a      	str	r2, [r3, #32]
}
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr

08005ee2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b087      	sub	sp, #28
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f0e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	031b      	lsls	r3, r3, #12
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	031b      	lsls	r3, r3, #12
 8005f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	621a      	str	r2, [r3, #32]
}
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b087      	sub	sp, #28
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f003 031f 	and.w	r3, r3, #31
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	401a      	ands	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a1a      	ldr	r2, [r3, #32]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	431a      	orrs	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	621a      	str	r2, [r3, #32]
}
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <HAL_TIMEx_PWMN_Start+0x24>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e022      	b.n	800600e <HAL_TIMEx_PWMN_Start+0x6a>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d109      	bne.n	8005fe2 <HAL_TIMEx_PWMN_Start+0x3e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	bf14      	ite	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	2300      	moveq	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	e015      	b.n	800600e <HAL_TIMEx_PWMN_Start+0x6a>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d109      	bne.n	8005ffc <HAL_TIMEx_PWMN_Start+0x58>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	e008      	b.n	800600e <HAL_TIMEx_PWMN_Start+0x6a>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e059      	b.n	80060ca <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <HAL_TIMEx_PWMN_Start+0x82>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006024:	e013      	b.n	800604e <HAL_TIMEx_PWMN_Start+0xaa>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b04      	cmp	r3, #4
 800602a:	d104      	bne.n	8006036 <HAL_TIMEx_PWMN_Start+0x92>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006034:	e00b      	b.n	800604e <HAL_TIMEx_PWMN_Start+0xaa>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b08      	cmp	r3, #8
 800603a:	d104      	bne.n	8006046 <HAL_TIMEx_PWMN_Start+0xa2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006044:	e003      	b.n	800604e <HAL_TIMEx_PWMN_Start+0xaa>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2202      	movs	r2, #2
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2204      	movs	r2, #4
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f000 f903 	bl	8006262 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800606a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a18      	ldr	r2, [pc, #96]	@ (80060d4 <HAL_TIMEx_PWMN_Start+0x130>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00e      	beq.n	8006094 <HAL_TIMEx_PWMN_Start+0xf0>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607e:	d009      	beq.n	8006094 <HAL_TIMEx_PWMN_Start+0xf0>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a14      	ldr	r2, [pc, #80]	@ (80060d8 <HAL_TIMEx_PWMN_Start+0x134>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_TIMEx_PWMN_Start+0xf0>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a13      	ldr	r2, [pc, #76]	@ (80060dc <HAL_TIMEx_PWMN_Start+0x138>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d111      	bne.n	80060b8 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b06      	cmp	r3, #6
 80060a4:	d010      	beq.n	80060c8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0201 	orr.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b6:	e007      	b.n	80060c8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40012c00 	.word	0x40012c00
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800

080060e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e046      	b.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a16      	ldr	r2, [pc, #88]	@ (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006144:	d009      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a12      	ldr	r2, [pc, #72]	@ (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a10      	ldr	r2, [pc, #64]	@ (8006198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d10c      	bne.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	4313      	orrs	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800

0800619c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e03d      	b.n	8006234 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006262:	b480      	push	{r7}
 8006264:	b087      	sub	sp, #28
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	2204      	movs	r2, #4
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	43db      	mvns	r3, r3
 8006284:	401a      	ands	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	fa01 f303 	lsl.w	r3, r1, r3
 800629a:	431a      	orrs	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	621a      	str	r2, [r3, #32]
}
 80062a0:	bf00      	nop
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	4638      	mov	r0, r7
 80062b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr

080062c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062d4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80062d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062f8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80062fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	b29b      	uxth	r3, r3
 800630a:	43db      	mvns	r3, r3
 800630c:	b29b      	uxth	r3, r3
 800630e:	4013      	ands	r3, r2
 8006310:	b29a      	uxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr

08006324 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	4638      	mov	r0, r7
 8006346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
	...

08006378 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006378:	b480      	push	{r7}
 800637a:	b09d      	sub	sp, #116	@ 0x74
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800639a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	78db      	ldrb	r3, [r3, #3]
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d81f      	bhi.n	80063ea <USB_ActivateEndpoint+0x72>
 80063aa:	a201      	add	r2, pc, #4	@ (adr r2, 80063b0 <USB_ActivateEndpoint+0x38>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c1 	.word	0x080063c1
 80063b4:	080063dd 	.word	0x080063dd
 80063b8:	080063f3 	.word	0x080063f3
 80063bc:	080063cf 	.word	0x080063cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80063cc:	e012      	b.n	80063f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063d2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80063d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80063da:	e00b      	b.n	80063f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80063dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80063e8:	e004      	b.n	80063f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80063f0:	e000      	b.n	80063f4 <USB_ActivateEndpoint+0x7c>
      break;
 80063f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	441a      	add	r2, r3
 80063fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800640a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006412:	b29b      	uxth	r3, r3
 8006414:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642c:	b29b      	uxth	r3, r3
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	4313      	orrs	r3, r2
 8006434:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	441a      	add	r2, r3
 8006442:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800644e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	7b1b      	ldrb	r3, [r3, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 8178 	bne.w	8006754 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8084 	beq.w	8006576 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006478:	b29b      	uxth	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	4413      	add	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	011a      	lsls	r2, r3, #4
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	88db      	ldrh	r3, [r3, #6]
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	b29b      	uxth	r3, r3
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	827b      	strh	r3, [r7, #18]
 80064b0:	8a7b      	ldrh	r3, [r7, #18]
 80064b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01b      	beq.n	80064f2 <USB_ActivateEndpoint+0x17a>
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d0:	823b      	strh	r3, [r7, #16]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	441a      	add	r2, r3
 80064dc:	8a3b      	ldrh	r3, [r7, #16]
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	78db      	ldrb	r3, [r3, #3]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d020      	beq.n	800653c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006510:	81bb      	strh	r3, [r7, #12]
 8006512:	89bb      	ldrh	r3, [r7, #12]
 8006514:	f083 0320 	eor.w	r3, r3, #32
 8006518:	81bb      	strh	r3, [r7, #12]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	441a      	add	r2, r3
 8006524:	89bb      	ldrh	r3, [r7, #12]
 8006526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800652a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800652e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006536:	b29b      	uxth	r3, r3
 8006538:	8013      	strh	r3, [r2, #0]
 800653a:	e2d5      	b.n	8006ae8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800654e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006552:	81fb      	strh	r3, [r7, #14]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	89fb      	ldrh	r3, [r7, #14]
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800656c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]
 8006574:	e2b8      	b.n	8006ae8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	633b      	str	r3, [r7, #48]	@ 0x30
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006580:	b29b      	uxth	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006586:	4413      	add	r3, r2
 8006588:	633b      	str	r3, [r7, #48]	@ 0x30
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	011a      	lsls	r2, r3, #4
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	4413      	add	r3, r2
 8006594:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	88db      	ldrh	r3, [r3, #6]
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ba:	4413      	add	r3, r2
 80065bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	011a      	lsls	r2, r3, #4
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	4413      	add	r3, r2
 80065c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d8:	b29a      	uxth	r2, r3
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80065e4:	d91d      	bls.n	8006622 <USB_ActivateEndpoint+0x2aa>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <USB_ActivateEndpoint+0x288>
 80065fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065fc:	3b01      	subs	r3, #1
 80065fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29a      	uxth	r2, r3
 8006606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006608:	b29b      	uxth	r3, r3
 800660a:	029b      	lsls	r3, r3, #10
 800660c:	b29b      	uxth	r3, r3
 800660e:	4313      	orrs	r3, r2
 8006610:	b29b      	uxth	r3, r3
 8006612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29a      	uxth	r2, r3
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e026      	b.n	8006670 <USB_ActivateEndpoint+0x2f8>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <USB_ActivateEndpoint+0x2c8>
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006638:	b29a      	uxth	r2, r3
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e017      	b.n	8006670 <USB_ActivateEndpoint+0x2f8>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <USB_ActivateEndpoint+0x2e2>
 8006654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006656:	3301      	adds	r3, #1
 8006658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29a      	uxth	r2, r3
 8006660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006662:	b29b      	uxth	r3, r3
 8006664:	029b      	lsls	r3, r3, #10
 8006666:	b29b      	uxth	r3, r3
 8006668:	4313      	orrs	r3, r2
 800666a:	b29a      	uxth	r2, r3
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800667e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <USB_ActivateEndpoint+0x348>
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800669a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669e:	843b      	strh	r3, [r7, #32]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	441a      	add	r2, r3
 80066aa:	8c3b      	ldrh	r3, [r7, #32]
 80066ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066bc:	b29b      	uxth	r3, r3
 80066be:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d124      	bne.n	8006712 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066de:	83bb      	strh	r3, [r7, #28]
 80066e0:	8bbb      	ldrh	r3, [r7, #28]
 80066e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066e6:	83bb      	strh	r3, [r7, #28]
 80066e8:	8bbb      	ldrh	r3, [r7, #28]
 80066ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066ee:	83bb      	strh	r3, [r7, #28]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	441a      	add	r2, r3
 80066fa:	8bbb      	ldrh	r3, [r7, #28]
 80066fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670c:	b29b      	uxth	r3, r3
 800670e:	8013      	strh	r3, [r2, #0]
 8006710:	e1ea      	b.n	8006ae8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006728:	83fb      	strh	r3, [r7, #30]
 800672a:	8bfb      	ldrh	r3, [r7, #30]
 800672c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006730:	83fb      	strh	r3, [r7, #30]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	8bfb      	ldrh	r3, [r7, #30]
 800673e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674e:	b29b      	uxth	r3, r3
 8006750:	8013      	strh	r3, [r2, #0]
 8006752:	e1c9      	b.n	8006ae8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	78db      	ldrb	r3, [r3, #3]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d11e      	bne.n	800679a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	b29b      	uxth	r3, r3
 800676a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800676e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006772:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	441a      	add	r2, r3
 8006780:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800678c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006794:	b29b      	uxth	r3, r3
 8006796:	8013      	strh	r3, [r2, #0]
 8006798:	e01d      	b.n	80067d6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80067ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80067c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067e6:	4413      	add	r3, r2
 80067e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	011a      	lsls	r2, r3, #4
 80067f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	891b      	ldrh	r3, [r3, #8]
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	b29b      	uxth	r3, r3
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006808:	801a      	strh	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	657b      	str	r3, [r7, #84]	@ 0x54
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006814:	b29b      	uxth	r3, r3
 8006816:	461a      	mov	r2, r3
 8006818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800681a:	4413      	add	r3, r2
 800681c:	657b      	str	r3, [r7, #84]	@ 0x54
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	011a      	lsls	r2, r3, #4
 8006824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006826:	4413      	add	r3, r2
 8006828:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800682c:	653b      	str	r3, [r7, #80]	@ 0x50
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	895b      	ldrh	r3, [r3, #10]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800683c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	785b      	ldrb	r3, [r3, #1]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f040 8093 	bne.w	800696e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006858:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800685c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01b      	beq.n	800689c <USB_ActivateEndpoint+0x524>
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	441a      	add	r2, r3
 8006886:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800688c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006890:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006898:	b29b      	uxth	r3, r3
 800689a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80068aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80068ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <USB_ActivateEndpoint+0x574>
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80068d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006902:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006904:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006906:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800690a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800690c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800690e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006912:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	441a      	add	r2, r3
 800691e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800692c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006930:	b29b      	uxth	r3, r3
 8006932:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800694a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	441a      	add	r2, r3
 8006956:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800695c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006968:	b29b      	uxth	r3, r3
 800696a:	8013      	strh	r3, [r2, #0]
 800696c:	e0bc      	b.n	8006ae8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800697e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01d      	beq.n	80069c6 <USB_ActivateEndpoint+0x64e>
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800699c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80069d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80069da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01d      	beq.n	8006a1e <USB_ActivateEndpoint+0x6a6>
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	78db      	ldrb	r3, [r3, #3]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d024      	beq.n	8006a70 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a3c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006a40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006a44:	f083 0320 	eor.w	r3, r3, #32
 8006a48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]
 8006a6e:	e01d      	b.n	8006aac <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a86:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006ae8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3774      	adds	r7, #116	@ 0x74
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop

08006af8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b08d      	sub	sp, #52	@ 0x34
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	7b1b      	ldrb	r3, [r3, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f040 808e 	bne.w	8006c28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d044      	beq.n	8006b9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	81bb      	strh	r3, [r7, #12]
 8006b22:	89bb      	ldrh	r3, [r7, #12]
 8006b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01b      	beq.n	8006b64 <USB_DeactivateEndpoint+0x6c>
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b42:	817b      	strh	r3, [r7, #10]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	897b      	ldrh	r3, [r7, #10]
 8006b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b7a:	813b      	strh	r3, [r7, #8]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	893b      	ldrh	r3, [r7, #8]
 8006b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8013      	strh	r3, [r2, #0]
 8006b9c:	e192      	b.n	8006ec4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	827b      	strh	r3, [r7, #18]
 8006bac:	8a7b      	ldrh	r3, [r7, #18]
 8006bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01b      	beq.n	8006bee <USB_DeactivateEndpoint+0xf6>
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bcc:	823b      	strh	r3, [r7, #16]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	441a      	add	r2, r3
 8006bd8:	8a3b      	ldrh	r3, [r7, #16]
 8006bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c04:	81fb      	strh	r3, [r7, #14]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	441a      	add	r2, r3
 8006c10:	89fb      	ldrh	r3, [r7, #14]
 8006c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8013      	strh	r3, [r2, #0]
 8006c26:	e14d      	b.n	8006ec4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	785b      	ldrb	r3, [r3, #1]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 80a5 	bne.w	8006d7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	843b      	strh	r3, [r7, #32]
 8006c40:	8c3b      	ldrh	r3, [r7, #32]
 8006c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01b      	beq.n	8006c82 <USB_DeactivateEndpoint+0x18a>
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c60:	83fb      	strh	r3, [r7, #30]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	8bfb      	ldrh	r3, [r7, #30]
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	83bb      	strh	r3, [r7, #28]
 8006c90:	8bbb      	ldrh	r3, [r7, #28]
 8006c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01b      	beq.n	8006cd2 <USB_DeactivateEndpoint+0x1da>
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb0:	837b      	strh	r3, [r7, #26]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	441a      	add	r2, r3
 8006cbc:	8b7b      	ldrh	r3, [r7, #26]
 8006cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce8:	833b      	strh	r3, [r7, #24]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	441a      	add	r2, r3
 8006cf4:	8b3b      	ldrh	r3, [r7, #24]
 8006cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d20:	82fb      	strh	r3, [r7, #22]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	441a      	add	r2, r3
 8006d2c:	8afb      	ldrh	r3, [r7, #22]
 8006d2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d58:	82bb      	strh	r3, [r7, #20]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	441a      	add	r2, r3
 8006d64:	8abb      	ldrh	r3, [r7, #20]
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]
 8006d7a:	e0a3      	b.n	8006ec4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006d8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01b      	beq.n	8006dcc <USB_DeactivateEndpoint+0x2d4>
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006daa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006dda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01b      	beq.n	8006e1c <USB_DeactivateEndpoint+0x324>
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	441a      	add	r2, r3
 8006e06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	441a      	add	r2, r3
 8006e3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	441a      	add	r2, r3
 8006e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	441a      	add	r2, r3
 8006eae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3734      	adds	r7, #52	@ 0x34
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b0c2      	sub	sp, #264	@ 0x108
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ede:	6018      	str	r0, [r3, #0]
 8006ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	f040 86b7 	bne.w	8007c6a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d908      	bls.n	8006f2a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006f28:	e007      	b.n	8006f3a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	7b1b      	ldrb	r3, [r3, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d13a      	bne.n	8006fc0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6959      	ldr	r1, [r3, #20]
 8006f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	88da      	ldrh	r2, [r3, #6]
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f70:	6800      	ldr	r0, [r0, #0]
 8006f72:	f001 fc9c 	bl	80088ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	4413      	add	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	011a      	lsls	r2, r3, #4
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	4413      	add	r3, r2
 8006fac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	f000 be1f 	b.w	8007bfe <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	78db      	ldrb	r3, [r3, #3]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	f040 8462 	bne.w	8007896 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6a1a      	ldr	r2, [r3, #32]
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	f240 83df 	bls.w	80077ae <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007016:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800701a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	441a      	add	r2, r3
 8007034:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007040:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007048:	b29b      	uxth	r3, r3
 800704a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800704c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6a1a      	ldr	r2, [r3, #32]
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	1ad2      	subs	r2, r2, r3
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 81c7 	beq.w	8007420 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	633b      	str	r3, [r7, #48]	@ 0x30
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d177      	bne.n	800719e <USB_EPStartXfer+0x2ce>
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	4413      	add	r3, r2
 80070d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	011a      	lsls	r2, r3, #4
 80070e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e2:	4413      	add	r3, r2
 80070e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	801a      	strh	r2, [r3, #0]
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007100:	d921      	bls.n	8007146 <USB_EPStartXfer+0x276>
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800710c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007110:	f003 031f 	and.w	r3, r3, #31
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <USB_EPStartXfer+0x252>
 8007118:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800711c:	3b01      	subs	r3, #1
 800711e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29a      	uxth	r2, r3
 8007128:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800712c:	b29b      	uxth	r3, r3
 800712e:	029b      	lsls	r3, r3, #10
 8007130:	b29b      	uxth	r3, r3
 8007132:	4313      	orrs	r3, r2
 8007134:	b29b      	uxth	r3, r3
 8007136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713e:	b29a      	uxth	r2, r3
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	e050      	b.n	80071e8 <USB_EPStartXfer+0x318>
 8007146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <USB_EPStartXfer+0x294>
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715c:	b29a      	uxth	r2, r3
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	801a      	strh	r2, [r3, #0]
 8007162:	e041      	b.n	80071e8 <USB_EPStartXfer+0x318>
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007168:	085b      	lsrs	r3, r3, #1
 800716a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <USB_EPStartXfer+0x2b4>
 800717a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800717e:	3301      	adds	r3, #1
 8007180:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29a      	uxth	r2, r3
 800718a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29b      	uxth	r3, r3
 8007194:	4313      	orrs	r3, r2
 8007196:	b29a      	uxth	r2, r3
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e024      	b.n	80071e8 <USB_EPStartXfer+0x318>
 800719e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d11c      	bne.n	80071e8 <USB_EPStartXfer+0x318>
 80071ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	4413      	add	r3, r2
 80071c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80071c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	011a      	lsls	r2, r3, #4
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	4413      	add	r3, r2
 80071d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	895b      	ldrh	r3, [r3, #10]
 80071f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6959      	ldr	r1, [r3, #20]
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007208:	b29b      	uxth	r3, r3
 800720a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800720e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007212:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007216:	6800      	ldr	r0, [r0, #0]
 8007218:	f001 fb49 	bl	80088ae <USB_WritePMA>
            ep->xfer_buff += len;
 800721c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	695a      	ldr	r2, [r3, #20]
 8007228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722c:	441a      	add	r2, r3
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800723a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6a1a      	ldr	r2, [r3, #32]
 8007246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	429a      	cmp	r2, r3
 8007254:	d90f      	bls.n	8007276 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007266:	1ad2      	subs	r2, r2, r3
 8007268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	621a      	str	r2, [r3, #32]
 8007274:	e00e      	b.n	8007294 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2200      	movs	r2, #0
 8007292:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d177      	bne.n	8007394 <USB_EPStartXfer+0x4c4>
 80072a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072be:	b29b      	uxth	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	4413      	add	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	011a      	lsls	r2, r3, #4
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	4413      	add	r3, r2
 80072da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072de:	617b      	str	r3, [r7, #20]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80072f6:	d921      	bls.n	800733c <USB_EPStartXfer+0x46c>
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <USB_EPStartXfer+0x448>
 800730e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007312:	3b01      	subs	r3, #1
 8007314:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29a      	uxth	r2, r3
 800731e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007322:	b29b      	uxth	r3, r3
 8007324:	029b      	lsls	r3, r3, #10
 8007326:	b29b      	uxth	r3, r3
 8007328:	4313      	orrs	r3, r2
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007334:	b29a      	uxth	r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	801a      	strh	r2, [r3, #0]
 800733a:	e056      	b.n	80073ea <USB_EPStartXfer+0x51a>
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <USB_EPStartXfer+0x48a>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007352:	b29a      	uxth	r2, r3
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e047      	b.n	80073ea <USB_EPStartXfer+0x51a>
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <USB_EPStartXfer+0x4aa>
 8007370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007374:	3301      	adds	r3, #1
 8007376:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	b29a      	uxth	r2, r3
 8007380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007384:	b29b      	uxth	r3, r3
 8007386:	029b      	lsls	r3, r3, #10
 8007388:	b29b      	uxth	r3, r3
 800738a:	4313      	orrs	r3, r2
 800738c:	b29a      	uxth	r2, r3
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	e02a      	b.n	80073ea <USB_EPStartXfer+0x51a>
 8007394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d122      	bne.n	80073ea <USB_EPStartXfer+0x51a>
 80073a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	623b      	str	r3, [r7, #32]
 80073b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073be:	b29b      	uxth	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	4413      	add	r3, r2
 80073c6:	623b      	str	r3, [r7, #32]
 80073c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	011a      	lsls	r2, r3, #4
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	4413      	add	r3, r2
 80073da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	891b      	ldrh	r3, [r3, #8]
 80073f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6959      	ldr	r1, [r3, #20]
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	b29b      	uxth	r3, r3
 800740c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007410:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007414:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007418:	6800      	ldr	r0, [r0, #0]
 800741a:	f001 fa48 	bl	80088ae <USB_WritePMA>
 800741e:	e3ee      	b.n	8007bfe <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d177      	bne.n	8007520 <USB_EPStartXfer+0x650>
 8007430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800744a:	b29b      	uxth	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007450:	4413      	add	r3, r2
 8007452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	011a      	lsls	r2, r3, #4
 8007462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007464:	4413      	add	r3, r2
 8007466:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800746a:	647b      	str	r3, [r7, #68]	@ 0x44
 800746c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007476:	b29a      	uxth	r2, r3
 8007478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800747a:	801a      	strh	r2, [r3, #0]
 800747c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007480:	2b3e      	cmp	r3, #62	@ 0x3e
 8007482:	d921      	bls.n	80074c8 <USB_EPStartXfer+0x5f8>
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	2b00      	cmp	r3, #0
 8007498:	d104      	bne.n	80074a4 <USB_EPStartXfer+0x5d4>
 800749a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800749e:	3b01      	subs	r3, #1
 80074a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	029b      	lsls	r3, r3, #10
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	4313      	orrs	r3, r2
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e056      	b.n	8007576 <USB_EPStartXfer+0x6a6>
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <USB_EPStartXfer+0x616>
 80074d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074de:	b29a      	uxth	r2, r3
 80074e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074e2:	801a      	strh	r2, [r3, #0]
 80074e4:	e047      	b.n	8007576 <USB_EPStartXfer+0x6a6>
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <USB_EPStartXfer+0x636>
 80074fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007500:	3301      	adds	r3, #1
 8007502:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29a      	uxth	r2, r3
 800750c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007510:	b29b      	uxth	r3, r3
 8007512:	029b      	lsls	r3, r3, #10
 8007514:	b29b      	uxth	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b29a      	uxth	r2, r3
 800751a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800751c:	801a      	strh	r2, [r3, #0]
 800751e:	e02a      	b.n	8007576 <USB_EPStartXfer+0x6a6>
 8007520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d122      	bne.n	8007576 <USB_EPStartXfer+0x6a6>
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	653b      	str	r3, [r7, #80]	@ 0x50
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800754a:	b29b      	uxth	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007550:	4413      	add	r3, r2
 8007552:	653b      	str	r3, [r7, #80]	@ 0x50
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	011a      	lsls	r2, r3, #4
 8007562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007564:	4413      	add	r3, r2
 8007566:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800756a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007570:	b29a      	uxth	r2, r3
 8007572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007574:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	891b      	ldrh	r3, [r3, #8]
 8007582:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6959      	ldr	r1, [r3, #20]
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007596:	b29b      	uxth	r3, r3
 8007598:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800759c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075a4:	6800      	ldr	r0, [r0, #0]
 80075a6:	f001 f982 	bl	80088ae <USB_WritePMA>
            ep->xfer_buff += len;
 80075aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	695a      	ldr	r2, [r3, #20]
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ba:	441a      	add	r2, r3
 80075bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80075c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6a1a      	ldr	r2, [r3, #32]
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d90f      	bls.n	8007604 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80075e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6a1a      	ldr	r2, [r3, #32]
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f4:	1ad2      	subs	r2, r2, r3
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	621a      	str	r2, [r3, #32]
 8007602:	e00e      	b.n	8007622 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2200      	movs	r2, #0
 8007620:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	643b      	str	r3, [r7, #64]	@ 0x40
 800762e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d177      	bne.n	800772e <USB_EPStartXfer+0x85e>
 800763e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	63bb      	str	r3, [r7, #56]	@ 0x38
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007658:	b29b      	uxth	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	4413      	add	r3, r2
 8007660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	011a      	lsls	r2, r3, #4
 8007670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007672:	4413      	add	r3, r2
 8007674:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007678:	637b      	str	r3, [r7, #52]	@ 0x34
 800767a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007684:	b29a      	uxth	r2, r3
 8007686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007688:	801a      	strh	r2, [r3, #0]
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007690:	d921      	bls.n	80076d6 <USB_EPStartXfer+0x806>
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <USB_EPStartXfer+0x7e2>
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ac:	3b01      	subs	r3, #1
 80076ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80076b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076bc:	b29b      	uxth	r3, r3
 80076be:	029b      	lsls	r3, r3, #10
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4313      	orrs	r3, r2
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	e050      	b.n	8007778 <USB_EPStartXfer+0x8a8>
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10a      	bne.n	80076f4 <USB_EPStartXfer+0x824>
 80076de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	e041      	b.n	8007778 <USB_EPStartXfer+0x8a8>
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <USB_EPStartXfer+0x844>
 800770a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770e:	3301      	adds	r3, #1
 8007710:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29a      	uxth	r2, r3
 800771a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771e:	b29b      	uxth	r3, r3
 8007720:	029b      	lsls	r3, r3, #10
 8007722:	b29b      	uxth	r3, r3
 8007724:	4313      	orrs	r3, r2
 8007726:	b29a      	uxth	r2, r3
 8007728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	e024      	b.n	8007778 <USB_EPStartXfer+0x8a8>
 800772e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d11c      	bne.n	8007778 <USB_EPStartXfer+0x8a8>
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800774c:	b29b      	uxth	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007752:	4413      	add	r3, r2
 8007754:	643b      	str	r3, [r7, #64]	@ 0x40
 8007756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	011a      	lsls	r2, r3, #4
 8007764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007766:	4413      	add	r3, r2
 8007768:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800776e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007772:	b29a      	uxth	r2, r3
 8007774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007776:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	895b      	ldrh	r3, [r3, #10]
 8007784:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6959      	ldr	r1, [r3, #20]
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	b29b      	uxth	r3, r3
 800779a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800779e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80077a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077a6:	6800      	ldr	r0, [r0, #0]
 80077a8:	f001 f881 	bl	80088ae <USB_WritePMA>
 80077ac:	e227      	b.n	8007bfe <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80077ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80077e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	441a      	add	r2, r3
 8007802:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007806:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800780a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800780e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007816:	b29b      	uxth	r3, r3
 8007818:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007834:	b29b      	uxth	r3, r3
 8007836:	461a      	mov	r2, r3
 8007838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800783a:	4413      	add	r3, r2
 800783c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800783e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	011a      	lsls	r2, r3, #4
 800784c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800784e:	4413      	add	r3, r2
 8007850:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007854:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785a:	b29a      	uxth	r2, r3
 800785c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800785e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	891b      	ldrh	r3, [r3, #8]
 800786c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6959      	ldr	r1, [r3, #20]
 800787c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007880:	b29b      	uxth	r3, r3
 8007882:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007886:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800788a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800788e:	6800      	ldr	r0, [r0, #0]
 8007890:	f001 f80d 	bl	80088ae <USB_WritePMA>
 8007894:	e1b3      	b.n	8007bfe <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6a1a      	ldr	r2, [r3, #32]
 80078a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a6:	1ad2      	subs	r2, r2, r3
 80078a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80c6 	beq.w	8007a68 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d177      	bne.n	80079e8 <USB_EPStartXfer+0xb18>
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007912:	b29b      	uxth	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007918:	4413      	add	r3, r2
 800791a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	011a      	lsls	r2, r3, #4
 800792a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800792c:	4413      	add	r3, r2
 800792e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007932:	667b      	str	r3, [r7, #100]	@ 0x64
 8007934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800793e:	b29a      	uxth	r2, r3
 8007940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007942:	801a      	strh	r2, [r3, #0]
 8007944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007948:	2b3e      	cmp	r3, #62	@ 0x3e
 800794a:	d921      	bls.n	8007990 <USB_EPStartXfer+0xac0>
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	2b00      	cmp	r3, #0
 8007960:	d104      	bne.n	800796c <USB_EPStartXfer+0xa9c>
 8007962:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007966:	3b01      	subs	r3, #1
 8007968:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800796c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	b29a      	uxth	r2, r3
 8007972:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007976:	b29b      	uxth	r3, r3
 8007978:	029b      	lsls	r3, r3, #10
 800797a:	b29b      	uxth	r3, r3
 800797c:	4313      	orrs	r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007988:	b29a      	uxth	r2, r3
 800798a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	e050      	b.n	8007a32 <USB_EPStartXfer+0xb62>
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <USB_EPStartXfer+0xade>
 8007998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	e041      	b.n	8007a32 <USB_EPStartXfer+0xb62>
 80079ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d004      	beq.n	80079ce <USB_EPStartXfer+0xafe>
 80079c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80079c8:	3301      	adds	r3, #1
 80079ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80079ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80079d8:	b29b      	uxth	r3, r3
 80079da:	029b      	lsls	r3, r3, #10
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4313      	orrs	r3, r2
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	e024      	b.n	8007a32 <USB_EPStartXfer+0xb62>
 80079e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	785b      	ldrb	r3, [r3, #1]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d11c      	bne.n	8007a32 <USB_EPStartXfer+0xb62>
 80079f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a0c:	4413      	add	r3, r2
 8007a0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	011a      	lsls	r2, r3, #4
 8007a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a20:	4413      	add	r3, r2
 8007a22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	895b      	ldrh	r3, [r3, #10]
 8007a3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6959      	ldr	r1, [r3, #20]
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a60:	6800      	ldr	r0, [r0, #0]
 8007a62:	f000 ff24 	bl	80088ae <USB_WritePMA>
 8007a66:	e0ca      	b.n	8007bfe <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d177      	bne.n	8007b68 <USB_EPStartXfer+0xc98>
 8007a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a98:	4413      	add	r3, r2
 8007a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	011a      	lsls	r2, r3, #4
 8007aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aac:	4413      	add	r3, r2
 8007aae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ab2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ac2:	801a      	strh	r2, [r3, #0]
 8007ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007aca:	d921      	bls.n	8007b10 <USB_EPStartXfer+0xc40>
 8007acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad0:	095b      	lsrs	r3, r3, #5
 8007ad2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ada:	f003 031f 	and.w	r3, r3, #31
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d104      	bne.n	8007aec <USB_EPStartXfer+0xc1c>
 8007ae2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007aec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	029b      	lsls	r3, r3, #10
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4313      	orrs	r3, r2
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b0c:	801a      	strh	r2, [r3, #0]
 8007b0e:	e05c      	b.n	8007bca <USB_EPStartXfer+0xcfa>
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <USB_EPStartXfer+0xc5e>
 8007b18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b2a:	801a      	strh	r2, [r3, #0]
 8007b2c:	e04d      	b.n	8007bca <USB_EPStartXfer+0xcfa>
 8007b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <USB_EPStartXfer+0xc7e>
 8007b44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007b48:	3301      	adds	r3, #1
 8007b4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	029b      	lsls	r3, r3, #10
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	e030      	b.n	8007bca <USB_EPStartXfer+0xcfa>
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d128      	bne.n	8007bca <USB_EPStartXfer+0xcfa>
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	461a      	mov	r2, r3
 8007b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	011a      	lsls	r2, r3, #4
 8007bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007bc8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	891b      	ldrh	r3, [r3, #8]
 8007bd6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6959      	ldr	r1, [r3, #20]
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bf0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007bf4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007bf8:	6800      	ldr	r0, [r0, #0]
 8007bfa:	f000 fe58 	bl	80088ae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c24:	817b      	strh	r3, [r7, #10]
 8007c26:	897b      	ldrh	r3, [r7, #10]
 8007c28:	f083 0310 	eor.w	r3, r3, #16
 8007c2c:	817b      	strh	r3, [r7, #10]
 8007c2e:	897b      	ldrh	r3, [r7, #10]
 8007c30:	f083 0320 	eor.w	r3, r3, #32
 8007c34:	817b      	strh	r3, [r7, #10]
 8007c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	441a      	add	r2, r3
 8007c50:	897b      	ldrh	r3, [r7, #10]
 8007c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	8013      	strh	r3, [r2, #0]
 8007c66:	f000 bcde 	b.w	8008626 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	7b1b      	ldrb	r3, [r3, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 80bb 	bne.w	8007df2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	699a      	ldr	r2, [r3, #24]
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d917      	bls.n	8007cc8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699a      	ldr	r2, [r3, #24]
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb8:	1ad2      	subs	r2, r2, r3
 8007cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	619a      	str	r2, [r3, #24]
 8007cc6:	e00e      	b.n	8007ce6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	011a      	lsls	r2, r3, #4
 8007d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d22:	4413      	add	r3, r2
 8007d24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d44:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d46:	d924      	bls.n	8007d92 <USB_EPStartXfer+0xec2>
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4c:	095b      	lsrs	r3, r3, #5
 8007d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d104      	bne.n	8007d68 <USB_EPStartXfer+0xe98>
 8007d5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007d62:	3b01      	subs	r3, #1
 8007d64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	029b      	lsls	r3, r3, #10
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d8c:	801a      	strh	r2, [r3, #0]
 8007d8e:	f000 bc10 	b.w	80085b2 <USB_EPStartXfer+0x16e2>
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10c      	bne.n	8007db4 <USB_EPStartXfer+0xee4>
 8007d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e3fe      	b.n	80085b2 <USB_EPStartXfer+0x16e2>
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d004      	beq.n	8007dd4 <USB_EPStartXfer+0xf04>
 8007dca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007dce:	3301      	adds	r3, #1
 8007dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	029b      	lsls	r3, r3, #10
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	4313      	orrs	r3, r2
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	e3df      	b.n	80085b2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	78db      	ldrb	r3, [r3, #3]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	f040 8218 	bne.w	8008234 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f040 809d 	bne.w	8007f50 <USB_EPStartXfer+0x1080>
 8007e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	011a      	lsls	r2, r3, #4
 8007e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e52:	4413      	add	r3, r2
 8007e54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e6e:	801a      	strh	r2, [r3, #0]
 8007e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e7e:	d92b      	bls.n	8007ed8 <USB_EPStartXfer+0x1008>
 8007e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f003 031f 	and.w	r3, r3, #31
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <USB_EPStartXfer+0xfe0>
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	029b      	lsls	r3, r3, #10
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ed4:	801a      	strh	r2, [r3, #0]
 8007ed6:	e070      	b.n	8007fba <USB_EPStartXfer+0x10ea>
 8007ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10c      	bne.n	8007f02 <USB_EPStartXfer+0x1032>
 8007ee8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007efe:	801a      	strh	r2, [r3, #0]
 8007f00:	e05b      	b.n	8007fba <USB_EPStartXfer+0x10ea>
 8007f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	085b      	lsrs	r3, r3, #1
 8007f10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <USB_EPStartXfer+0x1062>
 8007f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	029b      	lsls	r3, r3, #10
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	4313      	orrs	r3, r2
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f4c:	801a      	strh	r2, [r3, #0]
 8007f4e:	e034      	b.n	8007fba <USB_EPStartXfer+0x10ea>
 8007f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d12c      	bne.n	8007fba <USB_EPStartXfer+0x10ea>
 8007f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f84:	4413      	add	r3, r2
 8007f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	011a      	lsls	r2, r3, #4
 8007f98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 809d 	bne.w	8008114 <USB_EPStartXfer+0x1244>
 8007fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ffe:	4413      	add	r3, r2
 8008000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	011a      	lsls	r2, r3, #4
 8008012:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008016:	4413      	add	r3, r2
 8008018:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800801c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	b29b      	uxth	r3, r3
 8008028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800802c:	b29a      	uxth	r2, r3
 800802e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008032:	801a      	strh	r2, [r3, #0]
 8008034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b3e      	cmp	r3, #62	@ 0x3e
 8008042:	d92b      	bls.n	800809c <USB_EPStartXfer+0x11cc>
 8008044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	095b      	lsrs	r3, r3, #5
 8008052:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 031f 	and.w	r3, r3, #31
 8008066:	2b00      	cmp	r3, #0
 8008068:	d104      	bne.n	8008074 <USB_EPStartXfer+0x11a4>
 800806a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800806e:	3b01      	subs	r3, #1
 8008070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29a      	uxth	r2, r3
 800807c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008080:	b29b      	uxth	r3, r3
 8008082:	029b      	lsls	r3, r3, #10
 8008084:	b29b      	uxth	r3, r3
 8008086:	4313      	orrs	r3, r2
 8008088:	b29b      	uxth	r3, r3
 800808a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008092:	b29a      	uxth	r2, r3
 8008094:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008098:	801a      	strh	r2, [r3, #0]
 800809a:	e069      	b.n	8008170 <USB_EPStartXfer+0x12a0>
 800809c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10c      	bne.n	80080c6 <USB_EPStartXfer+0x11f6>
 80080ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	e054      	b.n	8008170 <USB_EPStartXfer+0x12a0>
 80080c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	085b      	lsrs	r3, r3, #1
 80080d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80080d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d004      	beq.n	80080f6 <USB_EPStartXfer+0x1226>
 80080ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f0:	3301      	adds	r3, #1
 80080f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80080f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008102:	b29b      	uxth	r3, r3
 8008104:	029b      	lsls	r3, r3, #10
 8008106:	b29b      	uxth	r3, r3
 8008108:	4313      	orrs	r3, r2
 800810a:	b29a      	uxth	r2, r3
 800810c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008110:	801a      	strh	r2, [r3, #0]
 8008112:	e02d      	b.n	8008170 <USB_EPStartXfer+0x12a0>
 8008114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d125      	bne.n	8008170 <USB_EPStartXfer+0x12a0>
 8008124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008132:	b29b      	uxth	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800813a:	4413      	add	r3, r2
 800813c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	011a      	lsls	r2, r3, #4
 800814e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008152:	4413      	add	r3, r2
 8008154:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008158:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800815c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	b29a      	uxth	r2, r3
 800816a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800816e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8218 	beq.w	80085b2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80081a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <USB_EPStartXfer+0x12ea>
 80081ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80081b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10d      	bne.n	80081d6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80081ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80081be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f040 81f5 	bne.w	80085b2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80081c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80081cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f040 81ee 	bne.w	80085b2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80081d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081fc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	441a      	add	r2, r3
 800821a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800821e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800822a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800822e:	b29b      	uxth	r3, r3
 8008230:	8013      	strh	r3, [r2, #0]
 8008232:	e1be      	b.n	80085b2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	78db      	ldrb	r3, [r3, #3]
 8008240:	2b01      	cmp	r3, #1
 8008242:	f040 81b4 	bne.w	80085ae <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	429a      	cmp	r2, r3
 8008260:	d917      	bls.n	8008292 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008282:	1ad2      	subs	r2, r2, r3
 8008284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	619a      	str	r2, [r3, #24]
 8008290:	e00e      	b.n	80082b0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80082a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2200      	movs	r2, #0
 80082ae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80082b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	785b      	ldrb	r3, [r3, #1]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 8085 	bne.w	80083cc <USB_EPStartXfer+0x14fc>
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082de:	b29b      	uxth	r3, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082e6:	4413      	add	r3, r2
 80082e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	011a      	lsls	r2, r3, #4
 80082fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082fe:	4413      	add	r3, r2
 8008300:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008304:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008314:	b29a      	uxth	r2, r3
 8008316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800831a:	801a      	strh	r2, [r3, #0]
 800831c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008320:	2b3e      	cmp	r3, #62	@ 0x3e
 8008322:	d923      	bls.n	800836c <USB_EPStartXfer+0x149c>
 8008324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008328:	095b      	lsrs	r3, r3, #5
 800832a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800832e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008332:	f003 031f 	and.w	r3, r3, #31
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <USB_EPStartXfer+0x1474>
 800833a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800833e:	3b01      	subs	r3, #1
 8008340:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29a      	uxth	r2, r3
 800834c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008350:	b29b      	uxth	r3, r3
 8008352:	029b      	lsls	r3, r3, #10
 8008354:	b29b      	uxth	r3, r3
 8008356:	4313      	orrs	r3, r2
 8008358:	b29b      	uxth	r3, r3
 800835a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800835e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008362:	b29a      	uxth	r2, r3
 8008364:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008368:	801a      	strh	r2, [r3, #0]
 800836a:	e060      	b.n	800842e <USB_EPStartXfer+0x155e>
 800836c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10c      	bne.n	800838e <USB_EPStartXfer+0x14be>
 8008374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008384:	b29a      	uxth	r2, r3
 8008386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800838a:	801a      	strh	r2, [r3, #0]
 800838c:	e04f      	b.n	800842e <USB_EPStartXfer+0x155e>
 800838e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <USB_EPStartXfer+0x14de>
 80083a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083a8:	3301      	adds	r3, #1
 80083aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80083ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	029b      	lsls	r3, r3, #10
 80083be:	b29b      	uxth	r3, r3
 80083c0:	4313      	orrs	r3, r2
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083c8:	801a      	strh	r2, [r3, #0]
 80083ca:	e030      	b.n	800842e <USB_EPStartXfer+0x155e>
 80083cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	785b      	ldrb	r3, [r3, #1]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d128      	bne.n	800842e <USB_EPStartXfer+0x155e>
 80083dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80083ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008400:	4413      	add	r3, r2
 8008402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	011a      	lsls	r2, r3, #4
 8008414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008418:	4413      	add	r3, r2
 800841a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800841e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008426:	b29a      	uxth	r2, r3
 8008428:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800842c:	801a      	strh	r2, [r3, #0]
 800842e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800843c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	785b      	ldrb	r3, [r3, #1]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f040 8085 	bne.w	8008558 <USB_EPStartXfer+0x1688>
 800844e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800846a:	b29b      	uxth	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008472:	4413      	add	r3, r2
 8008474:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	011a      	lsls	r2, r3, #4
 8008486:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800848a:	4413      	add	r3, r2
 800848c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008494:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084a6:	801a      	strh	r2, [r3, #0]
 80084a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80084ae:	d923      	bls.n	80084f8 <USB_EPStartXfer+0x1628>
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b4:	095b      	lsrs	r3, r3, #5
 80084b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <USB_EPStartXfer+0x1600>
 80084c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084ca:	3b01      	subs	r3, #1
 80084cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084dc:	b29b      	uxth	r3, r3
 80084de:	029b      	lsls	r3, r3, #10
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	4313      	orrs	r3, r2
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	e05c      	b.n	80085b2 <USB_EPStartXfer+0x16e2>
 80084f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10c      	bne.n	800851a <USB_EPStartXfer+0x164a>
 8008500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008510:	b29a      	uxth	r2, r3
 8008512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e04b      	b.n	80085b2 <USB_EPStartXfer+0x16e2>
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851e:	085b      	lsrs	r3, r3, #1
 8008520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d004      	beq.n	800853a <USB_EPStartXfer+0x166a>
 8008530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008534:	3301      	adds	r3, #1
 8008536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800853a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29a      	uxth	r2, r3
 8008542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008546:	b29b      	uxth	r3, r3
 8008548:	029b      	lsls	r3, r3, #10
 800854a:	b29b      	uxth	r3, r3
 800854c:	4313      	orrs	r3, r2
 800854e:	b29a      	uxth	r2, r3
 8008550:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008554:	801a      	strh	r2, [r3, #0]
 8008556:	e02c      	b.n	80085b2 <USB_EPStartXfer+0x16e2>
 8008558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d124      	bne.n	80085b2 <USB_EPStartXfer+0x16e2>
 8008568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008576:	b29b      	uxth	r3, r3
 8008578:	461a      	mov	r2, r3
 800857a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800857e:	4413      	add	r3, r2
 8008580:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	011a      	lsls	r2, r3, #4
 8008592:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008596:	4413      	add	r3, r2
 8008598:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800859c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085aa:	801a      	strh	r2, [r3, #0]
 80085ac:	e001      	b.n	80085b2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e03a      	b.n	8008628 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80085dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80085e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80085e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80085e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80085ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80085f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80085f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	441a      	add	r2, r3
 800860e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800861a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800861e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008622:	b29b      	uxth	r3, r3
 8008624:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d020      	beq.n	8008686 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800865a:	81bb      	strh	r3, [r7, #12]
 800865c:	89bb      	ldrh	r3, [r7, #12]
 800865e:	f083 0310 	eor.w	r3, r3, #16
 8008662:	81bb      	strh	r3, [r7, #12]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	441a      	add	r2, r3
 800866e:	89bb      	ldrh	r3, [r7, #12]
 8008670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800867c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008680:	b29b      	uxth	r3, r3
 8008682:	8013      	strh	r3, [r2, #0]
 8008684:	e01f      	b.n	80086c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869c:	81fb      	strh	r3, [r7, #14]
 800869e:	89fb      	ldrh	r3, [r7, #14]
 80086a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80086a4:	81fb      	strh	r3, [r7, #14]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	441a      	add	r2, r3
 80086b0:	89fb      	ldrh	r3, [r7, #14]
 80086b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bc80      	pop	{r7}
 80086d0:	4770      	bx	lr

080086d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b087      	sub	sp, #28
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	7b1b      	ldrb	r3, [r3, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f040 809d 	bne.w	8008820 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	785b      	ldrb	r3, [r3, #1]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d04c      	beq.n	8008788 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	823b      	strh	r3, [r7, #16]
 80086fc:	8a3b      	ldrh	r3, [r7, #16]
 80086fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01b      	beq.n	800873e <USB_EPClearStall+0x6c>
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871c:	81fb      	strh	r3, [r7, #14]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	89fb      	ldrh	r3, [r7, #14]
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008736:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	78db      	ldrb	r3, [r3, #3]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d06c      	beq.n	8008820 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29b      	uxth	r3, r3
 8008754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800875c:	81bb      	strh	r3, [r7, #12]
 800875e:	89bb      	ldrh	r3, [r7, #12]
 8008760:	f083 0320 	eor.w	r3, r3, #32
 8008764:	81bb      	strh	r3, [r7, #12]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	441a      	add	r2, r3
 8008770:	89bb      	ldrh	r3, [r7, #12]
 8008772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800877a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800877e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008782:	b29b      	uxth	r3, r3
 8008784:	8013      	strh	r3, [r2, #0]
 8008786:	e04b      	b.n	8008820 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	881b      	ldrh	r3, [r3, #0]
 8008794:	82fb      	strh	r3, [r7, #22]
 8008796:	8afb      	ldrh	r3, [r7, #22]
 8008798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d01b      	beq.n	80087d8 <USB_EPClearStall+0x106>
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087b6:	82bb      	strh	r3, [r7, #20]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	441a      	add	r2, r3
 80087c2:	8abb      	ldrh	r3, [r7, #20]
 80087c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ee:	827b      	strh	r3, [r7, #18]
 80087f0:	8a7b      	ldrh	r3, [r7, #18]
 80087f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80087f6:	827b      	strh	r3, [r7, #18]
 80087f8:	8a7b      	ldrh	r3, [r7, #18]
 80087fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80087fe:	827b      	strh	r3, [r7, #18]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	441a      	add	r2, r3
 800880a:	8a7b      	ldrh	r3, [r7, #18]
 800880c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800881c:	b29b      	uxth	r3, r3
 800881e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	bc80      	pop	{r7}
 800882a:	4770      	bx	lr

0800882c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2280      	movs	r2, #128	@ 0x80
 8008842:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr

08008852 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	bc80      	pop	{r7}
 8008864:	4770      	bx	lr

08008866 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	bc80      	pop	{r7}
 8008878:	4770      	bx	lr

0800887a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008888:	b29b      	uxth	r3, r3
 800888a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800888c:	68fb      	ldr	r3, [r7, #12]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	bc80      	pop	{r7}
 8008896:	4770      	bx	lr

08008898 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr

080088ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b08b      	sub	sp, #44	@ 0x2c
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	4611      	mov	r1, r2
 80088ba:	461a      	mov	r2, r3
 80088bc:	460b      	mov	r3, r1
 80088be:	80fb      	strh	r3, [r7, #6]
 80088c0:	4613      	mov	r3, r2
 80088c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80088c4:	88bb      	ldrh	r3, [r7, #4]
 80088c6:	3301      	adds	r3, #1
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088d4:	88fb      	ldrh	r3, [r7, #6]
 80088d6:	005a      	lsls	r2, r3, #1
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088e0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088e6:	e01e      	b.n	8008926 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	3301      	adds	r3, #1
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	021b      	lsls	r3, r3, #8
 80088f6:	b21a      	sxth	r2, r3
 80088f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	b21b      	sxth	r3, r3
 8008900:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	8a7a      	ldrh	r2, [r7, #18]
 8008906:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	3302      	adds	r3, #2
 800890c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	3302      	adds	r3, #2
 8008912:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	3301      	adds	r3, #1
 8008918:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	3301      	adds	r3, #1
 800891e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	3b01      	subs	r3, #1
 8008924:	627b      	str	r3, [r7, #36]	@ 0x24
 8008926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1dd      	bne.n	80088e8 <USB_WritePMA+0x3a>
  }
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	372c      	adds	r7, #44	@ 0x2c
 8008932:	46bd      	mov	sp, r7
 8008934:	bc80      	pop	{r7}
 8008936:	4770      	bx	lr

08008938 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008938:	b480      	push	{r7}
 800893a:	b08b      	sub	sp, #44	@ 0x2c
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	4611      	mov	r1, r2
 8008944:	461a      	mov	r2, r3
 8008946:	460b      	mov	r3, r1
 8008948:	80fb      	strh	r3, [r7, #6]
 800894a:	4613      	mov	r3, r2
 800894c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800894e:	88bb      	ldrh	r3, [r7, #4]
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	b29b      	uxth	r3, r3
 8008954:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	005a      	lsls	r2, r3, #1
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800896a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008970:	e01b      	b.n	80089aa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	3302      	adds	r3, #2
 800897e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	b2da      	uxtb	r2, r3
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	3301      	adds	r3, #1
 800898c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	b2da      	uxtb	r2, r3
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	3301      	adds	r3, #1
 800899c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	3302      	adds	r3, #2
 80089a2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80089a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a6:	3b01      	subs	r3, #1
 80089a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e0      	bne.n	8008972 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80089b0:	88bb      	ldrh	r3, [r7, #4]
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d007      	beq.n	80089cc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	701a      	strb	r2, [r3, #0]
  }
}
 80089cc:	bf00      	nop
 80089ce:	372c      	adds	r7, #44	@ 0x2c
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr

080089d6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	7c1b      	ldrb	r3, [r3, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d115      	bne.n	8008a1a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089f2:	2202      	movs	r2, #2
 80089f4:	2181      	movs	r1, #129	@ 0x81
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 fe81 	bl	800a6fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a06:	2202      	movs	r2, #2
 8008a08:	2101      	movs	r1, #1
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 fe77 	bl	800a6fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008a18:	e012      	b.n	8008a40 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a1a:	2340      	movs	r3, #64	@ 0x40
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	2181      	movs	r1, #129	@ 0x81
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 fe6c 	bl	800a6fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a2c:	2340      	movs	r3, #64	@ 0x40
 8008a2e:	2202      	movs	r2, #2
 8008a30:	2101      	movs	r1, #1
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 fe63 	bl	800a6fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a40:	2308      	movs	r3, #8
 8008a42:	2203      	movs	r2, #3
 8008a44:	2182      	movs	r1, #130	@ 0x82
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fe59 	bl	800a6fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a52:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008a56:	f001 ff79 	bl	800a94c <USBD_static_malloc>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d102      	bne.n	8008a72 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	73fb      	strb	r3, [r7, #15]
 8008a70:	e026      	b.n	8008ac0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a78:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	7c1b      	ldrb	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d109      	bne.n	8008ab0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 ff18 	bl	800a8de <USBD_LL_PrepareReceive>
 8008aae:	e007      	b.n	8008ac0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ab6:	2340      	movs	r3, #64	@ 0x40
 8008ab8:	2101      	movs	r1, #1
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 ff0f 	bl	800a8de <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ada:	2181      	movs	r1, #129	@ 0x81
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 fe34 	bl	800a74a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ae8:	2101      	movs	r1, #1
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 fe2d 	bl	800a74a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008af8:	2182      	movs	r1, #130	@ 0x82
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fe25 	bl	800a74a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00e      	beq.n	8008b2e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 ff1f 	bl	800a964 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b48:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d039      	beq.n	8008bd6 <USBD_CDC_Setup+0x9e>
 8008b62:	2b20      	cmp	r3, #32
 8008b64:	d17f      	bne.n	8008c66 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	88db      	ldrh	r3, [r3, #6]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d029      	beq.n	8008bc2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	b25b      	sxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	da11      	bge.n	8008b9c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008b84:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	88d2      	ldrh	r2, [r2, #6]
 8008b8a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b8c:	6939      	ldr	r1, [r7, #16]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	88db      	ldrh	r3, [r3, #6]
 8008b92:	461a      	mov	r2, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 fa05 	bl	8009fa4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008b9a:	e06b      	b.n	8008c74 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	785a      	ldrb	r2, [r3, #1]
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	88db      	ldrh	r3, [r3, #6]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008bb2:	6939      	ldr	r1, [r7, #16]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	88db      	ldrh	r3, [r3, #6]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 fa20 	bl	800a000 <USBD_CtlPrepareRx>
      break;
 8008bc0:	e058      	b.n	8008c74 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	7850      	ldrb	r0, [r2, #1]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	4798      	blx	r3
      break;
 8008bd4:	e04e      	b.n	8008c74 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	785b      	ldrb	r3, [r3, #1]
 8008bda:	2b0b      	cmp	r3, #11
 8008bdc:	d02e      	beq.n	8008c3c <USBD_CDC_Setup+0x104>
 8008bde:	2b0b      	cmp	r3, #11
 8008be0:	dc38      	bgt.n	8008c54 <USBD_CDC_Setup+0x11c>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <USBD_CDC_Setup+0xb4>
 8008be6:	2b0a      	cmp	r3, #10
 8008be8:	d014      	beq.n	8008c14 <USBD_CDC_Setup+0xdc>
 8008bea:	e033      	b.n	8008c54 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d107      	bne.n	8008c06 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008bf6:	f107 030c 	add.w	r3, r7, #12
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 f9d0 	bl	8009fa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c04:	e02e      	b.n	8008c64 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 f961 	bl	8009ed0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	75fb      	strb	r3, [r7, #23]
          break;
 8008c12:	e027      	b.n	8008c64 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d107      	bne.n	8008c2e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c1e:	f107 030f 	add.w	r3, r7, #15
 8008c22:	2201      	movs	r2, #1
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 f9bc 	bl	8009fa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c2c:	e01a      	b.n	8008c64 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 f94d 	bl	8009ed0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c36:	2302      	movs	r3, #2
 8008c38:	75fb      	strb	r3, [r7, #23]
          break;
 8008c3a:	e013      	b.n	8008c64 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d00d      	beq.n	8008c62 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 f941 	bl	8009ed0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c52:	e006      	b.n	8008c62 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 f93a 	bl	8009ed0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8008c60:	e000      	b.n	8008c64 <USBD_CDC_Setup+0x12c>
          break;
 8008c62:	bf00      	nop
      }
      break;
 8008c64:	e006      	b.n	8008c74 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 f931 	bl	8009ed0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c6e:	2302      	movs	r3, #2
 8008c70:	75fb      	strb	r3, [r7, #23]
      break;
 8008c72:	bf00      	nop
  }

  return ret;
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c90:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c98:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d03a      	beq.n	8008d1a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ca4:	78fa      	ldrb	r2, [r7, #3]
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	440b      	add	r3, r1
 8008cb2:	331c      	adds	r3, #28
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d029      	beq.n	8008d0e <USBD_CDC_DataIn+0x90>
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	331c      	adds	r3, #28
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	78f9      	ldrb	r1, [r7, #3]
 8008cce:	68b8      	ldr	r0, [r7, #8]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	440b      	add	r3, r1
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	4403      	add	r3, r0
 8008cda:	3320      	adds	r3, #32
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ce2:	fb01 f303 	mul.w	r3, r1, r3
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d110      	bne.n	8008d0e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	331c      	adds	r3, #28
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d00:	78f9      	ldrb	r1, [r7, #3]
 8008d02:	2300      	movs	r3, #0
 8008d04:	2200      	movs	r2, #0
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fdc6 	bl	800a898 <USBD_LL_Transmit>
 8008d0c:	e003      	b.n	8008d16 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e000      	b.n	8008d1c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008d1a:	2302      	movs	r3, #2
  }
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d38:	78fb      	ldrb	r3, [r7, #3]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 fdf1 	bl	800a924 <USBD_LL_GetRxDataSize>
 8008d42:	4602      	mov	r2, r0
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00d      	beq.n	8008d70 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4798      	blx	r3

    return USBD_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e000      	b.n	8008d72 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d70:	2302      	movs	r3, #2
  }
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d88:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d014      	beq.n	8008dbe <USBD_CDC_EP0_RxReady+0x44>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008d9a:	2bff      	cmp	r3, #255	@ 0xff
 8008d9c:	d00f      	beq.n	8008dbe <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008dac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008db4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	22ff      	movs	r2, #255	@ 0xff
 8008dba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2243      	movs	r2, #67	@ 0x43
 8008dd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008dd6:	4b03      	ldr	r3, [pc, #12]	@ (8008de4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	20000118 	.word	0x20000118

08008de8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2243      	movs	r2, #67	@ 0x43
 8008df4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008df6:	4b03      	ldr	r3, [pc, #12]	@ (8008e04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bc80      	pop	{r7}
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	200000d4 	.word	0x200000d4

08008e08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2243      	movs	r2, #67	@ 0x43
 8008e14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008e16:	4b03      	ldr	r3, [pc, #12]	@ (8008e24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	2000015c 	.word	0x2000015c

08008e28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	220a      	movs	r2, #10
 8008e34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008e36:	4b03      	ldr	r3, [pc, #12]	@ (8008e44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bc80      	pop	{r7}
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20000090 	.word	0x20000090

08008e48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008e52:	2302      	movs	r3, #2
 8008e54:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d005      	beq.n	8008e68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bc80      	pop	{r7}
 8008e72:	4770      	bx	lr

08008e74 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e88:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e92:	88fa      	ldrh	r2, [r7, #6]
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bc80      	pop	{r7}
 8008ea4:	4770      	bx	lr

08008ea6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b085      	sub	sp, #20
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr

08008ecc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01c      	beq.n	8008f20 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d115      	bne.n	8008f1c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	2181      	movs	r1, #129	@ 0x81
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fcc0 	bl	800a898 <USBD_LL_Transmit>

      return USBD_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e002      	b.n	8008f22 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008f20:	2302      	movs	r3, #2
  }
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d017      	beq.n	8008f74 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	7c1b      	ldrb	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d109      	bne.n	8008f60 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f56:	2101      	movs	r1, #1
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 fcc0 	bl	800a8de <USBD_LL_PrepareReceive>
 8008f5e:	e007      	b.n	8008f70 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f66:	2340      	movs	r3, #64	@ 0x40
 8008f68:	2101      	movs	r1, #1
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f001 fcb7 	bl	800a8de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	e000      	b.n	8008f76 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008f74:	2302      	movs	r3, #2
  }
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f92:	2302      	movs	r3, #2
 8008f94:	e01a      	b.n	8008fcc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d003      	beq.n	8008fa8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	79fa      	ldrb	r2, [r7, #7]
 8008fc2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f001 fb25 	bl	800a614 <USBD_LL_Init>

  return USBD_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d006      	beq.n	8008ff6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
 8008ff4:	e001      	b.n	8008ffa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	bc80      	pop	{r7}
 8009004:	4770      	bx	lr

08009006 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f001 fb5a 	bl	800a6c8 <USBD_LL_Start>

  return USBD_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	bc80      	pop	{r7}
 8009030:	4770      	bx	lr

08009032 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	460b      	mov	r3, r1
 800903c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800903e:	2302      	movs	r3, #2
 8009040:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00c      	beq.n	8009066 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	78fa      	ldrb	r2, [r7, #3]
 8009056:	4611      	mov	r1, r2
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	4798      	blx	r3
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009066:	7bfb      	ldrb	r3, [r7, #15]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	78fa      	ldrb	r2, [r7, #3]
 8009086:	4611      	mov	r1, r2
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	4798      	blx	r3

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 fed8 	bl	8009e5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80090bc:	461a      	mov	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80090ca:	f003 031f 	and.w	r3, r3, #31
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d016      	beq.n	8009100 <USBD_LL_SetupStage+0x6a>
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d81c      	bhi.n	8009110 <USBD_LL_SetupStage+0x7a>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <USBD_LL_SetupStage+0x4a>
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d008      	beq.n	80090f0 <USBD_LL_SetupStage+0x5a>
 80090de:	e017      	b.n	8009110 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f9cb 	bl	8009484 <USBD_StdDevReq>
      break;
 80090ee:	e01a      	b.n	8009126 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fa2d 	bl	8009558 <USBD_StdItfReq>
      break;
 80090fe:	e012      	b.n	8009126 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa6d 	bl	80095e8 <USBD_StdEPReq>
      break;
 800910e:	e00a      	b.n	8009126 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009116:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800911a:	b2db      	uxtb	r3, r3
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fb32 	bl	800a788 <USBD_LL_StallEP>
      break;
 8009124:	bf00      	nop
  }

  return USBD_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	460b      	mov	r3, r1
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800913e:	7afb      	ldrb	r3, [r7, #11]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d14b      	bne.n	80091dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800914a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009152:	2b03      	cmp	r3, #3
 8009154:	d134      	bne.n	80091c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	429a      	cmp	r2, r3
 8009160:	d919      	bls.n	8009196 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009178:	429a      	cmp	r2, r3
 800917a:	d203      	bcs.n	8009184 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009180:	b29b      	uxth	r3, r3
 8009182:	e002      	b.n	800918a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009188:	b29b      	uxth	r3, r3
 800918a:	461a      	mov	r2, r3
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 ff54 	bl	800a03c <USBD_CtlContinueRx>
 8009194:	e038      	b.n	8009208 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00a      	beq.n	80091b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d105      	bne.n	80091b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 ff51 	bl	800a060 <USBD_CtlSendStatus>
 80091be:	e023      	b.n	8009208 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091c6:	2b05      	cmp	r3, #5
 80091c8:	d11e      	bne.n	8009208 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80091d2:	2100      	movs	r1, #0
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f001 fad7 	bl	800a788 <USBD_LL_StallEP>
 80091da:	e015      	b.n	8009208 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00d      	beq.n	8009204 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d108      	bne.n	8009204 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	7afa      	ldrb	r2, [r7, #11]
 80091fc:	4611      	mov	r1, r2
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	4798      	blx	r3
 8009202:	e001      	b.n	8009208 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009204:	2302      	movs	r3, #2
 8009206:	e000      	b.n	800920a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b086      	sub	sp, #24
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	460b      	mov	r3, r1
 800921c:	607a      	str	r2, [r7, #4]
 800921e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009220:	7afb      	ldrb	r3, [r7, #11]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d17f      	bne.n	8009326 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3314      	adds	r3, #20
 800922a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009232:	2b02      	cmp	r3, #2
 8009234:	d15c      	bne.n	80092f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	429a      	cmp	r2, r3
 8009240:	d915      	bls.n	800926e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	b29b      	uxth	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 febe 	bl	8009fdc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009260:	2300      	movs	r3, #0
 8009262:	2200      	movs	r2, #0
 8009264:	2100      	movs	r1, #0
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f001 fb39 	bl	800a8de <USBD_LL_PrepareReceive>
 800926c:	e04e      	b.n	800930c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	6912      	ldr	r2, [r2, #16]
 8009276:	fbb3 f1f2 	udiv	r1, r3, r2
 800927a:	fb01 f202 	mul.w	r2, r1, r2
 800927e:	1a9b      	subs	r3, r3, r2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d11c      	bne.n	80092be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800928c:	429a      	cmp	r2, r3
 800928e:	d316      	bcc.n	80092be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800929a:	429a      	cmp	r2, r3
 800929c:	d20f      	bcs.n	80092be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800929e:	2200      	movs	r2, #0
 80092a0:	2100      	movs	r1, #0
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fe9a 	bl	8009fdc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092b0:	2300      	movs	r3, #0
 80092b2:	2200      	movs	r2, #0
 80092b4:	2100      	movs	r1, #0
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f001 fb11 	bl	800a8de <USBD_LL_PrepareReceive>
 80092bc:	e026      	b.n	800930c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d105      	bne.n	80092e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80092e0:	2180      	movs	r1, #128	@ 0x80
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f001 fa50 	bl	800a788 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fecc 	bl	800a086 <USBD_CtlReceiveStatus>
 80092ee:	e00d      	b.n	800930c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d004      	beq.n	8009304 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009300:	2b00      	cmp	r3, #0
 8009302:	d103      	bne.n	800930c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009304:	2180      	movs	r1, #128	@ 0x80
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f001 fa3e 	bl	800a788 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009312:	2b01      	cmp	r3, #1
 8009314:	d11d      	bne.n	8009352 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7ff fe81 	bl	800901e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009324:	e015      	b.n	8009352 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00d      	beq.n	800934e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009338:	2b03      	cmp	r3, #3
 800933a:	d108      	bne.n	800934e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	7afa      	ldrb	r2, [r7, #11]
 8009346:	4611      	mov	r1, r2
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	4798      	blx	r3
 800934c:	e001      	b.n	8009352 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800934e:	2302      	movs	r3, #2
 8009350:	e000      	b.n	8009354 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009364:	2340      	movs	r3, #64	@ 0x40
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 f9c7 	bl	800a6fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2240      	movs	r2, #64	@ 0x40
 800937c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009380:	2340      	movs	r3, #64	@ 0x40
 8009382:	2200      	movs	r2, #0
 8009384:	2180      	movs	r1, #128	@ 0x80
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 f9b9 	bl	800a6fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2240      	movs	r2, #64	@ 0x40
 8009396:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d009      	beq.n	80093d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6852      	ldr	r2, [r2, #4]
 80093cc:	b2d2      	uxtb	r2, r2
 80093ce:	4611      	mov	r1, r2
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	4798      	blx	r3
  }

  return USBD_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	460b      	mov	r3, r1
 80093e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	78fa      	ldrb	r2, [r7, #3]
 80093ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr

080093fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2204      	movs	r2, #4
 8009414:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	bc80      	pop	{r7}
 8009422:	4770      	bx	lr

08009424 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009432:	2b04      	cmp	r3, #4
 8009434:	d105      	bne.n	8009442 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	bc80      	pop	{r7}
 800944c:	4770      	bx	lr

0800944e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800945c:	2b03      	cmp	r3, #3
 800945e:	d10b      	bne.n	8009478 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800949a:	2b40      	cmp	r3, #64	@ 0x40
 800949c:	d005      	beq.n	80094aa <USBD_StdDevReq+0x26>
 800949e:	2b40      	cmp	r3, #64	@ 0x40
 80094a0:	d84f      	bhi.n	8009542 <USBD_StdDevReq+0xbe>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d009      	beq.n	80094ba <USBD_StdDevReq+0x36>
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d14b      	bne.n	8009542 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	4798      	blx	r3
      break;
 80094b8:	e048      	b.n	800954c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	785b      	ldrb	r3, [r3, #1]
 80094be:	2b09      	cmp	r3, #9
 80094c0:	d839      	bhi.n	8009536 <USBD_StdDevReq+0xb2>
 80094c2:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <USBD_StdDevReq+0x44>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	08009519 	.word	0x08009519
 80094cc:	0800952d 	.word	0x0800952d
 80094d0:	08009537 	.word	0x08009537
 80094d4:	08009523 	.word	0x08009523
 80094d8:	08009537 	.word	0x08009537
 80094dc:	080094fb 	.word	0x080094fb
 80094e0:	080094f1 	.word	0x080094f1
 80094e4:	08009537 	.word	0x08009537
 80094e8:	0800950f 	.word	0x0800950f
 80094ec:	08009505 	.word	0x08009505
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f9dc 	bl	80098b0 <USBD_GetDescriptor>
          break;
 80094f8:	e022      	b.n	8009540 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fb3f 	bl	8009b80 <USBD_SetAddress>
          break;
 8009502:	e01d      	b.n	8009540 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fb7e 	bl	8009c08 <USBD_SetConfig>
          break;
 800950c:	e018      	b.n	8009540 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fc07 	bl	8009d24 <USBD_GetConfig>
          break;
 8009516:	e013      	b.n	8009540 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fc37 	bl	8009d8e <USBD_GetStatus>
          break;
 8009520:	e00e      	b.n	8009540 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fc65 	bl	8009df4 <USBD_SetFeature>
          break;
 800952a:	e009      	b.n	8009540 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fc74 	bl	8009e1c <USBD_ClrFeature>
          break;
 8009534:	e004      	b.n	8009540 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fcc9 	bl	8009ed0 <USBD_CtlError>
          break;
 800953e:	bf00      	nop
      }
      break;
 8009540:	e004      	b.n	800954c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fcc3 	bl	8009ed0 <USBD_CtlError>
      break;
 800954a:	bf00      	nop
  }

  return ret;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop

08009558 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800956e:	2b40      	cmp	r3, #64	@ 0x40
 8009570:	d005      	beq.n	800957e <USBD_StdItfReq+0x26>
 8009572:	2b40      	cmp	r3, #64	@ 0x40
 8009574:	d82e      	bhi.n	80095d4 <USBD_StdItfReq+0x7c>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <USBD_StdItfReq+0x26>
 800957a:	2b20      	cmp	r3, #32
 800957c:	d12a      	bne.n	80095d4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009584:	3b01      	subs	r3, #1
 8009586:	2b02      	cmp	r3, #2
 8009588:	d81d      	bhi.n	80095c6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	889b      	ldrh	r3, [r3, #4]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b01      	cmp	r3, #1
 8009592:	d813      	bhi.n	80095bc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	4798      	blx	r3
 80095a2:	4603      	mov	r3, r0
 80095a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	88db      	ldrh	r3, [r3, #6]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d110      	bne.n	80095d0 <USBD_StdItfReq+0x78>
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10d      	bne.n	80095d0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fd53 	bl	800a060 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095ba:	e009      	b.n	80095d0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fc86 	bl	8009ed0 <USBD_CtlError>
          break;
 80095c4:	e004      	b.n	80095d0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fc81 	bl	8009ed0 <USBD_CtlError>
          break;
 80095ce:	e000      	b.n	80095d2 <USBD_StdItfReq+0x7a>
          break;
 80095d0:	bf00      	nop
      }
      break;
 80095d2:	e004      	b.n	80095de <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fc7a 	bl	8009ed0 <USBD_CtlError>
      break;
 80095dc:	bf00      	nop
  }

  return USBD_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	889b      	ldrh	r3, [r3, #4]
 80095fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009604:	2b40      	cmp	r3, #64	@ 0x40
 8009606:	d007      	beq.n	8009618 <USBD_StdEPReq+0x30>
 8009608:	2b40      	cmp	r3, #64	@ 0x40
 800960a:	f200 8146 	bhi.w	800989a <USBD_StdEPReq+0x2b2>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00a      	beq.n	8009628 <USBD_StdEPReq+0x40>
 8009612:	2b20      	cmp	r3, #32
 8009614:	f040 8141 	bne.w	800989a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
      break;
 8009626:	e13d      	b.n	80098a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009630:	2b20      	cmp	r3, #32
 8009632:	d10a      	bne.n	800964a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
 8009642:	4603      	mov	r3, r0
 8009644:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	e12d      	b.n	80098a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	2b03      	cmp	r3, #3
 8009650:	d007      	beq.n	8009662 <USBD_StdEPReq+0x7a>
 8009652:	2b03      	cmp	r3, #3
 8009654:	f300 811b 	bgt.w	800988e <USBD_StdEPReq+0x2a6>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d072      	beq.n	8009742 <USBD_StdEPReq+0x15a>
 800965c:	2b01      	cmp	r3, #1
 800965e:	d03a      	beq.n	80096d6 <USBD_StdEPReq+0xee>
 8009660:	e115      	b.n	800988e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009668:	2b02      	cmp	r3, #2
 800966a:	d002      	beq.n	8009672 <USBD_StdEPReq+0x8a>
 800966c:	2b03      	cmp	r3, #3
 800966e:	d015      	beq.n	800969c <USBD_StdEPReq+0xb4>
 8009670:	e02b      	b.n	80096ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <USBD_StdEPReq+0xaa>
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	2b80      	cmp	r3, #128	@ 0x80
 800967c:	d009      	beq.n	8009692 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f001 f880 	bl	800a788 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009688:	2180      	movs	r1, #128	@ 0x80
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 f87c 	bl	800a788 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009690:	e020      	b.n	80096d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc1b 	bl	8009ed0 <USBD_CtlError>
              break;
 800969a:	e01b      	b.n	80096d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	885b      	ldrh	r3, [r3, #2]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10e      	bne.n	80096c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00b      	beq.n	80096c2 <USBD_StdEPReq+0xda>
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	2b80      	cmp	r3, #128	@ 0x80
 80096ae:	d008      	beq.n	80096c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	88db      	ldrh	r3, [r3, #6]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 f863 	bl	800a788 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fccc 	bl	800a060 <USBD_CtlSendStatus>

              break;
 80096c8:	e004      	b.n	80096d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fbff 	bl	8009ed0 <USBD_CtlError>
              break;
 80096d2:	bf00      	nop
          }
          break;
 80096d4:	e0e0      	b.n	8009898 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d002      	beq.n	80096e6 <USBD_StdEPReq+0xfe>
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d015      	beq.n	8009710 <USBD_StdEPReq+0x128>
 80096e4:	e026      	b.n	8009734 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00c      	beq.n	8009706 <USBD_StdEPReq+0x11e>
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	2b80      	cmp	r3, #128	@ 0x80
 80096f0:	d009      	beq.n	8009706 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 f846 	bl	800a788 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096fc:	2180      	movs	r1, #128	@ 0x80
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 f842 	bl	800a788 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009704:	e01c      	b.n	8009740 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fbe1 	bl	8009ed0 <USBD_CtlError>
              break;
 800970e:	e017      	b.n	8009740 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	885b      	ldrh	r3, [r3, #2]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d112      	bne.n	800973e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800971e:	2b00      	cmp	r3, #0
 8009720:	d004      	beq.n	800972c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 f84d 	bl	800a7c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fc97 	bl	800a060 <USBD_CtlSendStatus>
              }
              break;
 8009732:	e004      	b.n	800973e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fbca 	bl	8009ed0 <USBD_CtlError>
              break;
 800973c:	e000      	b.n	8009740 <USBD_StdEPReq+0x158>
              break;
 800973e:	bf00      	nop
          }
          break;
 8009740:	e0aa      	b.n	8009898 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009748:	2b02      	cmp	r3, #2
 800974a:	d002      	beq.n	8009752 <USBD_StdEPReq+0x16a>
 800974c:	2b03      	cmp	r3, #3
 800974e:	d032      	beq.n	80097b6 <USBD_StdEPReq+0x1ce>
 8009750:	e097      	b.n	8009882 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d007      	beq.n	8009768 <USBD_StdEPReq+0x180>
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	2b80      	cmp	r3, #128	@ 0x80
 800975c:	d004      	beq.n	8009768 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fbb5 	bl	8009ed0 <USBD_CtlError>
                break;
 8009766:	e091      	b.n	800988c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800976c:	2b00      	cmp	r3, #0
 800976e:	da0b      	bge.n	8009788 <USBD_StdEPReq+0x1a0>
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	3310      	adds	r3, #16
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	4413      	add	r3, r2
 8009784:	3304      	adds	r3, #4
 8009786:	e00b      	b.n	80097a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	4413      	add	r3, r2
 800979e:	3304      	adds	r3, #4
 80097a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2202      	movs	r2, #2
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fbf8 	bl	8009fa4 <USBD_CtlSendData>
              break;
 80097b4:	e06a      	b.n	800988c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	da11      	bge.n	80097e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	f003 020f 	and.w	r2, r3, #15
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	440b      	add	r3, r1
 80097d0:	3318      	adds	r3, #24
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d117      	bne.n	8009808 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fb78 	bl	8009ed0 <USBD_CtlError>
                  break;
 80097e0:	e054      	b.n	800988c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
 80097e4:	f003 020f 	and.w	r2, r3, #15
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	440b      	add	r3, r1
 80097f4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d104      	bne.n	8009808 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fb65 	bl	8009ed0 <USBD_CtlError>
                  break;
 8009806:	e041      	b.n	800988c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980c:	2b00      	cmp	r3, #0
 800980e:	da0b      	bge.n	8009828 <USBD_StdEPReq+0x240>
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	3310      	adds	r3, #16
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	4413      	add	r3, r2
 8009824:	3304      	adds	r3, #4
 8009826:	e00b      	b.n	8009840 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	4413      	add	r3, r2
 800983e:	3304      	adds	r3, #4
 8009840:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <USBD_StdEPReq+0x266>
 8009848:	7bbb      	ldrb	r3, [r7, #14]
 800984a:	2b80      	cmp	r3, #128	@ 0x80
 800984c:	d103      	bne.n	8009856 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e00e      	b.n	8009874 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 ffd2 	bl	800a804 <USBD_LL_IsStallEP>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2201      	movs	r2, #1
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e002      	b.n	8009874 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2202      	movs	r2, #2
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fb92 	bl	8009fa4 <USBD_CtlSendData>
              break;
 8009880:	e004      	b.n	800988c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fb23 	bl	8009ed0 <USBD_CtlError>
              break;
 800988a:	bf00      	nop
          }
          break;
 800988c:	e004      	b.n	8009898 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fb1d 	bl	8009ed0 <USBD_CtlError>
          break;
 8009896:	bf00      	nop
      }
      break;
 8009898:	e004      	b.n	80098a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fb17 	bl	8009ed0 <USBD_CtlError>
      break;
 80098a2:	bf00      	nop
  }

  return ret;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	885b      	ldrh	r3, [r3, #2]
 80098ca:	0a1b      	lsrs	r3, r3, #8
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	3b01      	subs	r3, #1
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	f200 8128 	bhi.w	8009b26 <USBD_GetDescriptor+0x276>
 80098d6:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <USBD_GetDescriptor+0x2c>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080098f9 	.word	0x080098f9
 80098e0:	08009911 	.word	0x08009911
 80098e4:	08009951 	.word	0x08009951
 80098e8:	08009b27 	.word	0x08009b27
 80098ec:	08009b27 	.word	0x08009b27
 80098f0:	08009ac7 	.word	0x08009ac7
 80098f4:	08009af3 	.word	0x08009af3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	7c12      	ldrb	r2, [r2, #16]
 8009904:	f107 0108 	add.w	r1, r7, #8
 8009908:	4610      	mov	r0, r2
 800990a:	4798      	blx	r3
 800990c:	60f8      	str	r0, [r7, #12]
      break;
 800990e:	e112      	b.n	8009b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	7c1b      	ldrb	r3, [r3, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10d      	bne.n	8009934 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800991e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009920:	f107 0208 	add.w	r2, r7, #8
 8009924:	4610      	mov	r0, r2
 8009926:	4798      	blx	r3
 8009928:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3301      	adds	r3, #1
 800992e:	2202      	movs	r2, #2
 8009930:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009932:	e100      	b.n	8009b36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800993a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993c:	f107 0208 	add.w	r2, r7, #8
 8009940:	4610      	mov	r0, r2
 8009942:	4798      	blx	r3
 8009944:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3301      	adds	r3, #1
 800994a:	2202      	movs	r2, #2
 800994c:	701a      	strb	r2, [r3, #0]
      break;
 800994e:	e0f2      	b.n	8009b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	885b      	ldrh	r3, [r3, #2]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b05      	cmp	r3, #5
 8009958:	f200 80ac 	bhi.w	8009ab4 <USBD_GetDescriptor+0x204>
 800995c:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <USBD_GetDescriptor+0xb4>)
 800995e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009962:	bf00      	nop
 8009964:	0800997d 	.word	0x0800997d
 8009968:	080099b1 	.word	0x080099b1
 800996c:	080099e5 	.word	0x080099e5
 8009970:	08009a19 	.word	0x08009a19
 8009974:	08009a4d 	.word	0x08009a4d
 8009978:	08009a81 	.word	0x08009a81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00b      	beq.n	80099a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	7c12      	ldrb	r2, [r2, #16]
 8009994:	f107 0108 	add.w	r1, r7, #8
 8009998:	4610      	mov	r0, r2
 800999a:	4798      	blx	r3
 800999c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800999e:	e091      	b.n	8009ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fa94 	bl	8009ed0 <USBD_CtlError>
            err++;
 80099a8:	7afb      	ldrb	r3, [r7, #11]
 80099aa:	3301      	adds	r3, #1
 80099ac:	72fb      	strb	r3, [r7, #11]
          break;
 80099ae:	e089      	b.n	8009ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00b      	beq.n	80099d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	7c12      	ldrb	r2, [r2, #16]
 80099c8:	f107 0108 	add.w	r1, r7, #8
 80099cc:	4610      	mov	r0, r2
 80099ce:	4798      	blx	r3
 80099d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099d2:	e077      	b.n	8009ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fa7a 	bl	8009ed0 <USBD_CtlError>
            err++;
 80099dc:	7afb      	ldrb	r3, [r7, #11]
 80099de:	3301      	adds	r3, #1
 80099e0:	72fb      	strb	r3, [r7, #11]
          break;
 80099e2:	e06f      	b.n	8009ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00b      	beq.n	8009a08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	7c12      	ldrb	r2, [r2, #16]
 80099fc:	f107 0108 	add.w	r1, r7, #8
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a06:	e05d      	b.n	8009ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fa60 	bl	8009ed0 <USBD_CtlError>
            err++;
 8009a10:	7afb      	ldrb	r3, [r7, #11]
 8009a12:	3301      	adds	r3, #1
 8009a14:	72fb      	strb	r3, [r7, #11]
          break;
 8009a16:	e055      	b.n	8009ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00b      	beq.n	8009a3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	7c12      	ldrb	r2, [r2, #16]
 8009a30:	f107 0108 	add.w	r1, r7, #8
 8009a34:	4610      	mov	r0, r2
 8009a36:	4798      	blx	r3
 8009a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a3a:	e043      	b.n	8009ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fa46 	bl	8009ed0 <USBD_CtlError>
            err++;
 8009a44:	7afb      	ldrb	r3, [r7, #11]
 8009a46:	3301      	adds	r3, #1
 8009a48:	72fb      	strb	r3, [r7, #11]
          break;
 8009a4a:	e03b      	b.n	8009ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00b      	beq.n	8009a70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	7c12      	ldrb	r2, [r2, #16]
 8009a64:	f107 0108 	add.w	r1, r7, #8
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4798      	blx	r3
 8009a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a6e:	e029      	b.n	8009ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fa2c 	bl	8009ed0 <USBD_CtlError>
            err++;
 8009a78:	7afb      	ldrb	r3, [r7, #11]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a7e:	e021      	b.n	8009ac4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00b      	beq.n	8009aa4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	7c12      	ldrb	r2, [r2, #16]
 8009a98:	f107 0108 	add.w	r1, r7, #8
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	4798      	blx	r3
 8009aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aa2:	e00f      	b.n	8009ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fa12 	bl	8009ed0 <USBD_CtlError>
            err++;
 8009aac:	7afb      	ldrb	r3, [r7, #11]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ab2:	e007      	b.n	8009ac4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa0a 	bl	8009ed0 <USBD_CtlError>
          err++;
 8009abc:	7afb      	ldrb	r3, [r7, #11]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009ac2:	e038      	b.n	8009b36 <USBD_GetDescriptor+0x286>
 8009ac4:	e037      	b.n	8009b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	7c1b      	ldrb	r3, [r3, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad6:	f107 0208 	add.w	r2, r7, #8
 8009ada:	4610      	mov	r0, r2
 8009adc:	4798      	blx	r3
 8009ade:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ae0:	e029      	b.n	8009b36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f9f3 	bl	8009ed0 <USBD_CtlError>
        err++;
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	3301      	adds	r3, #1
 8009aee:	72fb      	strb	r3, [r7, #11]
      break;
 8009af0:	e021      	b.n	8009b36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	7c1b      	ldrb	r3, [r3, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10d      	bne.n	8009b16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b02:	f107 0208 	add.w	r2, r7, #8
 8009b06:	4610      	mov	r0, r2
 8009b08:	4798      	blx	r3
 8009b0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	2207      	movs	r2, #7
 8009b12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b14:	e00f      	b.n	8009b36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f9d9 	bl	8009ed0 <USBD_CtlError>
        err++;
 8009b1e:	7afb      	ldrb	r3, [r7, #11]
 8009b20:	3301      	adds	r3, #1
 8009b22:	72fb      	strb	r3, [r7, #11]
      break;
 8009b24:	e007      	b.n	8009b36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f9d1 	bl	8009ed0 <USBD_CtlError>
      err++;
 8009b2e:	7afb      	ldrb	r3, [r7, #11]
 8009b30:	3301      	adds	r3, #1
 8009b32:	72fb      	strb	r3, [r7, #11]
      break;
 8009b34:	bf00      	nop
  }

  if (err != 0U)
 8009b36:	7afb      	ldrb	r3, [r7, #11]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d11c      	bne.n	8009b76 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009b3c:	893b      	ldrh	r3, [r7, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d011      	beq.n	8009b66 <USBD_GetDescriptor+0x2b6>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	88db      	ldrh	r3, [r3, #6]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00d      	beq.n	8009b66 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	88da      	ldrh	r2, [r3, #6]
 8009b4e:	893b      	ldrh	r3, [r7, #8]
 8009b50:	4293      	cmp	r3, r2
 8009b52:	bf28      	it	cs
 8009b54:	4613      	movcs	r3, r2
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b5a:	893b      	ldrh	r3, [r7, #8]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	68f9      	ldr	r1, [r7, #12]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fa1f 	bl	8009fa4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	88db      	ldrh	r3, [r3, #6]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d104      	bne.n	8009b78 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fa76 	bl	800a060 <USBD_CtlSendStatus>
 8009b74:	e000      	b.n	8009b78 <USBD_GetDescriptor+0x2c8>
    return;
 8009b76:	bf00      	nop
    }
  }
}
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop

08009b80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	889b      	ldrh	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d130      	bne.n	8009bf4 <USBD_SetAddress+0x74>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	88db      	ldrh	r3, [r3, #6]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d12c      	bne.n	8009bf4 <USBD_SetAddress+0x74>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	885b      	ldrh	r3, [r3, #2]
 8009b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ba0:	d828      	bhi.n	8009bf4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	885b      	ldrh	r3, [r3, #2]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d104      	bne.n	8009bc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f988 	bl	8009ed0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc0:	e01d      	b.n	8009bfe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	7bfa      	ldrb	r2, [r7, #15]
 8009bc6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fe43 	bl	800a85a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fa43 	bl	800a060 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009be8:	e009      	b.n	8009bfe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf2:	e004      	b.n	8009bfe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f96a 	bl	8009ed0 <USBD_CtlError>
  }
}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	885b      	ldrh	r3, [r3, #2]
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	4b41      	ldr	r3, [pc, #260]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009c1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c1c:	4b40      	ldr	r3, [pc, #256]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d904      	bls.n	8009c2e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f952 	bl	8009ed0 <USBD_CtlError>
 8009c2c:	e075      	b.n	8009d1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d002      	beq.n	8009c3e <USBD_SetConfig+0x36>
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d023      	beq.n	8009c84 <USBD_SetConfig+0x7c>
 8009c3c:	e062      	b.n	8009d04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009c3e:	4b38      	ldr	r3, [pc, #224]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d01a      	beq.n	8009c7c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009c46:	4b36      	ldr	r3, [pc, #216]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2203      	movs	r2, #3
 8009c54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c58:	4b31      	ldr	r3, [pc, #196]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff f9e7 	bl	8009032 <USBD_SetClassConfig>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d104      	bne.n	8009c74 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f92f 	bl	8009ed0 <USBD_CtlError>
            return;
 8009c72:	e052      	b.n	8009d1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f9f3 	bl	800a060 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c7a:	e04e      	b.n	8009d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f9ef 	bl	800a060 <USBD_CtlSendStatus>
        break;
 8009c82:	e04a      	b.n	8009d1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009c84:	4b26      	ldr	r3, [pc, #152]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d112      	bne.n	8009cb2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009c94:	4b22      	ldr	r3, [pc, #136]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009c9e:	4b20      	ldr	r3, [pc, #128]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7ff f9e3 	bl	8009070 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f9d8 	bl	800a060 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009cb0:	e033      	b.n	8009d1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d01d      	beq.n	8009cfc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff f9d1 	bl	8009070 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009cce:	4b14      	ldr	r3, [pc, #80]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009cd8:	4b11      	ldr	r3, [pc, #68]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff f9a7 	bl	8009032 <USBD_SetClassConfig>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d104      	bne.n	8009cf4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f8ef 	bl	8009ed0 <USBD_CtlError>
            return;
 8009cf2:	e012      	b.n	8009d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f9b3 	bl	800a060 <USBD_CtlSendStatus>
        break;
 8009cfa:	e00e      	b.n	8009d1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f9af 	bl	800a060 <USBD_CtlSendStatus>
        break;
 8009d02:	e00a      	b.n	8009d1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f8e2 	bl	8009ed0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009d0c:	4b04      	ldr	r3, [pc, #16]	@ (8009d20 <USBD_SetConfig+0x118>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff f9ac 	bl	8009070 <USBD_ClrClassConfig>
        break;
 8009d18:	bf00      	nop
    }
  }
}
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	200003b8 	.word	0x200003b8

08009d24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	88db      	ldrh	r3, [r3, #6]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d004      	beq.n	8009d40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d36:	6839      	ldr	r1, [r7, #0]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f8c9 	bl	8009ed0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d3e:	e022      	b.n	8009d86 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	dc02      	bgt.n	8009d50 <USBD_GetConfig+0x2c>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dc03      	bgt.n	8009d56 <USBD_GetConfig+0x32>
 8009d4e:	e015      	b.n	8009d7c <USBD_GetConfig+0x58>
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d00b      	beq.n	8009d6c <USBD_GetConfig+0x48>
 8009d54:	e012      	b.n	8009d7c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3308      	adds	r3, #8
 8009d60:	2201      	movs	r2, #1
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f91d 	bl	8009fa4 <USBD_CtlSendData>
        break;
 8009d6a:	e00c      	b.n	8009d86 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	2201      	movs	r2, #1
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f915 	bl	8009fa4 <USBD_CtlSendData>
        break;
 8009d7a:	e004      	b.n	8009d86 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f8a6 	bl	8009ed0 <USBD_CtlError>
        break;
 8009d84:	bf00      	nop
}
 8009d86:	bf00      	nop
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d81e      	bhi.n	8009de2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	88db      	ldrh	r3, [r3, #6]
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d004      	beq.n	8009db6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f88e 	bl	8009ed0 <USBD_CtlError>
        break;
 8009db4:	e01a      	b.n	8009dec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d005      	beq.n	8009dd2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f043 0202 	orr.w	r2, r3, #2
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	330c      	adds	r3, #12
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f8e2 	bl	8009fa4 <USBD_CtlSendData>
      break;
 8009de0:	e004      	b.n	8009dec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f873 	bl	8009ed0 <USBD_CtlError>
      break;
 8009dea:	bf00      	nop
  }
}
 8009dec:	bf00      	nop
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	885b      	ldrh	r3, [r3, #2]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d106      	bne.n	8009e14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f926 	bl	800a060 <USBD_CtlSendStatus>
  }
}
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d80b      	bhi.n	8009e4a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	885b      	ldrh	r3, [r3, #2]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d10c      	bne.n	8009e54 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f90c 	bl	800a060 <USBD_CtlSendStatus>
      }
      break;
 8009e48:	e004      	b.n	8009e54 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f83f 	bl	8009ed0 <USBD_CtlError>
      break;
 8009e52:	e000      	b.n	8009e56 <USBD_ClrFeature+0x3a>
      break;
 8009e54:	bf00      	nop
  }
}
 8009e56:	bf00      	nop
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781a      	ldrb	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	785a      	ldrb	r2, [r3, #1]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	3302      	adds	r3, #2
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	3303      	adds	r3, #3
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	021b      	lsls	r3, r3, #8
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	4413      	add	r3, r2
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	3304      	adds	r3, #4
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	3305      	adds	r3, #5
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	021b      	lsls	r3, r3, #8
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	4413      	add	r3, r2
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	3306      	adds	r3, #6
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	3307      	adds	r3, #7
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	021b      	lsls	r3, r3, #8
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	4413      	add	r3, r2
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	80da      	strh	r2, [r3, #6]

}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bc80      	pop	{r7}
 8009ece:	4770      	bx	lr

08009ed0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009eda:	2180      	movs	r1, #128	@ 0x80
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fc53 	bl	800a788 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fc4f 	bl	800a788 <USBD_LL_StallEP>
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b086      	sub	sp, #24
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	60b9      	str	r1, [r7, #8]
 8009efc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d032      	beq.n	8009f6e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 f834 	bl	8009f76 <USBD_GetLen>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	3301      	adds	r3, #1
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	1c5a      	adds	r2, r3, #1
 8009f20:	75fa      	strb	r2, [r7, #23]
 8009f22:	461a      	mov	r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	4413      	add	r3, r2
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	7812      	ldrb	r2, [r2, #0]
 8009f2c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	75fa      	strb	r2, [r7, #23]
 8009f34:	461a      	mov	r2, r3
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	4413      	add	r3, r2
 8009f3a:	2203      	movs	r2, #3
 8009f3c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009f3e:	e012      	b.n	8009f66 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	60fa      	str	r2, [r7, #12]
 8009f46:	7dfa      	ldrb	r2, [r7, #23]
 8009f48:	1c51      	adds	r1, r2, #1
 8009f4a:	75f9      	strb	r1, [r7, #23]
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	440a      	add	r2, r1
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	75fa      	strb	r2, [r7, #23]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	4413      	add	r3, r2
 8009f62:	2200      	movs	r2, #0
 8009f64:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e8      	bne.n	8009f40 <USBD_GetString+0x4e>
    }
  }
}
 8009f6e:	bf00      	nop
 8009f70:	3718      	adds	r7, #24
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b085      	sub	sp, #20
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009f82:	e005      	b.n	8009f90 <USBD_GetLen+0x1a>
  {
    len++;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
 8009f86:	3301      	adds	r3, #1
 8009f88:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1f5      	bne.n	8009f84 <USBD_GetLen+0xe>
  }

  return len;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bc80      	pop	{r7}
 8009fa2:	4770      	bx	lr

08009fa4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009fba:	88fa      	ldrh	r2, [r7, #6]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009fc0:	88fa      	ldrh	r2, [r7, #6]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fc6:	88fb      	ldrh	r3, [r7, #6]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	2100      	movs	r1, #0
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 fc63 	bl	800a898 <USBD_LL_Transmit>

  return USBD_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fea:	88fb      	ldrh	r3, [r7, #6]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	2100      	movs	r1, #0
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 fc51 	bl	800a898 <USBD_LL_Transmit>

  return USBD_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	4613      	mov	r3, r2
 800a00c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2203      	movs	r2, #3
 800a012:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a016:	88fa      	ldrh	r2, [r7, #6]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a01e:	88fa      	ldrh	r2, [r7, #6]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a026:	88fb      	ldrh	r3, [r7, #6]
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	2100      	movs	r1, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 fc56 	bl	800a8de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	4613      	mov	r3, r2
 800a048:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	2100      	movs	r1, #0
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fc44 	bl	800a8de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2204      	movs	r2, #4
 800a06c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a070:	2300      	movs	r3, #0
 800a072:	2200      	movs	r2, #0
 800a074:	2100      	movs	r1, #0
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fc0e 	bl	800a898 <USBD_LL_Transmit>

  return USBD_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2205      	movs	r2, #5
 800a092:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a096:	2300      	movs	r3, #0
 800a098:	2200      	movs	r2, #0
 800a09a:	2100      	movs	r1, #0
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fc1e 	bl	800a8de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4912      	ldr	r1, [pc, #72]	@ (800a0fc <MX_USB_DEVICE_Init+0x50>)
 800a0b4:	4812      	ldr	r0, [pc, #72]	@ (800a100 <MX_USB_DEVICE_Init+0x54>)
 800a0b6:	f7fe ff62 	bl	8008f7e <USBD_Init>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0c0:	f7f7 fc0c 	bl	80018dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a0c4:	490f      	ldr	r1, [pc, #60]	@ (800a104 <MX_USB_DEVICE_Init+0x58>)
 800a0c6:	480e      	ldr	r0, [pc, #56]	@ (800a100 <MX_USB_DEVICE_Init+0x54>)
 800a0c8:	f7fe ff84 	bl	8008fd4 <USBD_RegisterClass>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0d2:	f7f7 fc03 	bl	80018dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0d6:	490c      	ldr	r1, [pc, #48]	@ (800a108 <MX_USB_DEVICE_Init+0x5c>)
 800a0d8:	4809      	ldr	r0, [pc, #36]	@ (800a100 <MX_USB_DEVICE_Init+0x54>)
 800a0da:	f7fe feb5 	bl	8008e48 <USBD_CDC_RegisterInterface>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0e4:	f7f7 fbfa 	bl	80018dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a0e8:	4805      	ldr	r0, [pc, #20]	@ (800a100 <MX_USB_DEVICE_Init+0x54>)
 800a0ea:	f7fe ff8c 	bl	8009006 <USBD_Start>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a0f4:	f7f7 fbf2 	bl	80018dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a0f8:	bf00      	nop
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	200001b0 	.word	0x200001b0
 800a100:	200003bc 	.word	0x200003bc
 800a104:	2000009c 	.word	0x2000009c
 800a108:	200001a0 	.word	0x200001a0

0800a10c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a110:	2200      	movs	r2, #0
 800a112:	4905      	ldr	r1, [pc, #20]	@ (800a128 <CDC_Init_FS+0x1c>)
 800a114:	4805      	ldr	r0, [pc, #20]	@ (800a12c <CDC_Init_FS+0x20>)
 800a116:	f7fe fead 	bl	8008e74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a11a:	4905      	ldr	r1, [pc, #20]	@ (800a130 <CDC_Init_FS+0x24>)
 800a11c:	4803      	ldr	r0, [pc, #12]	@ (800a12c <CDC_Init_FS+0x20>)
 800a11e:	f7fe fec2 	bl	8008ea6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a122:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a124:	4618      	mov	r0, r3
 800a126:	bd80      	pop	{r7, pc}
 800a128:	20000a80 	.word	0x20000a80
 800a12c:	200003bc 	.word	0x200003bc
 800a130:	20000680 	.word	0x20000680

0800a134 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a134:	b480      	push	{r7}
 800a136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a138:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bc80      	pop	{r7}
 800a140:	4770      	bx	lr
	...

0800a144 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4603      	mov	r3, r0
 800a14c:	6039      	str	r1, [r7, #0]
 800a14e:	71fb      	strb	r3, [r7, #7]
 800a150:	4613      	mov	r3, r2
 800a152:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a154:	79fb      	ldrb	r3, [r7, #7]
 800a156:	2b23      	cmp	r3, #35	@ 0x23
 800a158:	d84a      	bhi.n	800a1f0 <CDC_Control_FS+0xac>
 800a15a:	a201      	add	r2, pc, #4	@ (adr r2, 800a160 <CDC_Control_FS+0x1c>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a1f1 	.word	0x0800a1f1
 800a164:	0800a1f1 	.word	0x0800a1f1
 800a168:	0800a1f1 	.word	0x0800a1f1
 800a16c:	0800a1f1 	.word	0x0800a1f1
 800a170:	0800a1f1 	.word	0x0800a1f1
 800a174:	0800a1f1 	.word	0x0800a1f1
 800a178:	0800a1f1 	.word	0x0800a1f1
 800a17c:	0800a1f1 	.word	0x0800a1f1
 800a180:	0800a1f1 	.word	0x0800a1f1
 800a184:	0800a1f1 	.word	0x0800a1f1
 800a188:	0800a1f1 	.word	0x0800a1f1
 800a18c:	0800a1f1 	.word	0x0800a1f1
 800a190:	0800a1f1 	.word	0x0800a1f1
 800a194:	0800a1f1 	.word	0x0800a1f1
 800a198:	0800a1f1 	.word	0x0800a1f1
 800a19c:	0800a1f1 	.word	0x0800a1f1
 800a1a0:	0800a1f1 	.word	0x0800a1f1
 800a1a4:	0800a1f1 	.word	0x0800a1f1
 800a1a8:	0800a1f1 	.word	0x0800a1f1
 800a1ac:	0800a1f1 	.word	0x0800a1f1
 800a1b0:	0800a1f1 	.word	0x0800a1f1
 800a1b4:	0800a1f1 	.word	0x0800a1f1
 800a1b8:	0800a1f1 	.word	0x0800a1f1
 800a1bc:	0800a1f1 	.word	0x0800a1f1
 800a1c0:	0800a1f1 	.word	0x0800a1f1
 800a1c4:	0800a1f1 	.word	0x0800a1f1
 800a1c8:	0800a1f1 	.word	0x0800a1f1
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a1f1 	.word	0x0800a1f1
 800a1d4:	0800a1f1 	.word	0x0800a1f1
 800a1d8:	0800a1f1 	.word	0x0800a1f1
 800a1dc:	0800a1f1 	.word	0x0800a1f1
 800a1e0:	0800a1f1 	.word	0x0800a1f1
 800a1e4:	0800a1f1 	.word	0x0800a1f1
 800a1e8:	0800a1f1 	.word	0x0800a1f1
 800a1ec:	0800a1f1 	.word	0x0800a1f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1f0:	bf00      	nop
  }

  return (USBD_OK);
 800a1f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bc80      	pop	{r7}
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop

0800a200 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	4805      	ldr	r0, [pc, #20]	@ (800a224 <CDC_Receive_FS+0x24>)
 800a20e:	f7fe fe4a 	bl	8008ea6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a212:	4804      	ldr	r0, [pc, #16]	@ (800a224 <CDC_Receive_FS+0x24>)
 800a214:	f7fe fe89 	bl	8008f2a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a218:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	200003bc 	.word	0x200003bc

0800a228 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a238:	4b0d      	ldr	r3, [pc, #52]	@ (800a270 <CDC_Transmit_FS+0x48>)
 800a23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a23e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e00b      	b.n	800a266 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a24e:	887b      	ldrh	r3, [r7, #2]
 800a250:	461a      	mov	r2, r3
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	4806      	ldr	r0, [pc, #24]	@ (800a270 <CDC_Transmit_FS+0x48>)
 800a256:	f7fe fe0d 	bl	8008e74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a25a:	4805      	ldr	r0, [pc, #20]	@ (800a270 <CDC_Transmit_FS+0x48>)
 800a25c:	f7fe fe36 	bl	8008ecc <USBD_CDC_TransmitPacket>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a264:	7bfb      	ldrb	r3, [r7, #15]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	200003bc 	.word	0x200003bc

0800a274 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	6039      	str	r1, [r7, #0]
 800a27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2212      	movs	r2, #18
 800a284:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a286:	4b03      	ldr	r3, [pc, #12]	@ (800a294 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a288:	4618      	mov	r0, r3
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	200001cc 	.word	0x200001cc

0800a298 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	6039      	str	r1, [r7, #0]
 800a2a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2204      	movs	r2, #4
 800a2a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2aa:	4b03      	ldr	r3, [pc, #12]	@ (800a2b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bc80      	pop	{r7}
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	200001e0 	.word	0x200001e0

0800a2bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	6039      	str	r1, [r7, #0]
 800a2c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d105      	bne.n	800a2da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	4907      	ldr	r1, [pc, #28]	@ (800a2f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2d2:	4808      	ldr	r0, [pc, #32]	@ (800a2f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2d4:	f7ff fe0d 	bl	8009ef2 <USBD_GetString>
 800a2d8:	e004      	b.n	800a2e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4904      	ldr	r1, [pc, #16]	@ (800a2f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2de:	4805      	ldr	r0, [pc, #20]	@ (800a2f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2e0:	f7ff fe07 	bl	8009ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2e4:	4b02      	ldr	r3, [pc, #8]	@ (800a2f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000e80 	.word	0x20000e80
 800a2f4:	0800b36c 	.word	0x0800b36c

0800a2f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	6039      	str	r1, [r7, #0]
 800a302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	4904      	ldr	r1, [pc, #16]	@ (800a318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a308:	4804      	ldr	r0, [pc, #16]	@ (800a31c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a30a:	f7ff fdf2 	bl	8009ef2 <USBD_GetString>
  return USBD_StrDesc;
 800a30e:	4b02      	ldr	r3, [pc, #8]	@ (800a318 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000e80 	.word	0x20000e80
 800a31c:	0800b384 	.word	0x0800b384

0800a320 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	6039      	str	r1, [r7, #0]
 800a32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	221a      	movs	r2, #26
 800a330:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a332:	f000 f843 	bl	800a3bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a336:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	200001e4 	.word	0x200001e4

0800a344 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d105      	bne.n	800a362 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	4907      	ldr	r1, [pc, #28]	@ (800a378 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a35a:	4808      	ldr	r0, [pc, #32]	@ (800a37c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a35c:	f7ff fdc9 	bl	8009ef2 <USBD_GetString>
 800a360:	e004      	b.n	800a36c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4904      	ldr	r1, [pc, #16]	@ (800a378 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a366:	4805      	ldr	r0, [pc, #20]	@ (800a37c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a368:	f7ff fdc3 	bl	8009ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a36c:	4b02      	ldr	r3, [pc, #8]	@ (800a378 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20000e80 	.word	0x20000e80
 800a37c:	0800b398 	.word	0x0800b398

0800a380 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	6039      	str	r1, [r7, #0]
 800a38a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d105      	bne.n	800a39e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	4907      	ldr	r1, [pc, #28]	@ (800a3b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a396:	4808      	ldr	r0, [pc, #32]	@ (800a3b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a398:	f7ff fdab 	bl	8009ef2 <USBD_GetString>
 800a39c:	e004      	b.n	800a3a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	4904      	ldr	r1, [pc, #16]	@ (800a3b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3a2:	4805      	ldr	r0, [pc, #20]	@ (800a3b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3a4:	f7ff fda5 	bl	8009ef2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a8:	4b02      	ldr	r3, [pc, #8]	@ (800a3b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000e80 	.word	0x20000e80
 800a3b8:	0800b3a4 	.word	0x0800b3a4

0800a3bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a400 <Get_SerialNum+0x44>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a404 <Get_SerialNum+0x48>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a408 <Get_SerialNum+0x4c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4413      	add	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d009      	beq.n	800a3f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3e2:	2208      	movs	r2, #8
 800a3e4:	4909      	ldr	r1, [pc, #36]	@ (800a40c <Get_SerialNum+0x50>)
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f000 f814 	bl	800a414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3ec:	2204      	movs	r2, #4
 800a3ee:	4908      	ldr	r1, [pc, #32]	@ (800a410 <Get_SerialNum+0x54>)
 800a3f0:	68b8      	ldr	r0, [r7, #8]
 800a3f2:	f000 f80f 	bl	800a414 <IntToUnicode>
  }
}
 800a3f6:	bf00      	nop
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	1ffff7e8 	.word	0x1ffff7e8
 800a404:	1ffff7ec 	.word	0x1ffff7ec
 800a408:	1ffff7f0 	.word	0x1ffff7f0
 800a40c:	200001e6 	.word	0x200001e6
 800a410:	200001f6 	.word	0x200001f6

0800a414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a426:	2300      	movs	r3, #0
 800a428:	75fb      	strb	r3, [r7, #23]
 800a42a:	e027      	b.n	800a47c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	0f1b      	lsrs	r3, r3, #28
 800a430:	2b09      	cmp	r3, #9
 800a432:	d80b      	bhi.n	800a44c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	0f1b      	lsrs	r3, r3, #28
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	4619      	mov	r1, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	440b      	add	r3, r1
 800a444:	3230      	adds	r2, #48	@ 0x30
 800a446:	b2d2      	uxtb	r2, r2
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	e00a      	b.n	800a462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	0f1b      	lsrs	r3, r3, #28
 800a450:	b2da      	uxtb	r2, r3
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	005b      	lsls	r3, r3, #1
 800a456:	4619      	mov	r1, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	440b      	add	r3, r1
 800a45c:	3237      	adds	r2, #55	@ 0x37
 800a45e:	b2d2      	uxtb	r2, r2
 800a460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	011b      	lsls	r3, r3, #4
 800a466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	3301      	adds	r3, #1
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	4413      	add	r3, r2
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	3301      	adds	r3, #1
 800a47a:	75fb      	strb	r3, [r7, #23]
 800a47c:	7dfa      	ldrb	r2, [r7, #23]
 800a47e:	79fb      	ldrb	r3, [r7, #7]
 800a480:	429a      	cmp	r2, r3
 800a482:	d3d3      	bcc.n	800a42c <IntToUnicode+0x18>
  }
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bc80      	pop	{r7}
 800a48e:	4770      	bx	lr

0800a490 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a0d      	ldr	r2, [pc, #52]	@ (800a4d4 <HAL_PCD_MspInit+0x44>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d113      	bne.n	800a4ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d8 <HAL_PCD_MspInit+0x48>)
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d8 <HAL_PCD_MspInit+0x48>)
 800a4a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4ac:	61d3      	str	r3, [r2, #28]
 800a4ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d8 <HAL_PCD_MspInit+0x48>)
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	2014      	movs	r0, #20
 800a4c0:	f7f8 f9a7 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a4c4:	2014      	movs	r0, #20
 800a4c6:	f7f8 f9c0 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a4ca:	bf00      	nop
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	40005c00 	.word	0x40005c00
 800a4d8:	40021000 	.word	0x40021000

0800a4dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f7fe fdcf 	bl	8009096 <USBD_LL_SetupStage>
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	440b      	add	r3, r1
 800a520:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	4619      	mov	r1, r3
 800a52a:	f7fe fe01 	bl	8009130 <USBD_LL_DataOutStage>
}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a548:	78fa      	ldrb	r2, [r7, #3]
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	4613      	mov	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	00db      	lsls	r3, r3, #3
 800a554:	440b      	add	r3, r1
 800a556:	3324      	adds	r3, #36	@ 0x24
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	4619      	mov	r1, r3
 800a55e:	f7fe fe58 	bl	8009212 <USBD_LL_DataInStage>
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe ff68 	bl	800944e <USBD_LL_SOF>
}
 800a57e:	bf00      	nop
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	799b      	ldrb	r3, [r3, #6]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d001      	beq.n	800a59e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a59a:	f7f7 f99f 	bl	80018dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5a4:	7bfa      	ldrb	r2, [r7, #15]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe ff18 	bl	80093de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe fed1 	bl	800935c <USBD_LL_Reset>
}
 800a5ba:	bf00      	nop
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe ff12 	bl	80093fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	7a9b      	ldrb	r3, [r3, #10]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5e0:	4b04      	ldr	r3, [pc, #16]	@ (800a5f4 <HAL_PCD_SuspendCallback+0x30>)
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	4a03      	ldr	r2, [pc, #12]	@ (800a5f4 <HAL_PCD_SuspendCallback+0x30>)
 800a5e6:	f043 0306 	orr.w	r3, r3, #6
 800a5ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	e000ed00 	.word	0xe000ed00

0800a5f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe ff0c 	bl	8009424 <USBD_LL_Resume>
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a61c:	4a28      	ldr	r2, [pc, #160]	@ (800a6c0 <USBD_LL_Init+0xac>)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a26      	ldr	r2, [pc, #152]	@ (800a6c0 <USBD_LL_Init+0xac>)
 800a628:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a62c:	4b24      	ldr	r3, [pc, #144]	@ (800a6c0 <USBD_LL_Init+0xac>)
 800a62e:	4a25      	ldr	r2, [pc, #148]	@ (800a6c4 <USBD_LL_Init+0xb0>)
 800a630:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a632:	4b23      	ldr	r3, [pc, #140]	@ (800a6c0 <USBD_LL_Init+0xac>)
 800a634:	2208      	movs	r2, #8
 800a636:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a638:	4b21      	ldr	r3, [pc, #132]	@ (800a6c0 <USBD_LL_Init+0xac>)
 800a63a:	2202      	movs	r2, #2
 800a63c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a63e:	4b20      	ldr	r3, [pc, #128]	@ (800a6c0 <USBD_LL_Init+0xac>)
 800a640:	2200      	movs	r2, #0
 800a642:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a644:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c0 <USBD_LL_Init+0xac>)
 800a646:	2200      	movs	r2, #0
 800a648:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a64a:	4b1d      	ldr	r3, [pc, #116]	@ (800a6c0 <USBD_LL_Init+0xac>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a650:	481b      	ldr	r0, [pc, #108]	@ (800a6c0 <USBD_LL_Init+0xac>)
 800a652:	f7f8 faca 	bl	8002bea <HAL_PCD_Init>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a65c:	f7f7 f93e 	bl	80018dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a666:	2318      	movs	r3, #24
 800a668:	2200      	movs	r2, #0
 800a66a:	2100      	movs	r1, #0
 800a66c:	f7f9 ffdb 	bl	8004626 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a676:	2358      	movs	r3, #88	@ 0x58
 800a678:	2200      	movs	r2, #0
 800a67a:	2180      	movs	r1, #128	@ 0x80
 800a67c:	f7f9 ffd3 	bl	8004626 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a686:	23c0      	movs	r3, #192	@ 0xc0
 800a688:	2200      	movs	r2, #0
 800a68a:	2181      	movs	r1, #129	@ 0x81
 800a68c:	f7f9 ffcb 	bl	8004626 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a696:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a69a:	2200      	movs	r2, #0
 800a69c:	2101      	movs	r1, #1
 800a69e:	f7f9 ffc2 	bl	8004626 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2182      	movs	r1, #130	@ 0x82
 800a6b0:	f7f9 ffb9 	bl	8004626 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20001080 	.word	0x20001080
 800a6c4:	40005c00 	.word	0x40005c00

0800a6c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7f8 fb79 	bl	8002dd6 <HAL_PCD_Start>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f94e 	bl	800a98c <USBD_Get_USB_Status>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	4608      	mov	r0, r1
 800a708:	4611      	mov	r1, r2
 800a70a:	461a      	mov	r2, r3
 800a70c:	4603      	mov	r3, r0
 800a70e:	70fb      	strb	r3, [r7, #3]
 800a710:	460b      	mov	r3, r1
 800a712:	70bb      	strb	r3, [r7, #2]
 800a714:	4613      	mov	r3, r2
 800a716:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a726:	78bb      	ldrb	r3, [r7, #2]
 800a728:	883a      	ldrh	r2, [r7, #0]
 800a72a:	78f9      	ldrb	r1, [r7, #3]
 800a72c:	f7f8 fccd 	bl	80030ca <HAL_PCD_EP_Open>
 800a730:	4603      	mov	r3, r0
 800a732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f928 	bl	800a98c <USBD_Get_USB_Status>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a740:	7bbb      	ldrb	r3, [r7, #14]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f8 fd0b 	bl	8003184 <HAL_PCD_EP_Close>
 800a76e:	4603      	mov	r3, r0
 800a770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f909 	bl	800a98c <USBD_Get_USB_Status>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7f8 fdb3 	bl	8003312 <HAL_PCD_EP_SetStall>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f8ea 	bl	800a98c <USBD_Get_USB_Status>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7e0:	78fa      	ldrb	r2, [r7, #3]
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7f8 fdf4 	bl	80033d2 <HAL_PCD_EP_ClrStall>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 f8cb 	bl	800a98c <USBD_Get_USB_Status>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a816:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	da0b      	bge.n	800a838 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a826:	68f9      	ldr	r1, [r7, #12]
 800a828:	4613      	mov	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	00db      	lsls	r3, r3, #3
 800a830:	440b      	add	r3, r1
 800a832:	3312      	adds	r3, #18
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	e00b      	b.n	800a850 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a838:	78fb      	ldrb	r3, [r7, #3]
 800a83a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a83e:	68f9      	ldr	r1, [r7, #12]
 800a840:	4613      	mov	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	440b      	add	r3, r1
 800a84a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a84e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	bc80      	pop	{r7}
 800a858:	4770      	bx	lr

0800a85a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a874:	78fa      	ldrb	r2, [r7, #3]
 800a876:	4611      	mov	r1, r2
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f8 fc02 	bl	8003082 <HAL_PCD_SetAddress>
 800a87e:	4603      	mov	r3, r0
 800a880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a882:	7bfb      	ldrb	r3, [r7, #15]
 800a884:	4618      	mov	r0, r3
 800a886:	f000 f881 	bl	800a98c <USBD_Get_USB_Status>
 800a88a:	4603      	mov	r3, r0
 800a88c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	607a      	str	r2, [r7, #4]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	72fb      	strb	r3, [r7, #11]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8ba:	893b      	ldrh	r3, [r7, #8]
 800a8bc:	7af9      	ldrb	r1, [r7, #11]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	f7f8 fcf0 	bl	80032a4 <HAL_PCD_EP_Transmit>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 f85e 	bl	800a98c <USBD_Get_USB_Status>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b086      	sub	sp, #24
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	60f8      	str	r0, [r7, #12]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	72fb      	strb	r3, [r7, #11]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a900:	893b      	ldrh	r3, [r7, #8]
 800a902:	7af9      	ldrb	r1, [r7, #11]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	f7f8 fc85 	bl	8003214 <HAL_PCD_EP_Receive>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
 800a910:	4618      	mov	r0, r3
 800a912:	f000 f83b 	bl	800a98c <USBD_Get_USB_Status>
 800a916:	4603      	mov	r3, r0
 800a918:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a91a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a936:	78fa      	ldrb	r2, [r7, #3]
 800a938:	4611      	mov	r1, r2
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7f8 fc9b 	bl	8003276 <HAL_PCD_EP_GetRxCount>
 800a940:	4603      	mov	r3, r0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
	...

0800a94c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a954:	4b02      	ldr	r3, [pc, #8]	@ (800a960 <USBD_static_malloc+0x14>)
}
 800a956:	4618      	mov	r0, r3
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bc80      	pop	{r7}
 800a95e:	4770      	bx	lr
 800a960:	20001358 	.word	0x20001358

0800a964 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]

}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	bc80      	pop	{r7}
 800a974:	4770      	bx	lr

0800a976 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	460b      	mov	r3, r1
 800a980:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a982:	bf00      	nop
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	bc80      	pop	{r7}
 800a98a:	4770      	bx	lr

0800a98c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d817      	bhi.n	800a9d0 <USBD_Get_USB_Status+0x44>
 800a9a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a8 <USBD_Get_USB_Status+0x1c>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800a9b9 	.word	0x0800a9b9
 800a9ac:	0800a9bf 	.word	0x0800a9bf
 800a9b0:	0800a9c5 	.word	0x0800a9c5
 800a9b4:	0800a9cb 	.word	0x0800a9cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a9bc:	e00b      	b.n	800a9d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9be:	2302      	movs	r3, #2
 800a9c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c2:	e008      	b.n	800a9d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c8:	e005      	b.n	800a9d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ce:	e002      	b.n	800a9d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d4:	bf00      	nop
  }
  return usb_status;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop

0800a9e4 <siprintf>:
 800a9e4:	b40e      	push	{r1, r2, r3}
 800a9e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a9ea:	b500      	push	{lr}
 800a9ec:	b09c      	sub	sp, #112	@ 0x70
 800a9ee:	ab1d      	add	r3, sp, #116	@ 0x74
 800a9f0:	9002      	str	r0, [sp, #8]
 800a9f2:	9006      	str	r0, [sp, #24]
 800a9f4:	9107      	str	r1, [sp, #28]
 800a9f6:	9104      	str	r1, [sp, #16]
 800a9f8:	4808      	ldr	r0, [pc, #32]	@ (800aa1c <siprintf+0x38>)
 800a9fa:	4909      	ldr	r1, [pc, #36]	@ (800aa20 <siprintf+0x3c>)
 800a9fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa00:	9105      	str	r1, [sp, #20]
 800aa02:	6800      	ldr	r0, [r0, #0]
 800aa04:	a902      	add	r1, sp, #8
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	f000 f992 	bl	800ad30 <_svfiprintf_r>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	9b02      	ldr	r3, [sp, #8]
 800aa10:	701a      	strb	r2, [r3, #0]
 800aa12:	b01c      	add	sp, #112	@ 0x70
 800aa14:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa18:	b003      	add	sp, #12
 800aa1a:	4770      	bx	lr
 800aa1c:	20000200 	.word	0x20000200
 800aa20:	ffff0208 	.word	0xffff0208

0800aa24 <memset>:
 800aa24:	4603      	mov	r3, r0
 800aa26:	4402      	add	r2, r0
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d100      	bne.n	800aa2e <memset+0xa>
 800aa2c:	4770      	bx	lr
 800aa2e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa32:	e7f9      	b.n	800aa28 <memset+0x4>

0800aa34 <__errno>:
 800aa34:	4b01      	ldr	r3, [pc, #4]	@ (800aa3c <__errno+0x8>)
 800aa36:	6818      	ldr	r0, [r3, #0]
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	20000200 	.word	0x20000200

0800aa40 <__libc_init_array>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	2600      	movs	r6, #0
 800aa44:	4d0c      	ldr	r5, [pc, #48]	@ (800aa78 <__libc_init_array+0x38>)
 800aa46:	4c0d      	ldr	r4, [pc, #52]	@ (800aa7c <__libc_init_array+0x3c>)
 800aa48:	1b64      	subs	r4, r4, r5
 800aa4a:	10a4      	asrs	r4, r4, #2
 800aa4c:	42a6      	cmp	r6, r4
 800aa4e:	d109      	bne.n	800aa64 <__libc_init_array+0x24>
 800aa50:	f000 fc78 	bl	800b344 <_init>
 800aa54:	2600      	movs	r6, #0
 800aa56:	4d0a      	ldr	r5, [pc, #40]	@ (800aa80 <__libc_init_array+0x40>)
 800aa58:	4c0a      	ldr	r4, [pc, #40]	@ (800aa84 <__libc_init_array+0x44>)
 800aa5a:	1b64      	subs	r4, r4, r5
 800aa5c:	10a4      	asrs	r4, r4, #2
 800aa5e:	42a6      	cmp	r6, r4
 800aa60:	d105      	bne.n	800aa6e <__libc_init_array+0x2e>
 800aa62:	bd70      	pop	{r4, r5, r6, pc}
 800aa64:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa68:	4798      	blx	r3
 800aa6a:	3601      	adds	r6, #1
 800aa6c:	e7ee      	b.n	800aa4c <__libc_init_array+0xc>
 800aa6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa72:	4798      	blx	r3
 800aa74:	3601      	adds	r6, #1
 800aa76:	e7f2      	b.n	800aa5e <__libc_init_array+0x1e>
 800aa78:	0800b414 	.word	0x0800b414
 800aa7c:	0800b414 	.word	0x0800b414
 800aa80:	0800b414 	.word	0x0800b414
 800aa84:	0800b418 	.word	0x0800b418

0800aa88 <__retarget_lock_acquire_recursive>:
 800aa88:	4770      	bx	lr

0800aa8a <__retarget_lock_release_recursive>:
 800aa8a:	4770      	bx	lr

0800aa8c <_free_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4605      	mov	r5, r0
 800aa90:	2900      	cmp	r1, #0
 800aa92:	d040      	beq.n	800ab16 <_free_r+0x8a>
 800aa94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa98:	1f0c      	subs	r4, r1, #4
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	bfb8      	it	lt
 800aa9e:	18e4      	addlt	r4, r4, r3
 800aaa0:	f000 f8de 	bl	800ac60 <__malloc_lock>
 800aaa4:	4a1c      	ldr	r2, [pc, #112]	@ (800ab18 <_free_r+0x8c>)
 800aaa6:	6813      	ldr	r3, [r2, #0]
 800aaa8:	b933      	cbnz	r3, 800aab8 <_free_r+0x2c>
 800aaaa:	6063      	str	r3, [r4, #4]
 800aaac:	6014      	str	r4, [r2, #0]
 800aaae:	4628      	mov	r0, r5
 800aab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aab4:	f000 b8da 	b.w	800ac6c <__malloc_unlock>
 800aab8:	42a3      	cmp	r3, r4
 800aaba:	d908      	bls.n	800aace <_free_r+0x42>
 800aabc:	6820      	ldr	r0, [r4, #0]
 800aabe:	1821      	adds	r1, r4, r0
 800aac0:	428b      	cmp	r3, r1
 800aac2:	bf01      	itttt	eq
 800aac4:	6819      	ldreq	r1, [r3, #0]
 800aac6:	685b      	ldreq	r3, [r3, #4]
 800aac8:	1809      	addeq	r1, r1, r0
 800aaca:	6021      	streq	r1, [r4, #0]
 800aacc:	e7ed      	b.n	800aaaa <_free_r+0x1e>
 800aace:	461a      	mov	r2, r3
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	b10b      	cbz	r3, 800aad8 <_free_r+0x4c>
 800aad4:	42a3      	cmp	r3, r4
 800aad6:	d9fa      	bls.n	800aace <_free_r+0x42>
 800aad8:	6811      	ldr	r1, [r2, #0]
 800aada:	1850      	adds	r0, r2, r1
 800aadc:	42a0      	cmp	r0, r4
 800aade:	d10b      	bne.n	800aaf8 <_free_r+0x6c>
 800aae0:	6820      	ldr	r0, [r4, #0]
 800aae2:	4401      	add	r1, r0
 800aae4:	1850      	adds	r0, r2, r1
 800aae6:	4283      	cmp	r3, r0
 800aae8:	6011      	str	r1, [r2, #0]
 800aaea:	d1e0      	bne.n	800aaae <_free_r+0x22>
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	4408      	add	r0, r1
 800aaf2:	6010      	str	r0, [r2, #0]
 800aaf4:	6053      	str	r3, [r2, #4]
 800aaf6:	e7da      	b.n	800aaae <_free_r+0x22>
 800aaf8:	d902      	bls.n	800ab00 <_free_r+0x74>
 800aafa:	230c      	movs	r3, #12
 800aafc:	602b      	str	r3, [r5, #0]
 800aafe:	e7d6      	b.n	800aaae <_free_r+0x22>
 800ab00:	6820      	ldr	r0, [r4, #0]
 800ab02:	1821      	adds	r1, r4, r0
 800ab04:	428b      	cmp	r3, r1
 800ab06:	bf01      	itttt	eq
 800ab08:	6819      	ldreq	r1, [r3, #0]
 800ab0a:	685b      	ldreq	r3, [r3, #4]
 800ab0c:	1809      	addeq	r1, r1, r0
 800ab0e:	6021      	streq	r1, [r4, #0]
 800ab10:	6063      	str	r3, [r4, #4]
 800ab12:	6054      	str	r4, [r2, #4]
 800ab14:	e7cb      	b.n	800aaae <_free_r+0x22>
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	200016bc 	.word	0x200016bc

0800ab1c <sbrk_aligned>:
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	4e0f      	ldr	r6, [pc, #60]	@ (800ab5c <sbrk_aligned+0x40>)
 800ab20:	460c      	mov	r4, r1
 800ab22:	6831      	ldr	r1, [r6, #0]
 800ab24:	4605      	mov	r5, r0
 800ab26:	b911      	cbnz	r1, 800ab2e <sbrk_aligned+0x12>
 800ab28:	f000 fbaa 	bl	800b280 <_sbrk_r>
 800ab2c:	6030      	str	r0, [r6, #0]
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4628      	mov	r0, r5
 800ab32:	f000 fba5 	bl	800b280 <_sbrk_r>
 800ab36:	1c43      	adds	r3, r0, #1
 800ab38:	d103      	bne.n	800ab42 <sbrk_aligned+0x26>
 800ab3a:	f04f 34ff 	mov.w	r4, #4294967295
 800ab3e:	4620      	mov	r0, r4
 800ab40:	bd70      	pop	{r4, r5, r6, pc}
 800ab42:	1cc4      	adds	r4, r0, #3
 800ab44:	f024 0403 	bic.w	r4, r4, #3
 800ab48:	42a0      	cmp	r0, r4
 800ab4a:	d0f8      	beq.n	800ab3e <sbrk_aligned+0x22>
 800ab4c:	1a21      	subs	r1, r4, r0
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f000 fb96 	bl	800b280 <_sbrk_r>
 800ab54:	3001      	adds	r0, #1
 800ab56:	d1f2      	bne.n	800ab3e <sbrk_aligned+0x22>
 800ab58:	e7ef      	b.n	800ab3a <sbrk_aligned+0x1e>
 800ab5a:	bf00      	nop
 800ab5c:	200016b8 	.word	0x200016b8

0800ab60 <_malloc_r>:
 800ab60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab64:	1ccd      	adds	r5, r1, #3
 800ab66:	f025 0503 	bic.w	r5, r5, #3
 800ab6a:	3508      	adds	r5, #8
 800ab6c:	2d0c      	cmp	r5, #12
 800ab6e:	bf38      	it	cc
 800ab70:	250c      	movcc	r5, #12
 800ab72:	2d00      	cmp	r5, #0
 800ab74:	4606      	mov	r6, r0
 800ab76:	db01      	blt.n	800ab7c <_malloc_r+0x1c>
 800ab78:	42a9      	cmp	r1, r5
 800ab7a:	d904      	bls.n	800ab86 <_malloc_r+0x26>
 800ab7c:	230c      	movs	r3, #12
 800ab7e:	6033      	str	r3, [r6, #0]
 800ab80:	2000      	movs	r0, #0
 800ab82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac5c <_malloc_r+0xfc>
 800ab8a:	f000 f869 	bl	800ac60 <__malloc_lock>
 800ab8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab92:	461c      	mov	r4, r3
 800ab94:	bb44      	cbnz	r4, 800abe8 <_malloc_r+0x88>
 800ab96:	4629      	mov	r1, r5
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7ff ffbf 	bl	800ab1c <sbrk_aligned>
 800ab9e:	1c43      	adds	r3, r0, #1
 800aba0:	4604      	mov	r4, r0
 800aba2:	d158      	bne.n	800ac56 <_malloc_r+0xf6>
 800aba4:	f8d8 4000 	ldr.w	r4, [r8]
 800aba8:	4627      	mov	r7, r4
 800abaa:	2f00      	cmp	r7, #0
 800abac:	d143      	bne.n	800ac36 <_malloc_r+0xd6>
 800abae:	2c00      	cmp	r4, #0
 800abb0:	d04b      	beq.n	800ac4a <_malloc_r+0xea>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	4639      	mov	r1, r7
 800abb6:	4630      	mov	r0, r6
 800abb8:	eb04 0903 	add.w	r9, r4, r3
 800abbc:	f000 fb60 	bl	800b280 <_sbrk_r>
 800abc0:	4581      	cmp	r9, r0
 800abc2:	d142      	bne.n	800ac4a <_malloc_r+0xea>
 800abc4:	6821      	ldr	r1, [r4, #0]
 800abc6:	4630      	mov	r0, r6
 800abc8:	1a6d      	subs	r5, r5, r1
 800abca:	4629      	mov	r1, r5
 800abcc:	f7ff ffa6 	bl	800ab1c <sbrk_aligned>
 800abd0:	3001      	adds	r0, #1
 800abd2:	d03a      	beq.n	800ac4a <_malloc_r+0xea>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	442b      	add	r3, r5
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	f8d8 3000 	ldr.w	r3, [r8]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	bb62      	cbnz	r2, 800ac3c <_malloc_r+0xdc>
 800abe2:	f8c8 7000 	str.w	r7, [r8]
 800abe6:	e00f      	b.n	800ac08 <_malloc_r+0xa8>
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	1b52      	subs	r2, r2, r5
 800abec:	d420      	bmi.n	800ac30 <_malloc_r+0xd0>
 800abee:	2a0b      	cmp	r2, #11
 800abf0:	d917      	bls.n	800ac22 <_malloc_r+0xc2>
 800abf2:	1961      	adds	r1, r4, r5
 800abf4:	42a3      	cmp	r3, r4
 800abf6:	6025      	str	r5, [r4, #0]
 800abf8:	bf18      	it	ne
 800abfa:	6059      	strne	r1, [r3, #4]
 800abfc:	6863      	ldr	r3, [r4, #4]
 800abfe:	bf08      	it	eq
 800ac00:	f8c8 1000 	streq.w	r1, [r8]
 800ac04:	5162      	str	r2, [r4, r5]
 800ac06:	604b      	str	r3, [r1, #4]
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f000 f82f 	bl	800ac6c <__malloc_unlock>
 800ac0e:	f104 000b 	add.w	r0, r4, #11
 800ac12:	1d23      	adds	r3, r4, #4
 800ac14:	f020 0007 	bic.w	r0, r0, #7
 800ac18:	1ac2      	subs	r2, r0, r3
 800ac1a:	bf1c      	itt	ne
 800ac1c:	1a1b      	subne	r3, r3, r0
 800ac1e:	50a3      	strne	r3, [r4, r2]
 800ac20:	e7af      	b.n	800ab82 <_malloc_r+0x22>
 800ac22:	6862      	ldr	r2, [r4, #4]
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	bf0c      	ite	eq
 800ac28:	f8c8 2000 	streq.w	r2, [r8]
 800ac2c:	605a      	strne	r2, [r3, #4]
 800ac2e:	e7eb      	b.n	800ac08 <_malloc_r+0xa8>
 800ac30:	4623      	mov	r3, r4
 800ac32:	6864      	ldr	r4, [r4, #4]
 800ac34:	e7ae      	b.n	800ab94 <_malloc_r+0x34>
 800ac36:	463c      	mov	r4, r7
 800ac38:	687f      	ldr	r7, [r7, #4]
 800ac3a:	e7b6      	b.n	800abaa <_malloc_r+0x4a>
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	d1fb      	bne.n	800ac3c <_malloc_r+0xdc>
 800ac44:	2300      	movs	r3, #0
 800ac46:	6053      	str	r3, [r2, #4]
 800ac48:	e7de      	b.n	800ac08 <_malloc_r+0xa8>
 800ac4a:	230c      	movs	r3, #12
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	6033      	str	r3, [r6, #0]
 800ac50:	f000 f80c 	bl	800ac6c <__malloc_unlock>
 800ac54:	e794      	b.n	800ab80 <_malloc_r+0x20>
 800ac56:	6005      	str	r5, [r0, #0]
 800ac58:	e7d6      	b.n	800ac08 <_malloc_r+0xa8>
 800ac5a:	bf00      	nop
 800ac5c:	200016bc 	.word	0x200016bc

0800ac60 <__malloc_lock>:
 800ac60:	4801      	ldr	r0, [pc, #4]	@ (800ac68 <__malloc_lock+0x8>)
 800ac62:	f7ff bf11 	b.w	800aa88 <__retarget_lock_acquire_recursive>
 800ac66:	bf00      	nop
 800ac68:	200016b4 	.word	0x200016b4

0800ac6c <__malloc_unlock>:
 800ac6c:	4801      	ldr	r0, [pc, #4]	@ (800ac74 <__malloc_unlock+0x8>)
 800ac6e:	f7ff bf0c 	b.w	800aa8a <__retarget_lock_release_recursive>
 800ac72:	bf00      	nop
 800ac74:	200016b4 	.word	0x200016b4

0800ac78 <__ssputs_r>:
 800ac78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac7c:	461f      	mov	r7, r3
 800ac7e:	688e      	ldr	r6, [r1, #8]
 800ac80:	4682      	mov	sl, r0
 800ac82:	42be      	cmp	r6, r7
 800ac84:	460c      	mov	r4, r1
 800ac86:	4690      	mov	r8, r2
 800ac88:	680b      	ldr	r3, [r1, #0]
 800ac8a:	d82d      	bhi.n	800ace8 <__ssputs_r+0x70>
 800ac8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac94:	d026      	beq.n	800ace4 <__ssputs_r+0x6c>
 800ac96:	6965      	ldr	r5, [r4, #20]
 800ac98:	6909      	ldr	r1, [r1, #16]
 800ac9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac9e:	eba3 0901 	sub.w	r9, r3, r1
 800aca2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aca6:	1c7b      	adds	r3, r7, #1
 800aca8:	444b      	add	r3, r9
 800acaa:	106d      	asrs	r5, r5, #1
 800acac:	429d      	cmp	r5, r3
 800acae:	bf38      	it	cc
 800acb0:	461d      	movcc	r5, r3
 800acb2:	0553      	lsls	r3, r2, #21
 800acb4:	d527      	bpl.n	800ad06 <__ssputs_r+0x8e>
 800acb6:	4629      	mov	r1, r5
 800acb8:	f7ff ff52 	bl	800ab60 <_malloc_r>
 800acbc:	4606      	mov	r6, r0
 800acbe:	b360      	cbz	r0, 800ad1a <__ssputs_r+0xa2>
 800acc0:	464a      	mov	r2, r9
 800acc2:	6921      	ldr	r1, [r4, #16]
 800acc4:	f000 fafa 	bl	800b2bc <memcpy>
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800acce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	6126      	str	r6, [r4, #16]
 800acd6:	444e      	add	r6, r9
 800acd8:	6026      	str	r6, [r4, #0]
 800acda:	463e      	mov	r6, r7
 800acdc:	6165      	str	r5, [r4, #20]
 800acde:	eba5 0509 	sub.w	r5, r5, r9
 800ace2:	60a5      	str	r5, [r4, #8]
 800ace4:	42be      	cmp	r6, r7
 800ace6:	d900      	bls.n	800acea <__ssputs_r+0x72>
 800ace8:	463e      	mov	r6, r7
 800acea:	4632      	mov	r2, r6
 800acec:	4641      	mov	r1, r8
 800acee:	6820      	ldr	r0, [r4, #0]
 800acf0:	f000 faac 	bl	800b24c <memmove>
 800acf4:	2000      	movs	r0, #0
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	1b9b      	subs	r3, r3, r6
 800acfa:	60a3      	str	r3, [r4, #8]
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	4433      	add	r3, r6
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad06:	462a      	mov	r2, r5
 800ad08:	f000 fae6 	bl	800b2d8 <_realloc_r>
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d1e0      	bne.n	800acd4 <__ssputs_r+0x5c>
 800ad12:	4650      	mov	r0, sl
 800ad14:	6921      	ldr	r1, [r4, #16]
 800ad16:	f7ff feb9 	bl	800aa8c <_free_r>
 800ad1a:	230c      	movs	r3, #12
 800ad1c:	f8ca 3000 	str.w	r3, [sl]
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295
 800ad26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	e7e9      	b.n	800ad02 <__ssputs_r+0x8a>
	...

0800ad30 <_svfiprintf_r>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	4698      	mov	r8, r3
 800ad36:	898b      	ldrh	r3, [r1, #12]
 800ad38:	4607      	mov	r7, r0
 800ad3a:	061b      	lsls	r3, r3, #24
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	4614      	mov	r4, r2
 800ad40:	b09d      	sub	sp, #116	@ 0x74
 800ad42:	d510      	bpl.n	800ad66 <_svfiprintf_r+0x36>
 800ad44:	690b      	ldr	r3, [r1, #16]
 800ad46:	b973      	cbnz	r3, 800ad66 <_svfiprintf_r+0x36>
 800ad48:	2140      	movs	r1, #64	@ 0x40
 800ad4a:	f7ff ff09 	bl	800ab60 <_malloc_r>
 800ad4e:	6028      	str	r0, [r5, #0]
 800ad50:	6128      	str	r0, [r5, #16]
 800ad52:	b930      	cbnz	r0, 800ad62 <_svfiprintf_r+0x32>
 800ad54:	230c      	movs	r3, #12
 800ad56:	603b      	str	r3, [r7, #0]
 800ad58:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5c:	b01d      	add	sp, #116	@ 0x74
 800ad5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad62:	2340      	movs	r3, #64	@ 0x40
 800ad64:	616b      	str	r3, [r5, #20]
 800ad66:	2300      	movs	r3, #0
 800ad68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad6a:	2320      	movs	r3, #32
 800ad6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad70:	2330      	movs	r3, #48	@ 0x30
 800ad72:	f04f 0901 	mov.w	r9, #1
 800ad76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad7a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800af14 <_svfiprintf_r+0x1e4>
 800ad7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad82:	4623      	mov	r3, r4
 800ad84:	469a      	mov	sl, r3
 800ad86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad8a:	b10a      	cbz	r2, 800ad90 <_svfiprintf_r+0x60>
 800ad8c:	2a25      	cmp	r2, #37	@ 0x25
 800ad8e:	d1f9      	bne.n	800ad84 <_svfiprintf_r+0x54>
 800ad90:	ebba 0b04 	subs.w	fp, sl, r4
 800ad94:	d00b      	beq.n	800adae <_svfiprintf_r+0x7e>
 800ad96:	465b      	mov	r3, fp
 800ad98:	4622      	mov	r2, r4
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	f7ff ff6b 	bl	800ac78 <__ssputs_r>
 800ada2:	3001      	adds	r0, #1
 800ada4:	f000 80a7 	beq.w	800aef6 <_svfiprintf_r+0x1c6>
 800ada8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adaa:	445a      	add	r2, fp
 800adac:	9209      	str	r2, [sp, #36]	@ 0x24
 800adae:	f89a 3000 	ldrb.w	r3, [sl]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 809f 	beq.w	800aef6 <_svfiprintf_r+0x1c6>
 800adb8:	2300      	movs	r3, #0
 800adba:	f04f 32ff 	mov.w	r2, #4294967295
 800adbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adc2:	f10a 0a01 	add.w	sl, sl, #1
 800adc6:	9304      	str	r3, [sp, #16]
 800adc8:	9307      	str	r3, [sp, #28]
 800adca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adce:	931a      	str	r3, [sp, #104]	@ 0x68
 800add0:	4654      	mov	r4, sl
 800add2:	2205      	movs	r2, #5
 800add4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add8:	484e      	ldr	r0, [pc, #312]	@ (800af14 <_svfiprintf_r+0x1e4>)
 800adda:	f000 fa61 	bl	800b2a0 <memchr>
 800adde:	9a04      	ldr	r2, [sp, #16]
 800ade0:	b9d8      	cbnz	r0, 800ae1a <_svfiprintf_r+0xea>
 800ade2:	06d0      	lsls	r0, r2, #27
 800ade4:	bf44      	itt	mi
 800ade6:	2320      	movmi	r3, #32
 800ade8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adec:	0711      	lsls	r1, r2, #28
 800adee:	bf44      	itt	mi
 800adf0:	232b      	movmi	r3, #43	@ 0x2b
 800adf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adf6:	f89a 3000 	ldrb.w	r3, [sl]
 800adfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800adfc:	d015      	beq.n	800ae2a <_svfiprintf_r+0xfa>
 800adfe:	4654      	mov	r4, sl
 800ae00:	2000      	movs	r0, #0
 800ae02:	f04f 0c0a 	mov.w	ip, #10
 800ae06:	9a07      	ldr	r2, [sp, #28]
 800ae08:	4621      	mov	r1, r4
 800ae0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae0e:	3b30      	subs	r3, #48	@ 0x30
 800ae10:	2b09      	cmp	r3, #9
 800ae12:	d94b      	bls.n	800aeac <_svfiprintf_r+0x17c>
 800ae14:	b1b0      	cbz	r0, 800ae44 <_svfiprintf_r+0x114>
 800ae16:	9207      	str	r2, [sp, #28]
 800ae18:	e014      	b.n	800ae44 <_svfiprintf_r+0x114>
 800ae1a:	eba0 0308 	sub.w	r3, r0, r8
 800ae1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae22:	4313      	orrs	r3, r2
 800ae24:	46a2      	mov	sl, r4
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	e7d2      	b.n	800add0 <_svfiprintf_r+0xa0>
 800ae2a:	9b03      	ldr	r3, [sp, #12]
 800ae2c:	1d19      	adds	r1, r3, #4
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	9103      	str	r1, [sp, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	bfbb      	ittet	lt
 800ae36:	425b      	neglt	r3, r3
 800ae38:	f042 0202 	orrlt.w	r2, r2, #2
 800ae3c:	9307      	strge	r3, [sp, #28]
 800ae3e:	9307      	strlt	r3, [sp, #28]
 800ae40:	bfb8      	it	lt
 800ae42:	9204      	strlt	r2, [sp, #16]
 800ae44:	7823      	ldrb	r3, [r4, #0]
 800ae46:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae48:	d10a      	bne.n	800ae60 <_svfiprintf_r+0x130>
 800ae4a:	7863      	ldrb	r3, [r4, #1]
 800ae4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae4e:	d132      	bne.n	800aeb6 <_svfiprintf_r+0x186>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	3402      	adds	r4, #2
 800ae54:	1d1a      	adds	r2, r3, #4
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	9203      	str	r2, [sp, #12]
 800ae5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae5e:	9305      	str	r3, [sp, #20]
 800ae60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800af18 <_svfiprintf_r+0x1e8>
 800ae64:	2203      	movs	r2, #3
 800ae66:	4650      	mov	r0, sl
 800ae68:	7821      	ldrb	r1, [r4, #0]
 800ae6a:	f000 fa19 	bl	800b2a0 <memchr>
 800ae6e:	b138      	cbz	r0, 800ae80 <_svfiprintf_r+0x150>
 800ae70:	2240      	movs	r2, #64	@ 0x40
 800ae72:	9b04      	ldr	r3, [sp, #16]
 800ae74:	eba0 000a 	sub.w	r0, r0, sl
 800ae78:	4082      	lsls	r2, r0
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	3401      	adds	r4, #1
 800ae7e:	9304      	str	r3, [sp, #16]
 800ae80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae84:	2206      	movs	r2, #6
 800ae86:	4825      	ldr	r0, [pc, #148]	@ (800af1c <_svfiprintf_r+0x1ec>)
 800ae88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae8c:	f000 fa08 	bl	800b2a0 <memchr>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d036      	beq.n	800af02 <_svfiprintf_r+0x1d2>
 800ae94:	4b22      	ldr	r3, [pc, #136]	@ (800af20 <_svfiprintf_r+0x1f0>)
 800ae96:	bb1b      	cbnz	r3, 800aee0 <_svfiprintf_r+0x1b0>
 800ae98:	9b03      	ldr	r3, [sp, #12]
 800ae9a:	3307      	adds	r3, #7
 800ae9c:	f023 0307 	bic.w	r3, r3, #7
 800aea0:	3308      	adds	r3, #8
 800aea2:	9303      	str	r3, [sp, #12]
 800aea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea6:	4433      	add	r3, r6
 800aea8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeaa:	e76a      	b.n	800ad82 <_svfiprintf_r+0x52>
 800aeac:	460c      	mov	r4, r1
 800aeae:	2001      	movs	r0, #1
 800aeb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeb4:	e7a8      	b.n	800ae08 <_svfiprintf_r+0xd8>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f04f 0c0a 	mov.w	ip, #10
 800aebc:	4619      	mov	r1, r3
 800aebe:	3401      	adds	r4, #1
 800aec0:	9305      	str	r3, [sp, #20]
 800aec2:	4620      	mov	r0, r4
 800aec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aec8:	3a30      	subs	r2, #48	@ 0x30
 800aeca:	2a09      	cmp	r2, #9
 800aecc:	d903      	bls.n	800aed6 <_svfiprintf_r+0x1a6>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0c6      	beq.n	800ae60 <_svfiprintf_r+0x130>
 800aed2:	9105      	str	r1, [sp, #20]
 800aed4:	e7c4      	b.n	800ae60 <_svfiprintf_r+0x130>
 800aed6:	4604      	mov	r4, r0
 800aed8:	2301      	movs	r3, #1
 800aeda:	fb0c 2101 	mla	r1, ip, r1, r2
 800aede:	e7f0      	b.n	800aec2 <_svfiprintf_r+0x192>
 800aee0:	ab03      	add	r3, sp, #12
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	462a      	mov	r2, r5
 800aee6:	4638      	mov	r0, r7
 800aee8:	4b0e      	ldr	r3, [pc, #56]	@ (800af24 <_svfiprintf_r+0x1f4>)
 800aeea:	a904      	add	r1, sp, #16
 800aeec:	f3af 8000 	nop.w
 800aef0:	1c42      	adds	r2, r0, #1
 800aef2:	4606      	mov	r6, r0
 800aef4:	d1d6      	bne.n	800aea4 <_svfiprintf_r+0x174>
 800aef6:	89ab      	ldrh	r3, [r5, #12]
 800aef8:	065b      	lsls	r3, r3, #25
 800aefa:	f53f af2d 	bmi.w	800ad58 <_svfiprintf_r+0x28>
 800aefe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af00:	e72c      	b.n	800ad5c <_svfiprintf_r+0x2c>
 800af02:	ab03      	add	r3, sp, #12
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	462a      	mov	r2, r5
 800af08:	4638      	mov	r0, r7
 800af0a:	4b06      	ldr	r3, [pc, #24]	@ (800af24 <_svfiprintf_r+0x1f4>)
 800af0c:	a904      	add	r1, sp, #16
 800af0e:	f000 f87d 	bl	800b00c <_printf_i>
 800af12:	e7ed      	b.n	800aef0 <_svfiprintf_r+0x1c0>
 800af14:	0800b3d6 	.word	0x0800b3d6
 800af18:	0800b3dc 	.word	0x0800b3dc
 800af1c:	0800b3e0 	.word	0x0800b3e0
 800af20:	00000000 	.word	0x00000000
 800af24:	0800ac79 	.word	0x0800ac79

0800af28 <_printf_common>:
 800af28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af2c:	4616      	mov	r6, r2
 800af2e:	4698      	mov	r8, r3
 800af30:	688a      	ldr	r2, [r1, #8]
 800af32:	690b      	ldr	r3, [r1, #16]
 800af34:	4607      	mov	r7, r0
 800af36:	4293      	cmp	r3, r2
 800af38:	bfb8      	it	lt
 800af3a:	4613      	movlt	r3, r2
 800af3c:	6033      	str	r3, [r6, #0]
 800af3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af42:	460c      	mov	r4, r1
 800af44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af48:	b10a      	cbz	r2, 800af4e <_printf_common+0x26>
 800af4a:	3301      	adds	r3, #1
 800af4c:	6033      	str	r3, [r6, #0]
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	0699      	lsls	r1, r3, #26
 800af52:	bf42      	ittt	mi
 800af54:	6833      	ldrmi	r3, [r6, #0]
 800af56:	3302      	addmi	r3, #2
 800af58:	6033      	strmi	r3, [r6, #0]
 800af5a:	6825      	ldr	r5, [r4, #0]
 800af5c:	f015 0506 	ands.w	r5, r5, #6
 800af60:	d106      	bne.n	800af70 <_printf_common+0x48>
 800af62:	f104 0a19 	add.w	sl, r4, #25
 800af66:	68e3      	ldr	r3, [r4, #12]
 800af68:	6832      	ldr	r2, [r6, #0]
 800af6a:	1a9b      	subs	r3, r3, r2
 800af6c:	42ab      	cmp	r3, r5
 800af6e:	dc2b      	bgt.n	800afc8 <_printf_common+0xa0>
 800af70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af74:	6822      	ldr	r2, [r4, #0]
 800af76:	3b00      	subs	r3, #0
 800af78:	bf18      	it	ne
 800af7a:	2301      	movne	r3, #1
 800af7c:	0692      	lsls	r2, r2, #26
 800af7e:	d430      	bmi.n	800afe2 <_printf_common+0xba>
 800af80:	4641      	mov	r1, r8
 800af82:	4638      	mov	r0, r7
 800af84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af88:	47c8      	blx	r9
 800af8a:	3001      	adds	r0, #1
 800af8c:	d023      	beq.n	800afd6 <_printf_common+0xae>
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	6922      	ldr	r2, [r4, #16]
 800af92:	f003 0306 	and.w	r3, r3, #6
 800af96:	2b04      	cmp	r3, #4
 800af98:	bf14      	ite	ne
 800af9a:	2500      	movne	r5, #0
 800af9c:	6833      	ldreq	r3, [r6, #0]
 800af9e:	f04f 0600 	mov.w	r6, #0
 800afa2:	bf08      	it	eq
 800afa4:	68e5      	ldreq	r5, [r4, #12]
 800afa6:	f104 041a 	add.w	r4, r4, #26
 800afaa:	bf08      	it	eq
 800afac:	1aed      	subeq	r5, r5, r3
 800afae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800afb2:	bf08      	it	eq
 800afb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afb8:	4293      	cmp	r3, r2
 800afba:	bfc4      	itt	gt
 800afbc:	1a9b      	subgt	r3, r3, r2
 800afbe:	18ed      	addgt	r5, r5, r3
 800afc0:	42b5      	cmp	r5, r6
 800afc2:	d11a      	bne.n	800affa <_printf_common+0xd2>
 800afc4:	2000      	movs	r0, #0
 800afc6:	e008      	b.n	800afda <_printf_common+0xb2>
 800afc8:	2301      	movs	r3, #1
 800afca:	4652      	mov	r2, sl
 800afcc:	4641      	mov	r1, r8
 800afce:	4638      	mov	r0, r7
 800afd0:	47c8      	blx	r9
 800afd2:	3001      	adds	r0, #1
 800afd4:	d103      	bne.n	800afde <_printf_common+0xb6>
 800afd6:	f04f 30ff 	mov.w	r0, #4294967295
 800afda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afde:	3501      	adds	r5, #1
 800afe0:	e7c1      	b.n	800af66 <_printf_common+0x3e>
 800afe2:	2030      	movs	r0, #48	@ 0x30
 800afe4:	18e1      	adds	r1, r4, r3
 800afe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aff0:	4422      	add	r2, r4
 800aff2:	3302      	adds	r3, #2
 800aff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aff8:	e7c2      	b.n	800af80 <_printf_common+0x58>
 800affa:	2301      	movs	r3, #1
 800affc:	4622      	mov	r2, r4
 800affe:	4641      	mov	r1, r8
 800b000:	4638      	mov	r0, r7
 800b002:	47c8      	blx	r9
 800b004:	3001      	adds	r0, #1
 800b006:	d0e6      	beq.n	800afd6 <_printf_common+0xae>
 800b008:	3601      	adds	r6, #1
 800b00a:	e7d9      	b.n	800afc0 <_printf_common+0x98>

0800b00c <_printf_i>:
 800b00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b010:	7e0f      	ldrb	r7, [r1, #24]
 800b012:	4691      	mov	r9, r2
 800b014:	2f78      	cmp	r7, #120	@ 0x78
 800b016:	4680      	mov	r8, r0
 800b018:	460c      	mov	r4, r1
 800b01a:	469a      	mov	sl, r3
 800b01c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b01e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b022:	d807      	bhi.n	800b034 <_printf_i+0x28>
 800b024:	2f62      	cmp	r7, #98	@ 0x62
 800b026:	d80a      	bhi.n	800b03e <_printf_i+0x32>
 800b028:	2f00      	cmp	r7, #0
 800b02a:	f000 80d3 	beq.w	800b1d4 <_printf_i+0x1c8>
 800b02e:	2f58      	cmp	r7, #88	@ 0x58
 800b030:	f000 80ba 	beq.w	800b1a8 <_printf_i+0x19c>
 800b034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b03c:	e03a      	b.n	800b0b4 <_printf_i+0xa8>
 800b03e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b042:	2b15      	cmp	r3, #21
 800b044:	d8f6      	bhi.n	800b034 <_printf_i+0x28>
 800b046:	a101      	add	r1, pc, #4	@ (adr r1, 800b04c <_printf_i+0x40>)
 800b048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b04c:	0800b0a5 	.word	0x0800b0a5
 800b050:	0800b0b9 	.word	0x0800b0b9
 800b054:	0800b035 	.word	0x0800b035
 800b058:	0800b035 	.word	0x0800b035
 800b05c:	0800b035 	.word	0x0800b035
 800b060:	0800b035 	.word	0x0800b035
 800b064:	0800b0b9 	.word	0x0800b0b9
 800b068:	0800b035 	.word	0x0800b035
 800b06c:	0800b035 	.word	0x0800b035
 800b070:	0800b035 	.word	0x0800b035
 800b074:	0800b035 	.word	0x0800b035
 800b078:	0800b1bb 	.word	0x0800b1bb
 800b07c:	0800b0e3 	.word	0x0800b0e3
 800b080:	0800b175 	.word	0x0800b175
 800b084:	0800b035 	.word	0x0800b035
 800b088:	0800b035 	.word	0x0800b035
 800b08c:	0800b1dd 	.word	0x0800b1dd
 800b090:	0800b035 	.word	0x0800b035
 800b094:	0800b0e3 	.word	0x0800b0e3
 800b098:	0800b035 	.word	0x0800b035
 800b09c:	0800b035 	.word	0x0800b035
 800b0a0:	0800b17d 	.word	0x0800b17d
 800b0a4:	6833      	ldr	r3, [r6, #0]
 800b0a6:	1d1a      	adds	r2, r3, #4
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6032      	str	r2, [r6, #0]
 800b0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e09e      	b.n	800b1f6 <_printf_i+0x1ea>
 800b0b8:	6833      	ldr	r3, [r6, #0]
 800b0ba:	6820      	ldr	r0, [r4, #0]
 800b0bc:	1d19      	adds	r1, r3, #4
 800b0be:	6031      	str	r1, [r6, #0]
 800b0c0:	0606      	lsls	r6, r0, #24
 800b0c2:	d501      	bpl.n	800b0c8 <_printf_i+0xbc>
 800b0c4:	681d      	ldr	r5, [r3, #0]
 800b0c6:	e003      	b.n	800b0d0 <_printf_i+0xc4>
 800b0c8:	0645      	lsls	r5, r0, #25
 800b0ca:	d5fb      	bpl.n	800b0c4 <_printf_i+0xb8>
 800b0cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0d0:	2d00      	cmp	r5, #0
 800b0d2:	da03      	bge.n	800b0dc <_printf_i+0xd0>
 800b0d4:	232d      	movs	r3, #45	@ 0x2d
 800b0d6:	426d      	negs	r5, r5
 800b0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0dc:	230a      	movs	r3, #10
 800b0de:	4859      	ldr	r0, [pc, #356]	@ (800b244 <_printf_i+0x238>)
 800b0e0:	e011      	b.n	800b106 <_printf_i+0xfa>
 800b0e2:	6821      	ldr	r1, [r4, #0]
 800b0e4:	6833      	ldr	r3, [r6, #0]
 800b0e6:	0608      	lsls	r0, r1, #24
 800b0e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0ec:	d402      	bmi.n	800b0f4 <_printf_i+0xe8>
 800b0ee:	0649      	lsls	r1, r1, #25
 800b0f0:	bf48      	it	mi
 800b0f2:	b2ad      	uxthmi	r5, r5
 800b0f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0f6:	6033      	str	r3, [r6, #0]
 800b0f8:	bf14      	ite	ne
 800b0fa:	230a      	movne	r3, #10
 800b0fc:	2308      	moveq	r3, #8
 800b0fe:	4851      	ldr	r0, [pc, #324]	@ (800b244 <_printf_i+0x238>)
 800b100:	2100      	movs	r1, #0
 800b102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b106:	6866      	ldr	r6, [r4, #4]
 800b108:	2e00      	cmp	r6, #0
 800b10a:	bfa8      	it	ge
 800b10c:	6821      	ldrge	r1, [r4, #0]
 800b10e:	60a6      	str	r6, [r4, #8]
 800b110:	bfa4      	itt	ge
 800b112:	f021 0104 	bicge.w	r1, r1, #4
 800b116:	6021      	strge	r1, [r4, #0]
 800b118:	b90d      	cbnz	r5, 800b11e <_printf_i+0x112>
 800b11a:	2e00      	cmp	r6, #0
 800b11c:	d04b      	beq.n	800b1b6 <_printf_i+0x1aa>
 800b11e:	4616      	mov	r6, r2
 800b120:	fbb5 f1f3 	udiv	r1, r5, r3
 800b124:	fb03 5711 	mls	r7, r3, r1, r5
 800b128:	5dc7      	ldrb	r7, [r0, r7]
 800b12a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b12e:	462f      	mov	r7, r5
 800b130:	42bb      	cmp	r3, r7
 800b132:	460d      	mov	r5, r1
 800b134:	d9f4      	bls.n	800b120 <_printf_i+0x114>
 800b136:	2b08      	cmp	r3, #8
 800b138:	d10b      	bne.n	800b152 <_printf_i+0x146>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	07df      	lsls	r7, r3, #31
 800b13e:	d508      	bpl.n	800b152 <_printf_i+0x146>
 800b140:	6923      	ldr	r3, [r4, #16]
 800b142:	6861      	ldr	r1, [r4, #4]
 800b144:	4299      	cmp	r1, r3
 800b146:	bfde      	ittt	le
 800b148:	2330      	movle	r3, #48	@ 0x30
 800b14a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b14e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b152:	1b92      	subs	r2, r2, r6
 800b154:	6122      	str	r2, [r4, #16]
 800b156:	464b      	mov	r3, r9
 800b158:	4621      	mov	r1, r4
 800b15a:	4640      	mov	r0, r8
 800b15c:	f8cd a000 	str.w	sl, [sp]
 800b160:	aa03      	add	r2, sp, #12
 800b162:	f7ff fee1 	bl	800af28 <_printf_common>
 800b166:	3001      	adds	r0, #1
 800b168:	d14a      	bne.n	800b200 <_printf_i+0x1f4>
 800b16a:	f04f 30ff 	mov.w	r0, #4294967295
 800b16e:	b004      	add	sp, #16
 800b170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	f043 0320 	orr.w	r3, r3, #32
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	2778      	movs	r7, #120	@ 0x78
 800b17e:	4832      	ldr	r0, [pc, #200]	@ (800b248 <_printf_i+0x23c>)
 800b180:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	6831      	ldr	r1, [r6, #0]
 800b188:	061f      	lsls	r7, r3, #24
 800b18a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b18e:	d402      	bmi.n	800b196 <_printf_i+0x18a>
 800b190:	065f      	lsls	r7, r3, #25
 800b192:	bf48      	it	mi
 800b194:	b2ad      	uxthmi	r5, r5
 800b196:	6031      	str	r1, [r6, #0]
 800b198:	07d9      	lsls	r1, r3, #31
 800b19a:	bf44      	itt	mi
 800b19c:	f043 0320 	orrmi.w	r3, r3, #32
 800b1a0:	6023      	strmi	r3, [r4, #0]
 800b1a2:	b11d      	cbz	r5, 800b1ac <_printf_i+0x1a0>
 800b1a4:	2310      	movs	r3, #16
 800b1a6:	e7ab      	b.n	800b100 <_printf_i+0xf4>
 800b1a8:	4826      	ldr	r0, [pc, #152]	@ (800b244 <_printf_i+0x238>)
 800b1aa:	e7e9      	b.n	800b180 <_printf_i+0x174>
 800b1ac:	6823      	ldr	r3, [r4, #0]
 800b1ae:	f023 0320 	bic.w	r3, r3, #32
 800b1b2:	6023      	str	r3, [r4, #0]
 800b1b4:	e7f6      	b.n	800b1a4 <_printf_i+0x198>
 800b1b6:	4616      	mov	r6, r2
 800b1b8:	e7bd      	b.n	800b136 <_printf_i+0x12a>
 800b1ba:	6833      	ldr	r3, [r6, #0]
 800b1bc:	6825      	ldr	r5, [r4, #0]
 800b1be:	1d18      	adds	r0, r3, #4
 800b1c0:	6961      	ldr	r1, [r4, #20]
 800b1c2:	6030      	str	r0, [r6, #0]
 800b1c4:	062e      	lsls	r6, r5, #24
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	d501      	bpl.n	800b1ce <_printf_i+0x1c2>
 800b1ca:	6019      	str	r1, [r3, #0]
 800b1cc:	e002      	b.n	800b1d4 <_printf_i+0x1c8>
 800b1ce:	0668      	lsls	r0, r5, #25
 800b1d0:	d5fb      	bpl.n	800b1ca <_printf_i+0x1be>
 800b1d2:	8019      	strh	r1, [r3, #0]
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	4616      	mov	r6, r2
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	e7bc      	b.n	800b156 <_printf_i+0x14a>
 800b1dc:	6833      	ldr	r3, [r6, #0]
 800b1de:	2100      	movs	r1, #0
 800b1e0:	1d1a      	adds	r2, r3, #4
 800b1e2:	6032      	str	r2, [r6, #0]
 800b1e4:	681e      	ldr	r6, [r3, #0]
 800b1e6:	6862      	ldr	r2, [r4, #4]
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 f859 	bl	800b2a0 <memchr>
 800b1ee:	b108      	cbz	r0, 800b1f4 <_printf_i+0x1e8>
 800b1f0:	1b80      	subs	r0, r0, r6
 800b1f2:	6060      	str	r0, [r4, #4]
 800b1f4:	6863      	ldr	r3, [r4, #4]
 800b1f6:	6123      	str	r3, [r4, #16]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1fe:	e7aa      	b.n	800b156 <_printf_i+0x14a>
 800b200:	4632      	mov	r2, r6
 800b202:	4649      	mov	r1, r9
 800b204:	4640      	mov	r0, r8
 800b206:	6923      	ldr	r3, [r4, #16]
 800b208:	47d0      	blx	sl
 800b20a:	3001      	adds	r0, #1
 800b20c:	d0ad      	beq.n	800b16a <_printf_i+0x15e>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	079b      	lsls	r3, r3, #30
 800b212:	d413      	bmi.n	800b23c <_printf_i+0x230>
 800b214:	68e0      	ldr	r0, [r4, #12]
 800b216:	9b03      	ldr	r3, [sp, #12]
 800b218:	4298      	cmp	r0, r3
 800b21a:	bfb8      	it	lt
 800b21c:	4618      	movlt	r0, r3
 800b21e:	e7a6      	b.n	800b16e <_printf_i+0x162>
 800b220:	2301      	movs	r3, #1
 800b222:	4632      	mov	r2, r6
 800b224:	4649      	mov	r1, r9
 800b226:	4640      	mov	r0, r8
 800b228:	47d0      	blx	sl
 800b22a:	3001      	adds	r0, #1
 800b22c:	d09d      	beq.n	800b16a <_printf_i+0x15e>
 800b22e:	3501      	adds	r5, #1
 800b230:	68e3      	ldr	r3, [r4, #12]
 800b232:	9903      	ldr	r1, [sp, #12]
 800b234:	1a5b      	subs	r3, r3, r1
 800b236:	42ab      	cmp	r3, r5
 800b238:	dcf2      	bgt.n	800b220 <_printf_i+0x214>
 800b23a:	e7eb      	b.n	800b214 <_printf_i+0x208>
 800b23c:	2500      	movs	r5, #0
 800b23e:	f104 0619 	add.w	r6, r4, #25
 800b242:	e7f5      	b.n	800b230 <_printf_i+0x224>
 800b244:	0800b3e7 	.word	0x0800b3e7
 800b248:	0800b3f8 	.word	0x0800b3f8

0800b24c <memmove>:
 800b24c:	4288      	cmp	r0, r1
 800b24e:	b510      	push	{r4, lr}
 800b250:	eb01 0402 	add.w	r4, r1, r2
 800b254:	d902      	bls.n	800b25c <memmove+0x10>
 800b256:	4284      	cmp	r4, r0
 800b258:	4623      	mov	r3, r4
 800b25a:	d807      	bhi.n	800b26c <memmove+0x20>
 800b25c:	1e43      	subs	r3, r0, #1
 800b25e:	42a1      	cmp	r1, r4
 800b260:	d008      	beq.n	800b274 <memmove+0x28>
 800b262:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b26a:	e7f8      	b.n	800b25e <memmove+0x12>
 800b26c:	4601      	mov	r1, r0
 800b26e:	4402      	add	r2, r0
 800b270:	428a      	cmp	r2, r1
 800b272:	d100      	bne.n	800b276 <memmove+0x2a>
 800b274:	bd10      	pop	{r4, pc}
 800b276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b27a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b27e:	e7f7      	b.n	800b270 <memmove+0x24>

0800b280 <_sbrk_r>:
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	2300      	movs	r3, #0
 800b284:	4d05      	ldr	r5, [pc, #20]	@ (800b29c <_sbrk_r+0x1c>)
 800b286:	4604      	mov	r4, r0
 800b288:	4608      	mov	r0, r1
 800b28a:	602b      	str	r3, [r5, #0]
 800b28c:	f7f6 fd04 	bl	8001c98 <_sbrk>
 800b290:	1c43      	adds	r3, r0, #1
 800b292:	d102      	bne.n	800b29a <_sbrk_r+0x1a>
 800b294:	682b      	ldr	r3, [r5, #0]
 800b296:	b103      	cbz	r3, 800b29a <_sbrk_r+0x1a>
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	bd38      	pop	{r3, r4, r5, pc}
 800b29c:	200016b0 	.word	0x200016b0

0800b2a0 <memchr>:
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	b510      	push	{r4, lr}
 800b2a4:	b2c9      	uxtb	r1, r1
 800b2a6:	4402      	add	r2, r0
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	d101      	bne.n	800b2b2 <memchr+0x12>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	e003      	b.n	800b2ba <memchr+0x1a>
 800b2b2:	7804      	ldrb	r4, [r0, #0]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	428c      	cmp	r4, r1
 800b2b8:	d1f6      	bne.n	800b2a8 <memchr+0x8>
 800b2ba:	bd10      	pop	{r4, pc}

0800b2bc <memcpy>:
 800b2bc:	440a      	add	r2, r1
 800b2be:	4291      	cmp	r1, r2
 800b2c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2c4:	d100      	bne.n	800b2c8 <memcpy+0xc>
 800b2c6:	4770      	bx	lr
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ce:	4291      	cmp	r1, r2
 800b2d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2d4:	d1f9      	bne.n	800b2ca <memcpy+0xe>
 800b2d6:	bd10      	pop	{r4, pc}

0800b2d8 <_realloc_r>:
 800b2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2dc:	4680      	mov	r8, r0
 800b2de:	4615      	mov	r5, r2
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	b921      	cbnz	r1, 800b2ee <_realloc_r+0x16>
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ea:	f7ff bc39 	b.w	800ab60 <_malloc_r>
 800b2ee:	b92a      	cbnz	r2, 800b2fc <_realloc_r+0x24>
 800b2f0:	f7ff fbcc 	bl	800aa8c <_free_r>
 800b2f4:	2400      	movs	r4, #0
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2fc:	f000 f81a 	bl	800b334 <_malloc_usable_size_r>
 800b300:	4285      	cmp	r5, r0
 800b302:	4606      	mov	r6, r0
 800b304:	d802      	bhi.n	800b30c <_realloc_r+0x34>
 800b306:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b30a:	d8f4      	bhi.n	800b2f6 <_realloc_r+0x1e>
 800b30c:	4629      	mov	r1, r5
 800b30e:	4640      	mov	r0, r8
 800b310:	f7ff fc26 	bl	800ab60 <_malloc_r>
 800b314:	4607      	mov	r7, r0
 800b316:	2800      	cmp	r0, #0
 800b318:	d0ec      	beq.n	800b2f4 <_realloc_r+0x1c>
 800b31a:	42b5      	cmp	r5, r6
 800b31c:	462a      	mov	r2, r5
 800b31e:	4621      	mov	r1, r4
 800b320:	bf28      	it	cs
 800b322:	4632      	movcs	r2, r6
 800b324:	f7ff ffca 	bl	800b2bc <memcpy>
 800b328:	4621      	mov	r1, r4
 800b32a:	4640      	mov	r0, r8
 800b32c:	f7ff fbae 	bl	800aa8c <_free_r>
 800b330:	463c      	mov	r4, r7
 800b332:	e7e0      	b.n	800b2f6 <_realloc_r+0x1e>

0800b334 <_malloc_usable_size_r>:
 800b334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b338:	1f18      	subs	r0, r3, #4
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	bfbc      	itt	lt
 800b33e:	580b      	ldrlt	r3, [r1, r0]
 800b340:	18c0      	addlt	r0, r0, r3
 800b342:	4770      	bx	lr

0800b344 <_init>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	bf00      	nop
 800b348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b34a:	bc08      	pop	{r3}
 800b34c:	469e      	mov	lr, r3
 800b34e:	4770      	bx	lr

0800b350 <_fini>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	bf00      	nop
 800b354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b356:	bc08      	pop	{r3}
 800b358:	469e      	mov	lr, r3
 800b35a:	4770      	bx	lr
