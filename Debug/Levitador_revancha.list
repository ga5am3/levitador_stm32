
Levitador_revancha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b258  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800b368  0800b368  0000c368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b410  0800b410  0000d264  2**0
                  CONTENTS
  4 .ARM          00000008  0800b410  0800b410  0000c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b418  0800b418  0000d264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b418  0800b418  0000c418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b41c  0800b41c  0000c41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  0800b420  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001474  20000264  0800b684  0000d264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016d8  0800b684  0000d6d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001396b  00000000  00000000  0000d28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000365f  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00024258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d94  00000000  00000000  00025438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad9f  00000000  00000000  000261cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016469  00000000  00000000  00040f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092372  00000000  00000000  000573d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000511c  00000000  00000000  000e978c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ee8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000264 	.word	0x20000264
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b350 	.word	0x0800b350

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000268 	.word	0x20000268
 800014c:	0800b350 	.word	0x0800b350

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2f>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000734:	bf24      	itt	cs
 8000736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800073a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800073e:	d90d      	bls.n	800075c <__aeabi_d2f+0x30>
 8000740:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800074c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000754:	bf08      	it	eq
 8000756:	f020 0001 	biceq.w	r0, r0, #1
 800075a:	4770      	bx	lr
 800075c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000760:	d121      	bne.n	80007a6 <__aeabi_d2f+0x7a>
 8000762:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000766:	bfbc      	itt	lt
 8000768:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800076c:	4770      	bxlt	lr
 800076e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000772:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000776:	f1c2 0218 	rsb	r2, r2, #24
 800077a:	f1c2 0c20 	rsb	ip, r2, #32
 800077e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	bf18      	it	ne
 8000788:	f040 0001 	orrne.w	r0, r0, #1
 800078c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000794:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000798:	ea40 000c 	orr.w	r0, r0, ip
 800079c:	fa23 f302 	lsr.w	r3, r3, r2
 80007a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a4:	e7cc      	b.n	8000740 <__aeabi_d2f+0x14>
 80007a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007aa:	d107      	bne.n	80007bc <__aeabi_d2f+0x90>
 80007ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007b0:	bf1e      	ittt	ne
 80007b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007ba:	4770      	bxne	lr
 80007bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <__aeabi_frsub>:
 80007cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007d0:	e002      	b.n	80007d8 <__addsf3>
 80007d2:	bf00      	nop

080007d4 <__aeabi_fsub>:
 80007d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080007d8 <__addsf3>:
 80007d8:	0042      	lsls	r2, r0, #1
 80007da:	bf1f      	itttt	ne
 80007dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007e0:	ea92 0f03 	teqne	r2, r3
 80007e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007ec:	d06a      	beq.n	80008c4 <__addsf3+0xec>
 80007ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007f6:	bfc1      	itttt	gt
 80007f8:	18d2      	addgt	r2, r2, r3
 80007fa:	4041      	eorgt	r1, r0
 80007fc:	4048      	eorgt	r0, r1
 80007fe:	4041      	eorgt	r1, r0
 8000800:	bfb8      	it	lt
 8000802:	425b      	neglt	r3, r3
 8000804:	2b19      	cmp	r3, #25
 8000806:	bf88      	it	hi
 8000808:	4770      	bxhi	lr
 800080a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800080e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000812:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4240      	negne	r0, r0
 800081a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800081e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000822:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000826:	bf18      	it	ne
 8000828:	4249      	negne	r1, r1
 800082a:	ea92 0f03 	teq	r2, r3
 800082e:	d03f      	beq.n	80008b0 <__addsf3+0xd8>
 8000830:	f1a2 0201 	sub.w	r2, r2, #1
 8000834:	fa41 fc03 	asr.w	ip, r1, r3
 8000838:	eb10 000c 	adds.w	r0, r0, ip
 800083c:	f1c3 0320 	rsb	r3, r3, #32
 8000840:	fa01 f103 	lsl.w	r1, r1, r3
 8000844:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000848:	d502      	bpl.n	8000850 <__addsf3+0x78>
 800084a:	4249      	negs	r1, r1
 800084c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000850:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000854:	d313      	bcc.n	800087e <__addsf3+0xa6>
 8000856:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800085a:	d306      	bcc.n	800086a <__addsf3+0x92>
 800085c:	0840      	lsrs	r0, r0, #1
 800085e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000862:	f102 0201 	add.w	r2, r2, #1
 8000866:	2afe      	cmp	r2, #254	@ 0xfe
 8000868:	d251      	bcs.n	800090e <__addsf3+0x136>
 800086a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800086e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000872:	bf08      	it	eq
 8000874:	f020 0001 	biceq.w	r0, r0, #1
 8000878:	ea40 0003 	orr.w	r0, r0, r3
 800087c:	4770      	bx	lr
 800087e:	0049      	lsls	r1, r1, #1
 8000880:	eb40 0000 	adc.w	r0, r0, r0
 8000884:	3a01      	subs	r2, #1
 8000886:	bf28      	it	cs
 8000888:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800088c:	d2ed      	bcs.n	800086a <__addsf3+0x92>
 800088e:	fab0 fc80 	clz	ip, r0
 8000892:	f1ac 0c08 	sub.w	ip, ip, #8
 8000896:	ebb2 020c 	subs.w	r2, r2, ip
 800089a:	fa00 f00c 	lsl.w	r0, r0, ip
 800089e:	bfaa      	itet	ge
 80008a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008a4:	4252      	neglt	r2, r2
 80008a6:	4318      	orrge	r0, r3
 80008a8:	bfbc      	itt	lt
 80008aa:	40d0      	lsrlt	r0, r2
 80008ac:	4318      	orrlt	r0, r3
 80008ae:	4770      	bx	lr
 80008b0:	f092 0f00 	teq	r2, #0
 80008b4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80008b8:	bf06      	itte	eq
 80008ba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80008be:	3201      	addeq	r2, #1
 80008c0:	3b01      	subne	r3, #1
 80008c2:	e7b5      	b.n	8000830 <__addsf3+0x58>
 80008c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008cc:	bf18      	it	ne
 80008ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008d2:	d021      	beq.n	8000918 <__addsf3+0x140>
 80008d4:	ea92 0f03 	teq	r2, r3
 80008d8:	d004      	beq.n	80008e4 <__addsf3+0x10c>
 80008da:	f092 0f00 	teq	r2, #0
 80008de:	bf08      	it	eq
 80008e0:	4608      	moveq	r0, r1
 80008e2:	4770      	bx	lr
 80008e4:	ea90 0f01 	teq	r0, r1
 80008e8:	bf1c      	itt	ne
 80008ea:	2000      	movne	r0, #0
 80008ec:	4770      	bxne	lr
 80008ee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008f2:	d104      	bne.n	80008fe <__addsf3+0x126>
 80008f4:	0040      	lsls	r0, r0, #1
 80008f6:	bf28      	it	cs
 80008f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008fc:	4770      	bx	lr
 80008fe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000902:	bf3c      	itt	cc
 8000904:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000908:	4770      	bxcc	lr
 800090a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800090e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000912:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000916:	4770      	bx	lr
 8000918:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800091c:	bf16      	itet	ne
 800091e:	4608      	movne	r0, r1
 8000920:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000924:	4601      	movne	r1, r0
 8000926:	0242      	lsls	r2, r0, #9
 8000928:	bf06      	itte	eq
 800092a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800092e:	ea90 0f01 	teqeq	r0, r1
 8000932:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000936:	4770      	bx	lr

08000938 <__aeabi_ui2f>:
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e004      	b.n	8000948 <__aeabi_i2f+0x8>
 800093e:	bf00      	nop

08000940 <__aeabi_i2f>:
 8000940:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000944:	bf48      	it	mi
 8000946:	4240      	negmi	r0, r0
 8000948:	ea5f 0c00 	movs.w	ip, r0
 800094c:	bf08      	it	eq
 800094e:	4770      	bxeq	lr
 8000950:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000954:	4601      	mov	r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	e01c      	b.n	8000996 <__aeabi_l2f+0x2a>

0800095c <__aeabi_ul2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e00a      	b.n	8000980 <__aeabi_l2f+0x14>
 800096a:	bf00      	nop

0800096c <__aeabi_l2f>:
 800096c:	ea50 0201 	orrs.w	r2, r0, r1
 8000970:	bf08      	it	eq
 8000972:	4770      	bxeq	lr
 8000974:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000978:	d502      	bpl.n	8000980 <__aeabi_l2f+0x14>
 800097a:	4240      	negs	r0, r0
 800097c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000980:	ea5f 0c01 	movs.w	ip, r1
 8000984:	bf02      	ittt	eq
 8000986:	4684      	moveq	ip, r0
 8000988:	4601      	moveq	r1, r0
 800098a:	2000      	moveq	r0, #0
 800098c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000990:	bf08      	it	eq
 8000992:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000996:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800099a:	fabc f28c 	clz	r2, ip
 800099e:	3a08      	subs	r2, #8
 80009a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009a4:	db10      	blt.n	80009c8 <__aeabi_l2f+0x5c>
 80009a6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009aa:	4463      	add	r3, ip
 80009ac:	fa00 fc02 	lsl.w	ip, r0, r2
 80009b0:	f1c2 0220 	rsb	r2, r2, #32
 80009b4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80009b8:	fa20 f202 	lsr.w	r2, r0, r2
 80009bc:	eb43 0002 	adc.w	r0, r3, r2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f102 0220 	add.w	r2, r2, #32
 80009cc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009d0:	f1c2 0220 	rsb	r2, r2, #32
 80009d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009d8:	fa21 f202 	lsr.w	r2, r1, r2
 80009dc:	eb43 0002 	adc.w	r0, r3, r2
 80009e0:	bf08      	it	eq
 80009e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_fmul>:
 80009e8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f0:	bf1e      	ittt	ne
 80009f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f6:	ea92 0f0c 	teqne	r2, ip
 80009fa:	ea93 0f0c 	teqne	r3, ip
 80009fe:	d06f      	beq.n	8000ae0 <__aeabi_fmul+0xf8>
 8000a00:	441a      	add	r2, r3
 8000a02:	ea80 0c01 	eor.w	ip, r0, r1
 8000a06:	0240      	lsls	r0, r0, #9
 8000a08:	bf18      	it	ne
 8000a0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a0e:	d01e      	beq.n	8000a4e <__aeabi_fmul+0x66>
 8000a10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a28:	bf3e      	ittt	cc
 8000a2a:	0049      	lslcc	r1, r1, #1
 8000a2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a30:	005b      	lslcc	r3, r3, #1
 8000a32:	ea40 0001 	orr.w	r0, r0, r1
 8000a36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000a3c:	d81d      	bhi.n	8000a7a <__aeabi_fmul+0x92>
 8000a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000a42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a46:	bf08      	it	eq
 8000a48:	f020 0001 	biceq.w	r0, r0, #1
 8000a4c:	4770      	bx	lr
 8000a4e:	f090 0f00 	teq	r0, #0
 8000a52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a56:	bf08      	it	eq
 8000a58:	0249      	lsleq	r1, r1, #9
 8000a5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a62:	3a7f      	subs	r2, #127	@ 0x7f
 8000a64:	bfc2      	ittt	gt
 8000a66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a6e:	4770      	bxgt	lr
 8000a70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	3a01      	subs	r2, #1
 8000a7a:	dc5d      	bgt.n	8000b38 <__aeabi_fmul+0x150>
 8000a7c:	f112 0f19 	cmn.w	r2, #25
 8000a80:	bfdc      	itt	le
 8000a82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a86:	4770      	bxle	lr
 8000a88:	f1c2 0200 	rsb	r2, r2, #0
 8000a8c:	0041      	lsls	r1, r0, #1
 8000a8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a92:	f1c2 0220 	rsb	r2, r2, #32
 8000a96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a9e:	f140 0000 	adc.w	r0, r0, #0
 8000aa2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000aa6:	bf08      	it	eq
 8000aa8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aac:	4770      	bx	lr
 8000aae:	f092 0f00 	teq	r2, #0
 8000ab2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ab6:	bf02      	ittt	eq
 8000ab8:	0040      	lsleq	r0, r0, #1
 8000aba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000abe:	3a01      	subeq	r2, #1
 8000ac0:	d0f9      	beq.n	8000ab6 <__aeabi_fmul+0xce>
 8000ac2:	ea40 000c 	orr.w	r0, r0, ip
 8000ac6:	f093 0f00 	teq	r3, #0
 8000aca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ace:	bf02      	ittt	eq
 8000ad0:	0049      	lsleq	r1, r1, #1
 8000ad2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ad6:	3b01      	subeq	r3, #1
 8000ad8:	d0f9      	beq.n	8000ace <__aeabi_fmul+0xe6>
 8000ada:	ea41 010c 	orr.w	r1, r1, ip
 8000ade:	e78f      	b.n	8000a00 <__aeabi_fmul+0x18>
 8000ae0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ae4:	ea92 0f0c 	teq	r2, ip
 8000ae8:	bf18      	it	ne
 8000aea:	ea93 0f0c 	teqne	r3, ip
 8000aee:	d00a      	beq.n	8000b06 <__aeabi_fmul+0x11e>
 8000af0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000af4:	bf18      	it	ne
 8000af6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000afa:	d1d8      	bne.n	8000aae <__aeabi_fmul+0xc6>
 8000afc:	ea80 0001 	eor.w	r0, r0, r1
 8000b00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b04:	4770      	bx	lr
 8000b06:	f090 0f00 	teq	r0, #0
 8000b0a:	bf17      	itett	ne
 8000b0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000b10:	4608      	moveq	r0, r1
 8000b12:	f091 0f00 	teqne	r1, #0
 8000b16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b1a:	d014      	beq.n	8000b46 <__aeabi_fmul+0x15e>
 8000b1c:	ea92 0f0c 	teq	r2, ip
 8000b20:	d101      	bne.n	8000b26 <__aeabi_fmul+0x13e>
 8000b22:	0242      	lsls	r2, r0, #9
 8000b24:	d10f      	bne.n	8000b46 <__aeabi_fmul+0x15e>
 8000b26:	ea93 0f0c 	teq	r3, ip
 8000b2a:	d103      	bne.n	8000b34 <__aeabi_fmul+0x14c>
 8000b2c:	024b      	lsls	r3, r1, #9
 8000b2e:	bf18      	it	ne
 8000b30:	4608      	movne	r0, r1
 8000b32:	d108      	bne.n	8000b46 <__aeabi_fmul+0x15e>
 8000b34:	ea80 0001 	eor.w	r0, r0, r1
 8000b38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_fdiv>:
 8000b50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b58:	bf1e      	ittt	ne
 8000b5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b5e:	ea92 0f0c 	teqne	r2, ip
 8000b62:	ea93 0f0c 	teqne	r3, ip
 8000b66:	d069      	beq.n	8000c3c <__aeabi_fdiv+0xec>
 8000b68:	eba2 0203 	sub.w	r2, r2, r3
 8000b6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b70:	0249      	lsls	r1, r1, #9
 8000b72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b76:	d037      	beq.n	8000be8 <__aeabi_fdiv+0x98>
 8000b78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	bf38      	it	cc
 8000b8c:	005b      	lslcc	r3, r3, #1
 8000b8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b96:	428b      	cmp	r3, r1
 8000b98:	bf24      	itt	cs
 8000b9a:	1a5b      	subcs	r3, r3, r1
 8000b9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ba0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ba4:	bf24      	itt	cs
 8000ba6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000baa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bb2:	bf24      	itt	cs
 8000bb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000bb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bc0:	bf24      	itt	cs
 8000bc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	bf18      	it	ne
 8000bce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bd2:	d1e0      	bne.n	8000b96 <__aeabi_fdiv+0x46>
 8000bd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000bd6:	f63f af50 	bhi.w	8000a7a <__aeabi_fmul+0x92>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bf0:	327f      	adds	r2, #127	@ 0x7f
 8000bf2:	bfc2      	ittt	gt
 8000bf4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bf8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bfc:	4770      	bxgt	lr
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c02:	f04f 0300 	mov.w	r3, #0
 8000c06:	3a01      	subs	r2, #1
 8000c08:	e737      	b.n	8000a7a <__aeabi_fmul+0x92>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c12:	bf02      	ittt	eq
 8000c14:	0040      	lsleq	r0, r0, #1
 8000c16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c1a:	3a01      	subeq	r2, #1
 8000c1c:	d0f9      	beq.n	8000c12 <__aeabi_fdiv+0xc2>
 8000c1e:	ea40 000c 	orr.w	r0, r0, ip
 8000c22:	f093 0f00 	teq	r3, #0
 8000c26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c2a:	bf02      	ittt	eq
 8000c2c:	0049      	lsleq	r1, r1, #1
 8000c2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c32:	3b01      	subeq	r3, #1
 8000c34:	d0f9      	beq.n	8000c2a <__aeabi_fdiv+0xda>
 8000c36:	ea41 010c 	orr.w	r1, r1, ip
 8000c3a:	e795      	b.n	8000b68 <__aeabi_fdiv+0x18>
 8000c3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c40:	ea92 0f0c 	teq	r2, ip
 8000c44:	d108      	bne.n	8000c58 <__aeabi_fdiv+0x108>
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	f47f af7d 	bne.w	8000b46 <__aeabi_fmul+0x15e>
 8000c4c:	ea93 0f0c 	teq	r3, ip
 8000c50:	f47f af70 	bne.w	8000b34 <__aeabi_fmul+0x14c>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e776      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c58:	ea93 0f0c 	teq	r3, ip
 8000c5c:	d104      	bne.n	8000c68 <__aeabi_fdiv+0x118>
 8000c5e:	024b      	lsls	r3, r1, #9
 8000c60:	f43f af4c 	beq.w	8000afc <__aeabi_fmul+0x114>
 8000c64:	4608      	mov	r0, r1
 8000c66:	e76e      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c72:	d1ca      	bne.n	8000c0a <__aeabi_fdiv+0xba>
 8000c74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c78:	f47f af5c 	bne.w	8000b34 <__aeabi_fmul+0x14c>
 8000c7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c80:	f47f af3c 	bne.w	8000afc <__aeabi_fmul+0x114>
 8000c84:	e75f      	b.n	8000b46 <__aeabi_fmul+0x15e>
 8000c86:	bf00      	nop

08000c88 <__gesf2>:
 8000c88:	f04f 3cff 	mov.w	ip, #4294967295
 8000c8c:	e006      	b.n	8000c9c <__cmpsf2+0x4>
 8000c8e:	bf00      	nop

08000c90 <__lesf2>:
 8000c90:	f04f 0c01 	mov.w	ip, #1
 8000c94:	e002      	b.n	8000c9c <__cmpsf2+0x4>
 8000c96:	bf00      	nop

08000c98 <__cmpsf2>:
 8000c98:	f04f 0c01 	mov.w	ip, #1
 8000c9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ca0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d011      	beq.n	8000cd8 <__cmpsf2+0x40>
 8000cb4:	b001      	add	sp, #4
 8000cb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cba:	bf18      	it	ne
 8000cbc:	ea90 0f01 	teqne	r0, r1
 8000cc0:	bf58      	it	pl
 8000cc2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cc6:	bf88      	it	hi
 8000cc8:	17c8      	asrhi	r0, r1, #31
 8000cca:	bf38      	it	cc
 8000ccc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cd0:	bf18      	it	ne
 8000cd2:	f040 0001 	orrne.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cdc:	d102      	bne.n	8000ce4 <__cmpsf2+0x4c>
 8000cde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ce2:	d105      	bne.n	8000cf0 <__cmpsf2+0x58>
 8000ce4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ce8:	d1e4      	bne.n	8000cb4 <__cmpsf2+0x1c>
 8000cea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cee:	d0e1      	beq.n	8000cb4 <__cmpsf2+0x1c>
 8000cf0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_cfrcmple>:
 8000cf8:	4684      	mov	ip, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4661      	mov	r1, ip
 8000cfe:	e7ff      	b.n	8000d00 <__aeabi_cfcmpeq>

08000d00 <__aeabi_cfcmpeq>:
 8000d00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d02:	f7ff ffc9 	bl	8000c98 <__cmpsf2>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	bf48      	it	mi
 8000d0a:	f110 0f00 	cmnmi.w	r0, #0
 8000d0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d10 <__aeabi_fcmpeq>:
 8000d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d14:	f7ff fff4 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d18:	bf0c      	ite	eq
 8000d1a:	2001      	moveq	r0, #1
 8000d1c:	2000      	movne	r0, #0
 8000d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d22:	bf00      	nop

08000d24 <__aeabi_fcmplt>:
 8000d24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d28:	f7ff ffea 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d2c:	bf34      	ite	cc
 8000d2e:	2001      	movcc	r0, #1
 8000d30:	2000      	movcs	r0, #0
 8000d32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d36:	bf00      	nop

08000d38 <__aeabi_fcmple>:
 8000d38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d3c:	f7ff ffe0 	bl	8000d00 <__aeabi_cfcmpeq>
 8000d40:	bf94      	ite	ls
 8000d42:	2001      	movls	r0, #1
 8000d44:	2000      	movhi	r0, #0
 8000d46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4a:	bf00      	nop

08000d4c <__aeabi_fcmpge>:
 8000d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d50:	f7ff ffd2 	bl	8000cf8 <__aeabi_cfrcmple>
 8000d54:	bf94      	ite	ls
 8000d56:	2001      	movls	r0, #1
 8000d58:	2000      	movhi	r0, #0
 8000d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5e:	bf00      	nop

08000d60 <__aeabi_fcmpgt>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff ffc8 	bl	8000cf8 <__aeabi_cfrcmple>
 8000d68:	bf34      	ite	cc
 8000d6a:	2001      	movcc	r0, #1
 8000d6c:	2000      	movcs	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_f2iz>:
 8000d74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d7c:	d30f      	bcc.n	8000d9e <__aeabi_f2iz+0x2a>
 8000d7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d86:	d90d      	bls.n	8000da4 <__aeabi_f2iz+0x30>
 8000d88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d90:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d94:	fa23 f002 	lsr.w	r0, r3, r2
 8000d98:	bf18      	it	ne
 8000d9a:	4240      	negne	r0, r0
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000da8:	d101      	bne.n	8000dae <__aeabi_f2iz+0x3a>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d105      	bne.n	8000dba <__aeabi_f2iz+0x46>
 8000dae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_f2uiz>:
 8000dc0:	0042      	lsls	r2, r0, #1
 8000dc2:	d20e      	bcs.n	8000de2 <__aeabi_f2uiz+0x22>
 8000dc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000dc8:	d30b      	bcc.n	8000de2 <__aeabi_f2uiz+0x22>
 8000dca:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000dce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dd2:	d409      	bmi.n	8000de8 <__aeabi_f2uiz+0x28>
 8000dd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ddc:	fa23 f002 	lsr.w	r0, r3, r2
 8000de0:	4770      	bx	lr
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	4770      	bx	lr
 8000de8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dec:	d101      	bne.n	8000df2 <__aeabi_f2uiz+0x32>
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	d102      	bne.n	8000df8 <__aeabi_f2uiz+0x38>
 8000df2:	f04f 30ff 	mov.w	r0, #4294967295
 8000df6:	4770      	bx	lr
 8000df8:	f04f 0000 	mov.w	r0, #0
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <fixed_to_float>:
{
  return (fixed_point_t)(x * (1 << FRACTIONAL_BITS));
}

float fixed_to_float(fixed_point_t x)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  return (float)x / (1 << FRACTIONAL_BITS);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fd99 	bl	8000940 <__aeabi_i2f>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe9b 	bl	8000b50 <__aeabi_fdiv>
 8000e1a:	4603      	mov	r3, r0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <fixed_multiply>:

fixed_point_t fixed_multiply(fixed_point_t a, fixed_point_t b)
{
 8000e24:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
  return (fixed_point_t)(((int64_t)a * b) >> FRACTIONAL_BITS);
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	17c8      	asrs	r0, r1, #31
 8000e34:	4688      	mov	r8, r1
 8000e36:	4681      	mov	r9, r0
 8000e38:	6839      	ldr	r1, [r7, #0]
 8000e3a:	17c8      	asrs	r0, r1, #31
 8000e3c:	460c      	mov	r4, r1
 8000e3e:	4605      	mov	r5, r0
 8000e40:	fb04 f009 	mul.w	r0, r4, r9
 8000e44:	fb08 f105 	mul.w	r1, r8, r5
 8000e48:	4401      	add	r1, r0
 8000e4a:	fba8 2304 	umull	r2, r3, r8, r4
 8000e4e:	4419      	add	r1, r3
 8000e50:	460b      	mov	r3, r1
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	f04f 0100 	mov.w	r1, #0
 8000e5a:	0d90      	lsrs	r0, r2, #22
 8000e5c:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 8000e60:	1599      	asrs	r1, r3, #22
 8000e62:	4603      	mov	r3, r0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000e6e:	4770      	bx	lr

08000e70 <matmul>:

void matmul(int rowsA, int colsA, int colsB,
            const fixed_point_t A[rowsA][colsA],
            const fixed_point_t B[colsA][colsB],
            fixed_point_t result[rowsA][colsB])
{
 8000e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e74:	b08d      	sub	sp, #52	@ 0x34
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6178      	str	r0, [r7, #20]
 8000e7a:	6139      	str	r1, [r7, #16]
 8000e7c:	60fa      	str	r2, [r7, #12]
 8000e7e:	60bb      	str	r3, [r7, #8]
            const fixed_point_t A[rowsA][colsA],
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	1e53      	subs	r3, r2, #1
void matmul(int rowsA, int colsA, int colsB,
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	4692      	mov	sl, r2
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000e9a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000e9e:	ea4f 124a 	mov.w	r2, sl, lsl #5
            const fixed_point_t B[colsA][colsB],
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	603a      	str	r2, [r7, #0]
 8000ea6:	1e53      	subs	r3, r2, #1
void matmul(int rowsA, int colsA, int colsB,
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	4690      	mov	r8, r2
 8000eae:	4699      	mov	r9, r3
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ebc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000ec0:	ea4f 1248 	mov.w	r2, r8, lsl #5
            fixed_point_t result[rowsA][colsB])
 8000ec4:	68fe      	ldr	r6, [r7, #12]
 8000ec6:	1e73      	subs	r3, r6, #1
void matmul(int rowsA, int colsA, int colsB,
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	4632      	mov	r2, r6
 8000ecc:	2300      	movs	r3, #0
 8000ece:	4614      	mov	r4, r2
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	016b      	lsls	r3, r5, #5
 8000edc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ee0:	0162      	lsls	r2, r4, #5
  for (int i = 0; i < rowsA; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ee6:	e04d      	b.n	8000f84 <matmul+0x114>
  {
    for (int j = 0; j < colsB; j++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eec:	e043      	b.n	8000f76 <matmul+0x106>
    {
      result[i][j] = 0;
 8000eee:	4632      	mov	r2, r6
 8000ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000efa:	4413      	add	r3, r2
 8000efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000efe:	2100      	movs	r1, #0
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (int k = 0; k < colsA; k++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f08:	e02e      	b.n	8000f68 <matmul+0xf8>
      {
        result[i][j] += fixed_multiply(A[i][k], B[k][j]);
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	4413      	add	r3, r2
 8000f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000f2a:	4413      	add	r3, r2
 8000f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff ff76 	bl	8000e24 <fixed_multiply>
 8000f38:	4632      	mov	r2, r6
 8000f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000f44:	4413      	add	r3, r2
 8000f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f50:	fb01 f303 	mul.w	r3, r1, r3
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000f58:	440b      	add	r3, r1
 8000f5a:	1881      	adds	r1, r0, r2
 8000f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (int k = 0; k < colsA; k++)
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	3301      	adds	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbcc      	blt.n	8000f0a <matmul+0x9a>
    for (int j = 0; j < colsB; j++)
 8000f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f72:	3301      	adds	r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbb7      	blt.n	8000eee <matmul+0x7e>
  for (int i = 0; i < rowsA; i++)
 8000f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f80:	3301      	adds	r3, #1
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbad      	blt.n	8000ee8 <matmul+0x78>
      }
    }
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3734      	adds	r7, #52	@ 0x34
 8000f92:	46bd      	mov	sp, r7
 8000f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f98 <vecadd>:
 */
void vecadd(int size,
            const fixed_point_t a[size][1],
            const fixed_point_t b[size][1],
            fixed_point_t result[size][1])
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  for (size_t i = 0; i < size; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e012      	b.n	8000fd2 <vecadd+0x3a>
  {
    result[i][0] = a[i][0] + b[i][0];
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	4403      	add	r3, r0
 8000fc8:	440a      	add	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < size; i++)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3e8      	bcc.n	8000fac <vecadd+0x14>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_TIM_IC_CaptureCallback>:
/// Cuando se ejecuta, se actualiza el valor de h_prom con el valor de la señal, y
/// se hace un toggle al PIN 13, (???) (que hace el pin 13?)
/// @param htim
int captura = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  h_prom = TIM3->CCR1;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ff8:	601a      	str	r2, [r3, #0]
  // I don't remember why this is here
  //	mayor a 2900 lo ignoro, sino actualizo el valor por los pixeles al final del sensor
  if (captura == 0)
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d116      	bne.n	8001030 <HAL_TIM_IC_CaptureCallback+0x48>
  {
    if (h_prom > 2900)
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f640 3254 	movw	r2, #2900	@ 0xb54
 800100a:	4293      	cmp	r3, r2
 800100c:	dd04      	ble.n	8001018 <HAL_TIM_IC_CaptureCallback+0x30>
    {
      h_prom = h_prom;
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e003      	b.n	8001020 <HAL_TIM_IC_CaptureCallback+0x38>
    }
    else
    {
      h_prom = 2900;
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x54>)
 800101a:	f640 3254 	movw	r2, #2900	@ 0xb54
 800101e:	601a      	str	r2, [r3, #0]
    }
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // What is this for??? A LED?
 8001020:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001026:	f001 fdcd 	bl	8002bc4 <HAL_GPIO_TogglePin>
    captura = 1;
 800102a:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x58>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
  }
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40000400 	.word	0x40000400
 800103c:	20000074 	.word	0x20000074
 8001040:	200003b0 	.word	0x200003b0
 8001044:	40011000 	.word	0x40011000

08001048 <HAL_ADC_ConvCpltCallback>:

float i;
float u_float = 5.8;
float h; // Declare the variable h
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08f      	sub	sp, #60	@ 0x3c
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]

  i = HAL_ADC_GetValue(&hadc1) * 0.0023157 - 4.785;
 8001050:	48a7      	ldr	r0, [pc, #668]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001052:	f001 f89d 	bl	8002190 <HAL_ADC_GetValue>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff faed 	bl	8000638 <__aeabi_ui2d>
 800105e:	a398      	add	r3, pc, #608	@ (adr r3, 80012c0 <HAL_ADC_ConvCpltCallback+0x278>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff f87c 	bl	8000160 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	a395      	add	r3, pc, #596	@ (adr r3, 80012c8 <HAL_ADC_ConvCpltCallback+0x280>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff f9a1 	bl	80003bc <__aeabi_dsub>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fb53 	bl	800072c <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	4a9a      	ldr	r2, [pc, #616]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800108a:	6013      	str	r3, [r2, #0]
  h = ((h_prom) * 0.0272065 - 63.235847) * 0.001; // valor en mm
 800108c:	4b9a      	ldr	r3, [pc, #616]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x2b0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fae1 	bl	8000658 <__aeabi_i2d>
 8001096:	a38e      	add	r3, pc, #568	@ (adr r3, 80012d0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f860 	bl	8000160 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	a38b      	add	r3, pc, #556	@ (adr r3, 80012d8 <HAL_ADC_ConvCpltCallback+0x290>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff f985 	bl	80003bc <__aeabi_dsub>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	a389      	add	r3, pc, #548	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x298>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff f84e 	bl	8000160 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fb2e 	bl	800072c <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a8a      	ldr	r2, [pc, #552]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x2b4>)
 80010d4:	6013      	str	r3, [r2, #0]
  // x_0 = [i; h; 0]
  // x_hat[0][0] = FLOAT_TO_FIXED(i);
  // x_hat[1][0] = FLOAT_TO_FIXED(h);
  // x_hat[2][0] = FLOAT_TO_FIXED(0.0f);

  y[0][0] = FLOAT_TO_FIXED(i);
 80010d6:	4b87      	ldr	r3, [pc, #540]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fc82 	bl	80009e8 <__aeabi_fmul>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe44 	bl	8000d74 <__aeabi_f2iz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a84      	ldr	r2, [pc, #528]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80010f0:	6013      	str	r3, [r2, #0]
  y[1][0] = FLOAT_TO_FIXED(h);
 80010f2:	4b82      	ldr	r3, [pc, #520]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x2b4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc74 	bl	80009e8 <__aeabi_fmul>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe36 	bl	8000d74 <__aeabi_f2iz>
 8001108:	4603      	mov	r3, r0
 800110a:	4a7d      	ldr	r2, [pc, #500]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800110c:	6053      	str	r3, [r2, #4]

  // Perform calculations
  // step 1: x_hat = G*x_hat + H*u
  fixed_point_t Gx_hat[3][1];
  fixed_point_t x_hat_1[3][1];
  matmul(3, 3, 1, G, x_hat, Gx_hat);
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	4b7b      	ldr	r3, [pc, #492]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4b7b      	ldr	r3, [pc, #492]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x2c0>)
 800111a:	2201      	movs	r2, #1
 800111c:	2103      	movs	r1, #3
 800111e:	2003      	movs	r0, #3
 8001120:	f7ff fea6 	bl	8000e70 <matmul>
  // H*u = H_fixed * u_float
  fixed_point_t H_fixed_u[3][1] = {0}; // Initialize to zero
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
  H_fixed_u[0][0] = fixed_multiply(H_fixed[0][0], FLOAT_TO_FIXED(u_float));
 8001130:	4b76      	ldr	r3, [pc, #472]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 8001132:	681c      	ldr	r4, [r3, #0]
 8001134:	4b76      	ldr	r3, [pc, #472]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fc53 	bl	80009e8 <__aeabi_fmul>
 8001142:	4603      	mov	r3, r0
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fe15 	bl	8000d74 <__aeabi_f2iz>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	4620      	mov	r0, r4
 8001150:	f7ff fe68 	bl	8000e24 <fixed_multiply>
 8001154:	4603      	mov	r3, r0
 8001156:	60bb      	str	r3, [r7, #8]
  H_fixed_u[2][0] = fixed_multiply(H_fixed[0][2], FLOAT_TO_FIXED(u_float));
 8001158:	4b6c      	ldr	r3, [pc, #432]	@ (800130c <HAL_ADC_ConvCpltCallback+0x2c4>)
 800115a:	689c      	ldr	r4, [r3, #8]
 800115c:	4b6c      	ldr	r3, [pc, #432]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f04f 4195 	mov.w	r1, #1249902592	@ 0x4a800000
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fc3f 	bl	80009e8 <__aeabi_fmul>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fe01 	bl	8000d74 <__aeabi_f2iz>
 8001172:	4603      	mov	r3, r0
 8001174:	4619      	mov	r1, r3
 8001176:	4620      	mov	r0, r4
 8001178:	f7ff fe54 	bl	8000e24 <fixed_multiply>
 800117c:	4603      	mov	r3, r0
 800117e:	613b      	str	r3, [r7, #16]

  // x_hat_1 = G x + H u
  vecadd(3, Gx_hat, H_fixed_u, x_hat_1);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	f107 0120 	add.w	r1, r7, #32
 800118c:	2003      	movs	r0, #3
 800118e:	f7ff ff03 	bl	8000f98 <vecadd>
  // step 2: y_hat = Cminus*x_hat
  // fixed_point_t y_hat_negative[2][1];
  matmul(2, 3, 1, Cminus, x_hat_1, y_hat_negative);
 8001192:	4b60      	ldr	r3, [pc, #384]	@ (8001314 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	4b5e      	ldr	r3, [pc, #376]	@ (8001318 <HAL_ADC_ConvCpltCallback+0x2d0>)
 800119e:	2201      	movs	r2, #1
 80011a0:	2103      	movs	r1, #3
 80011a2:	2002      	movs	r0, #2
 80011a4:	f7ff fe64 	bl	8000e70 <matmul>
  // step 3: z_hat = y + y_hat_negative
  vecadd(2, y, y_hat_negative, z_hat);
 80011a8:	4b5c      	ldr	r3, [pc, #368]	@ (800131c <HAL_ADC_ConvCpltCallback+0x2d4>)
 80011aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001314 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80011ac:	4954      	ldr	r1, [pc, #336]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x2b8>)
 80011ae:	2002      	movs	r0, #2
 80011b0:	f7ff fef2 	bl	8000f98 <vecadd>
  // step 4: x_hat = x_hat + K*z_hat
  matmul(3, 2, 1, Kkalman, z_hat, lz);
 80011b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x2d8>)
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	4b58      	ldr	r3, [pc, #352]	@ (800131c <HAL_ADC_ConvCpltCallback+0x2d4>)
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	4b59      	ldr	r3, [pc, #356]	@ (8001324 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80011be:	2201      	movs	r2, #1
 80011c0:	2102      	movs	r1, #2
 80011c2:	2003      	movs	r0, #3
 80011c4:	f7ff fe54 	bl	8000e70 <matmul>
  vecadd(3, x_hat_1, lz, x_hat_result);
 80011c8:	f107 0114 	add.w	r1, r7, #20
 80011cc:	4b56      	ldr	r3, [pc, #344]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80011ce:	4a54      	ldr	r2, [pc, #336]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x2d8>)
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff fee1 	bl	8000f98 <vecadd>
  // Save x_hat_result back to x_hat
  for (int i = 0; i < 3; i++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011da:	e00a      	b.n	80011f2 <HAL_ADC_ConvCpltCallback+0x1aa>
  {
    x_hat[i][0] = x_hat_result[i][0];
 80011dc:	4a52      	ldr	r2, [pc, #328]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80011de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011e4:	4947      	ldr	r1, [pc, #284]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x2bc>)
 80011e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < 3; i++)
 80011ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ee:	3301      	adds	r3, #1
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	ddf1      	ble.n	80011dc <HAL_ADC_ConvCpltCallback+0x194>
  // LQR
  // Kd = [0.018029293079868  -4.111538385920691  -0.146874468496660]
  // precomp = -1.662218623972525
  // step 1: u = -K*x + precomp * h_ref
  // u = -K*x + precomp * h_ref
  matmul(1, 3, 1, Kd, x_hat_result, u);
 80011f8:	4b4c      	ldr	r3, [pc, #304]	@ (800132c <HAL_ADC_ConvCpltCallback+0x2e4>)
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4b4b      	ldr	r3, [pc, #300]	@ (8001330 <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001202:	2201      	movs	r2, #1
 8001204:	2103      	movs	r1, #3
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff fe32 	bl	8000e70 <matmul>
  u[0][0] = -u[0][0] + fixed_multiply(precomp, h_ref);
 800120c:	4b49      	ldr	r3, [pc, #292]	@ (8001334 <HAL_ADC_ConvCpltCallback+0x2ec>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a49      	ldr	r2, [pc, #292]	@ (8001338 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fe04 	bl	8000e24 <fixed_multiply>
 800121c:	4602      	mov	r2, r0
 800121e:	4b43      	ldr	r3, [pc, #268]	@ (800132c <HAL_ADC_ConvCpltCallback+0x2e4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	4a41      	ldr	r2, [pc, #260]	@ (800132c <HAL_ADC_ConvCpltCallback+0x2e4>)
 8001226:	6013      	str	r3, [r2, #0]
  u_float = -1e3 * fixed_to_float(u[0][0]);
 8001228:	4b40      	ldr	r3, [pc, #256]	@ (800132c <HAL_ADC_ConvCpltCallback+0x2e4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fde7 	bl	8000e00 <fixed_to_float>
 8001232:	4603      	mov	r3, r0
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fa21 	bl	800067c <__aeabi_f2d>
 800123a:	a32b      	add	r3, pc, #172	@ (adr r3, 80012e8 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7fe ff8e 	bl	8000160 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fa6e 	bl	800072c <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	4a2f      	ldr	r2, [pc, #188]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001254:	6013      	str	r3, [r2, #0]
  // Use x_hat_result_float for further processing
  // convert u to the range of the PWM
  // Convert u to the range of the PWM, v_max = 12, v_min = 0
  // ARR = 7199
  // duty_cycle = CRR/ARR
  if (u_float < 0)
 8001256:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f04f 0100 	mov.w	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fd60 	bl	8000d24 <__aeabi_fcmplt>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d004      	beq.n	8001274 <HAL_ADC_ConvCpltCallback+0x22c>
  {
    u_float = 0;
 800126a:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e00b      	b.n	800128c <HAL_ADC_ConvCpltCallback+0x244>
  }
  else if (u_float > 12)
 8001274:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4930      	ldr	r1, [pc, #192]	@ (800133c <HAL_ADC_ConvCpltCallback+0x2f4>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fd70 	bl	8000d60 <__aeabi_fcmpgt>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <HAL_ADC_ConvCpltCallback+0x244>
  {
    u_float = 12;
 8001286:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001288:	4a2c      	ldr	r2, [pc, #176]	@ (800133c <HAL_ADC_ConvCpltCallback+0x2f4>)
 800128a:	601a      	str	r2, [r3, #0]
  }
  TIM1->CCR1 = (uint32_t)((u_float / 12.0f) * 7199);
 800128c:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x2c8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	492a      	ldr	r1, [pc, #168]	@ (800133c <HAL_ADC_ConvCpltCallback+0x2f4>)
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fc5c 	bl	8000b50 <__aeabi_fdiv>
 8001298:	4603      	mov	r3, r0
 800129a:	4929      	ldr	r1, [pc, #164]	@ (8001340 <HAL_ADC_ConvCpltCallback+0x2f8>)
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fba3 	bl	80009e8 <__aeabi_fmul>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4c27      	ldr	r4, [pc, #156]	@ (8001344 <HAL_ADC_ConvCpltCallback+0x2fc>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fd8a 	bl	8000dc0 <__aeabi_f2uiz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	6363      	str	r3, [r4, #52]	@ 0x34
  captura = 0;
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <HAL_ADC_ConvCpltCallback+0x300>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
}
 80012b6:	bf00      	nop
 80012b8:	3734      	adds	r7, #52	@ 0x34
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	f88e1bb7 	.word	0xf88e1bb7
 80012c4:	3f62f85f 	.word	0x3f62f85f
 80012c8:	0a3d70a4 	.word	0x0a3d70a4
 80012cc:	401323d7 	.word	0x401323d7
 80012d0:	4ef459da 	.word	0x4ef459da
 80012d4:	3f9bdc05 	.word	0x3f9bdc05
 80012d8:	3c07ee0b 	.word	0x3c07ee0b
 80012dc:	404f9e30 	.word	0x404f9e30
 80012e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80012e4:	3f50624d 	.word	0x3f50624d
 80012e8:	00000000 	.word	0x00000000
 80012ec:	c08f4000 	.word	0xc08f4000
 80012f0:	20000280 	.word	0x20000280
 80012f4:	200003b8 	.word	0x200003b8
 80012f8:	20000074 	.word	0x20000074
 80012fc:	200003bc 	.word	0x200003bc
 8001300:	2000006c 	.word	0x2000006c
 8001304:	20000024 	.word	0x20000024
 8001308:	20000000 	.word	0x20000000
 800130c:	20000060 	.word	0x20000060
 8001310:	2000008c 	.word	0x2000008c
 8001314:	20000388 	.word	0x20000388
 8001318:	20000030 	.word	0x20000030
 800131c:	20000390 	.word	0x20000390
 8001320:	20000398 	.word	0x20000398
 8001324:	20000048 	.word	0x20000048
 8001328:	200003a4 	.word	0x200003a4
 800132c:	200003b4 	.word	0x200003b4
 8001330:	20000078 	.word	0x20000078
 8001334:	20000088 	.word	0x20000088
 8001338:	20000084 	.word	0x20000084
 800133c:	41400000 	.word	0x41400000
 8001340:	45e0f800 	.word	0x45e0f800
 8001344:	40012c00 	.word	0x40012c00
 8001348:	200003b0 	.word	0x200003b0

0800134c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f000 fd09 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f87b 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 fa6d 	bl	8001838 <MX_GPIO_Init>
  MX_ADC1_Init();
 800135e:	f000 f8d5 	bl	800150c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001362:	f000 f911 	bl	8001588 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001366:	f000 f993 	bl	8001690 <MX_TIM2_Init>
  MX_TIM3_Init();
 800136a:	f000 f9e9 	bl	8001740 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800136e:	f008 fea3 	bl	800a0b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001372:	482d      	ldr	r0, [pc, #180]	@ (8001428 <main+0xdc>)
 8001374:	f000 fe56 	bl	8002024 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001378:	2104      	movs	r1, #4
 800137a:	482c      	ldr	r0, [pc, #176]	@ (800142c <main+0xe0>)
 800137c:	f003 fe80 	bl	8005080 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001380:	2100      	movs	r1, #0
 8001382:	482a      	ldr	r0, [pc, #168]	@ (800142c <main+0xe0>)
 8001384:	f003 ff6e 	bl	8005264 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001388:	2100      	movs	r1, #0
 800138a:	4829      	ldr	r0, [pc, #164]	@ (8001430 <main+0xe4>)
 800138c:	f003 fe78 	bl	8005080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001390:	2100      	movs	r1, #0
 8001392:	4828      	ldr	r0, [pc, #160]	@ (8001434 <main+0xe8>)
 8001394:	f003 fe74 	bl	8005080 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001398:	2100      	movs	r1, #0
 800139a:	4826      	ldr	r0, [pc, #152]	@ (8001434 <main+0xe8>)
 800139c:	f004 fe08 	bl	8005fb0 <HAL_TIMEx_PWMN_Start>
  char data[35];

  while (1)
  {
    /* USER CODE END WHILE */
    h_hat = fixed_to_float(x_hat_result[1][0]);
 80013a0:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <main+0xec>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fd2b 	bl	8000e00 <fixed_to_float>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a23      	ldr	r2, [pc, #140]	@ (800143c <main+0xf0>)
 80013ae:	6013      	str	r3, [r2, #0]
    //    sprintf(data, "%d %d %d",h_prom, (int)(10000*h), (int)(10000*h_hat)); // Test position and kalman
    //	CDC_Transmit_FS(data,strlen(data));
    //	HAL_Delay(100);
    // sprintf(data, "%d\n", h_prom);
    value += direction;
 80013b0:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <main+0xf4>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <main+0xf8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <main+0xf4>)
 80013bc:	6013      	str	r3, [r2, #0]
    value2 -= direction;
 80013be:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <main+0xfc>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <main+0xf8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001448 <main+0xfc>)
 80013ca:	6013      	str	r3, [r2, #0]
    if (value > 100)
 80013cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <main+0xf4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b64      	cmp	r3, #100	@ 0x64
 80013d2:	dd07      	ble.n	80013e4 <main+0x98>
    {
      value = 100;    // Constrain to max value
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <main+0xf4>)
 80013d6:	2264      	movs	r2, #100	@ 0x64
 80013d8:	601a      	str	r2, [r3, #0]
      direction = -1; // Change direction
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <main+0xf8>)
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e009      	b.n	80013f8 <main+0xac>
    }
    else if (value < 0)
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <main+0xf4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da05      	bge.n	80013f8 <main+0xac>
    {
      value = 0;     // Constrain to min value
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <main+0xf4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
      direction = 1; // Change direction
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <main+0xf8>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
    }
    // signal_1 = (int)(h*1000);
    // signal_2 = (int)(h_hat*1000);
    HAL_Delay(100);
 80013f8:	2064      	movs	r0, #100	@ 0x64
 80013fa:	f000 fd17 	bl	8001e2c <HAL_Delay>
    sprintf(data, "%d|%d\n", value, value2);
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <main+0xf4>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <main+0xfc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1d38      	adds	r0, r7, #4
 8001408:	4910      	ldr	r1, [pc, #64]	@ (800144c <main+0x100>)
 800140a:	f009 faf1 	bl	800a9f0 <siprintf>

    CDC_Transmit_FS(data, strlen(data));
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4618      	mov	r0, r3
 8001412:	f7fe fe9d 	bl	8000150 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f008 ff08 	bl	800a234 <CDC_Transmit_FS>
    h_hat = fixed_to_float(x_hat_result[1][0]);
 8001424:	e7bc      	b.n	80013a0 <main+0x54>
 8001426:	bf00      	nop
 8001428:	20000280 	.word	0x20000280
 800142c:	20000340 	.word	0x20000340
 8001430:	200002f8 	.word	0x200002f8
 8001434:	200002b0 	.word	0x200002b0
 8001438:	200003a4 	.word	0x200003a4
 800143c:	200003c0 	.word	0x200003c0
 8001440:	200003c4 	.word	0x200003c4
 8001444:	20000090 	.word	0x20000090
 8001448:	20000094 	.word	0x20000094
 800144c:	0800b368 	.word	0x0800b368

08001450 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	@ 0x50
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145a:	2228      	movs	r2, #40	@ 0x28
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f009 fae6 	bl	800aa30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148e:	2301      	movs	r3, #1
 8001490:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800149c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 f906 	bl	80046b8 <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014b2:	f000 fa19 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b6:	230f      	movs	r3, #15
 80014b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2102      	movs	r1, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 fb72 	bl	8004bbc <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014de:	f000 fa03 	bl	80018e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 80014e2:	2312      	movs	r3, #18
 80014e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fcbe 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80014fe:	f000 f9f3 	bl	80018e8 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3750      	adds	r7, #80	@ 0x50
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_ADC1_Init+0x74>)
 800151e:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <MX_ADC1_Init+0x78>)
 8001520:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001522:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MX_ADC1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MX_ADC1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_ADC1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_ADC1_Init+0x74>)
 8001536:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800153a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <MX_ADC1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_ADC1_Init+0x74>)
 8001544:	2201      	movs	r2, #1
 8001546:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001548:	480d      	ldr	r0, [pc, #52]	@ (8001580 <MX_ADC1_Init+0x74>)
 800154a:	f000 fc93 	bl	8001e74 <HAL_ADC_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001554:	f000 f9c8 	bl	80018e8 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155c:	2301      	movs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_ADC1_Init+0x74>)
 800156a:	f000 fee5 	bl	8002338 <HAL_ADC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001574:	f000 f9b8 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000280 	.word	0x20000280
 8001584:	40012400 	.word	0x40012400

08001588 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b092      	sub	sp, #72	@ 0x48
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2220      	movs	r2, #32
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f009 fa3c 	bl	800aa30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b8:	4b33      	ldr	r3, [pc, #204]	@ (8001688 <MX_TIM1_Init+0x100>)
 80015ba:	4a34      	ldr	r2, [pc, #208]	@ (800168c <MX_TIM1_Init+0x104>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015be:	4b32      	ldr	r3, [pc, #200]	@ (8001688 <MX_TIM1_Init+0x100>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b30      	ldr	r3, [pc, #192]	@ (8001688 <MX_TIM1_Init+0x100>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <MX_TIM1_Init+0x100>)
 80015cc:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80015d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <MX_TIM1_Init+0x100>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <MX_TIM1_Init+0x100>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <MX_TIM1_Init+0x100>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015e4:	4828      	ldr	r0, [pc, #160]	@ (8001688 <MX_TIM1_Init+0x100>)
 80015e6:	f003 fcfb 	bl	8004fe0 <HAL_TIM_PWM_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80015f0:	f000 f97a 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015f4:	2320      	movs	r3, #32
 80015f6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001600:	4619      	mov	r1, r3
 8001602:	4821      	ldr	r0, [pc, #132]	@ (8001688 <MX_TIM1_Init+0x100>)
 8001604:	f004 fd72 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800160e:	f000 f96b 	bl	80018e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2360      	movs	r3, #96	@ 0x60
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 3600;
 8001616:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001620:	2308      	movs	r3, #8
 8001622:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4813      	ldr	r0, [pc, #76]	@ (8001688 <MX_TIM1_Init+0x100>)
 800163a:	f004 f8ab 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001644:	f000 f950 	bl	80018e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 36;
 8001654:	2324      	movs	r3, #36	@ 0x24
 8001656:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800165c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001660:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	@ (8001688 <MX_TIM1_Init+0x100>)
 800166c:	f004 fd9c 	bl	80061a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001676:	f000 f937 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800167a:	4803      	ldr	r0, [pc, #12]	@ (8001688 <MX_TIM1_Init+0x100>)
 800167c:	f000 fa26 	bl	8001acc <HAL_TIM_MspPostInit>
}
 8001680:	bf00      	nop
 8001682:	3748      	adds	r7, #72	@ 0x48
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002b0 	.word	0x200002b0
 800168c:	40012c00 	.word	0x40012c00

08001690 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	@ 0x28
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b2:	4b22      	ldr	r3, [pc, #136]	@ (800173c <MX_TIM2_Init+0xac>)
 80016b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <MX_TIM2_Init+0xac>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <MX_TIM2_Init+0xac>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 71;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_TIM2_Init+0xac>)
 80016c8:	2247      	movs	r2, #71	@ 0x47
 80016ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <MX_TIM2_Init+0xac>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_TIM2_Init+0xac>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d8:	4818      	ldr	r0, [pc, #96]	@ (800173c <MX_TIM2_Init+0xac>)
 80016da:	f003 fc81 	bl	8004fe0 <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80016e4:	f000 f900 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4619      	mov	r1, r3
 80016f6:	4811      	ldr	r0, [pc, #68]	@ (800173c <MX_TIM2_Init+0xac>)
 80016f8:	f004 fcf8 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001702:	f000 f8f1 	bl	80018e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	@ 0x60
 8001708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 35;
 800170a:	2323      	movs	r3, #35	@ 0x23
 800170c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800170e:	2302      	movs	r3, #2
 8001710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM2_Init+0xac>)
 800171e:	f004 f839 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001728:	f000 f8de 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM2_Init+0xac>)
 800172e:	f000 f9cd 	bl	8001acc <HAL_TIM_MspPostInit>
}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200002f8 	.word	0x200002f8

08001740 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08e      	sub	sp, #56	@ 0x38
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001746:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001770:	4b2f      	ldr	r3, [pc, #188]	@ (8001830 <MX_TIM3_Init+0xf0>)
 8001772:	4a30      	ldr	r2, [pc, #192]	@ (8001834 <MX_TIM3_Init+0xf4>)
 8001774:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001776:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <MX_TIM3_Init+0xf0>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <MX_TIM3_Init+0xf0>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001782:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <MX_TIM3_Init+0xf0>)
 8001784:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001788:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <MX_TIM3_Init+0xf0>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <MX_TIM3_Init+0xf0>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001796:	4826      	ldr	r0, [pc, #152]	@ (8001830 <MX_TIM3_Init+0xf0>)
 8001798:	f003 fd14 	bl	80051c4 <HAL_TIM_IC_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017a2:	f000 f8a1 	bl	80018e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017a6:	4822      	ldr	r0, [pc, #136]	@ (8001830 <MX_TIM3_Init+0xf0>)
 80017a8:	f003 fc1a 	bl	8004fe0 <HAL_TIM_PWM_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017b2:	f000 f899 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017b6:	2320      	movs	r3, #32
 80017b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017c2:	4619      	mov	r1, r3
 80017c4:	481a      	ldr	r0, [pc, #104]	@ (8001830 <MX_TIM3_Init+0xf0>)
 80017c6:	f004 fc91 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017d0:	f000 f88a 	bl	80018e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017d8:	2301      	movs	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICFilter = 15;
 80017e0:	230f      	movs	r3, #15
 80017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	2200      	movs	r2, #0
 80017ea:	4619      	mov	r1, r3
 80017ec:	4810      	ldr	r0, [pc, #64]	@ (8001830 <MX_TIM3_Init+0xf0>)
 80017ee:	f003 ff35 	bl	800565c <HAL_TIM_IC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80017f8:	f000 f876 	bl	80018e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fc:	2360      	movs	r3, #96	@ 0x60
 80017fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72;
 8001800:	2348      	movs	r3, #72	@ 0x48
 8001802:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2204      	movs	r2, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4807      	ldr	r0, [pc, #28]	@ (8001830 <MX_TIM3_Init+0xf0>)
 8001814:	f003 ffbe 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800181e:	f000 f863 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001822:	4803      	ldr	r0, [pc, #12]	@ (8001830 <MX_TIM3_Init+0xf0>)
 8001824:	f000 f952 	bl	8001acc <HAL_TIM_MspPostInit>
}
 8001828:	bf00      	nop
 800182a:	3738      	adds	r7, #56	@ 0x38
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000340 	.word	0x20000340
 8001834:	40000400 	.word	0x40000400

08001838 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a23      	ldr	r2, [pc, #140]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001864:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a1d      	ldr	r2, [pc, #116]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 800186a:	f043 0320 	orr.w	r3, r3, #32
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a17      	ldr	r2, [pc, #92]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a11      	ldr	r2, [pc, #68]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <MX_GPIO_Init+0xa8>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018b2:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <MX_GPIO_Init+0xac>)
 80018b4:	f001 f96e 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	4619      	mov	r1, r3
 80018d0:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <MX_GPIO_Init+0xac>)
 80018d2:	f000 ffdb 	bl	800288c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80018d6:	bf00      	nop
 80018d8:	3720      	adds	r7, #32
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40011000 	.word	0x40011000

080018e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <Error_Handler+0x8>

080018f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_MspInit+0x5c>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <HAL_MspInit+0x5c>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6193      	str	r3, [r2, #24]
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_MspInit+0x5c>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_MspInit+0x5c>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a0e      	ldr	r2, [pc, #56]	@ (8001950 <HAL_MspInit+0x5c>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191c:	61d3      	str	r3, [r2, #28]
 800191e:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <HAL_MspInit+0x5c>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_MspInit+0x60>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <HAL_MspInit+0x60>)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000
 8001954:	40010000 	.word	0x40010000

08001958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a18      	ldr	r2, [pc, #96]	@ (80019d4 <HAL_ADC_MspInit+0x7c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d129      	bne.n	80019cc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001978:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <HAL_ADC_MspInit+0x80>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a16      	ldr	r2, [pc, #88]	@ (80019d8 <HAL_ADC_MspInit+0x80>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <HAL_ADC_MspInit+0x80>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_ADC_MspInit+0x80>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <HAL_ADC_MspInit+0x80>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_ADC_MspInit+0x80>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019a8:	2301      	movs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ac:	2303      	movs	r3, #3
 80019ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4619      	mov	r1, r3
 80019b6:	4809      	ldr	r0, [pc, #36]	@ (80019dc <HAL_ADC_MspInit+0x84>)
 80019b8:	f000 ff68 	bl	800288c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2012      	movs	r0, #18
 80019c2:	f000 ff2c 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019c6:	2012      	movs	r0, #18
 80019c8:	f000 ff45 	bl	8002856 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40012400 	.word	0x40012400
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010800 	.word	0x40010800

080019e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <HAL_TIM_PWM_MspInit+0x58>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10c      	bne.n	8001a0c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_TIM_PWM_MspInit+0x5c>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <HAL_TIM_PWM_MspInit+0x5c>)
 80019f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019fc:	6193      	str	r3, [r2, #24]
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a0a:	e010      	b.n	8001a2e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d10b      	bne.n	8001a2e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_TIM_PWM_MspInit+0x5c>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <HAL_TIM_IC_MspInit+0x80>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d12b      	bne.n	8001ab8 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a60:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x84>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	4a17      	ldr	r2, [pc, #92]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x84>)
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	61d3      	str	r3, [r2, #28]
 8001a6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x84>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x84>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x84>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x84>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a90:	2340      	movs	r3, #64	@ 0x40
 8001a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4809      	ldr	r0, [pc, #36]	@ (8001ac8 <HAL_TIM_IC_MspInit+0x88>)
 8001aa4:	f000 fef2 	bl	800288c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	201d      	movs	r0, #29
 8001aae:	f000 feb6 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ab2:	201d      	movs	r0, #29
 8001ab4:	f000 fecf 	bl	8002856 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40000400 	.word	0x40000400
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010800 	.word	0x40010800

08001acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	@ 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a44      	ldr	r2, [pc, #272]	@ (8001bf8 <HAL_TIM_MspPostInit+0x12c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d132      	bne.n	8001b52 <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b43      	ldr	r3, [pc, #268]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a42      	ldr	r2, [pc, #264]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b40      	ldr	r3, [pc, #256]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b3d      	ldr	r3, [pc, #244]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a3c      	ldr	r2, [pc, #240]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b3a      	ldr	r3, [pc, #232]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2302      	movs	r3, #2
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4833      	ldr	r0, [pc, #204]	@ (8001c00 <HAL_TIM_MspPostInit+0x134>)
 8001b32:	f000 feab 	bl	800288c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2302      	movs	r3, #2
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	482e      	ldr	r0, [pc, #184]	@ (8001c04 <HAL_TIM_MspPostInit+0x138>)
 8001b4c:	f000 fe9e 	bl	800288c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b50:	e04d      	b.n	8001bee <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5a:	d12b      	bne.n	8001bb4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a26      	ldr	r2, [pc, #152]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	481e      	ldr	r0, [pc, #120]	@ (8001c04 <HAL_TIM_MspPostInit+0x138>)
 8001b8a:	f000 fe7f 	bl	800288c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c08 <HAL_TIM_MspPostInit+0x13c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bac:	4a16      	ldr	r2, [pc, #88]	@ (8001c08 <HAL_TIM_MspPostInit+0x13c>)
 8001bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb0:	6053      	str	r3, [r2, #4]
}
 8001bb2:	e01c      	b.n	8001bee <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <HAL_TIM_MspPostInit+0x140>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d117      	bne.n	8001bee <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6193      	str	r3, [r2, #24]
 8001bca:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <HAL_TIM_MspPostInit+0x130>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2302      	movs	r3, #2
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4806      	ldr	r0, [pc, #24]	@ (8001c04 <HAL_TIM_MspPostInit+0x138>)
 8001bea:	f000 fe4f 	bl	800288c <HAL_GPIO_Init>
}
 8001bee:	bf00      	nop
 8001bf0:	3730      	adds	r7, #48	@ 0x30
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40012c00 	.word	0x40012c00
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40010800 	.word	0x40010800
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40000400 	.word	0x40000400

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <NMI_Handler+0x4>

08001c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <HardFault_Handler+0x4>

08001c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <MemManage_Handler+0x4>

08001c28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c60:	f000 f8c8 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <ADC1_2_IRQHandler+0x10>)
 8001c6e:	f000 fa9b 	bl	80021a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000280 	.word	0x20000280

08001c7c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001c82:	f001 f8d4 	bl	8002e2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20001098 	.word	0x20001098

08001c90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <TIM3_IRQHandler+0x10>)
 8001c96:	f003 fbf1 	bl	800547c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000340 	.word	0x20000340

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f008 feb4 	bl	800aa40 <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	220c      	movs	r2, #12
 8001cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	@ (8001d08 <_sbrk+0x64>)
 8001cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20005000 	.word	0x20005000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	200003c8 	.word	0x200003c8
 8001d0c:	200016d8 	.word	0x200016d8

08001d10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d1c:	f7ff fff8 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d20:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d22:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d24:	4a0c      	ldr	r2, [pc, #48]	@ (8001d58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a09      	ldr	r2, [pc, #36]	@ (8001d5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d38:	4c09      	ldr	r4, [pc, #36]	@ (8001d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d46:	f008 fe81 	bl	800aa4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4a:	f7ff faff 	bl	800134c <main>
  bx lr
 8001d4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8001d58:	0800b420 	.word	0x0800b420
  ldr r2, =_sbss
 8001d5c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8001d60:	200016d8 	.word	0x200016d8

08001d64 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <CAN1_RX1_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <HAL_Init+0x28>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	@ (8001d90 <HAL_Init+0x28>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 fd45 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fdb6 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fd5d 	bl	8002872 <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 fd25 	bl	800281e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	@ (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000098 	.word	0x20000098
 8001dec:	200000a0 	.word	0x200000a0
 8001df0:	2000009c 	.word	0x2000009c

08001df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_IncTick+0x1c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_IncTick+0x20>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a03      	ldr	r2, [pc, #12]	@ (8001e14 <HAL_IncTick+0x20>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	200000a0 	.word	0x200000a0
 8001e14:	200003cc 	.word	0x200003cc

08001e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	@ (8001e28 <HAL_GetTick+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	200003cc 	.word	0x200003cc

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_Delay+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffe0 	bl	8001e18 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200000a0 	.word	0x200000a0

08001e74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0be      	b.n	8002014 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d109      	bne.n	8001eb8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff fd50 	bl	8001958 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fb8f 	bl	80025dc <ADC_ConversionStop_Disable>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 8099 	bne.w	8002002 <HAL_ADC_Init+0x18e>
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 8095 	bne.w	8002002 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001edc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ee0:	f023 0302 	bic.w	r3, r3, #2
 8001ee4:	f043 0202 	orr.w	r2, r3, #2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ef4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7b1b      	ldrb	r3, [r3, #12]
 8001efa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001efc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f0c:	d003      	beq.n	8001f16 <HAL_ADC_Init+0xa2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_ADC_Init+0xa8>
 8001f16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f1a:	e000      	b.n	8001f1e <HAL_ADC_Init+0xaa>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7d1b      	ldrb	r3, [r3, #20]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d119      	bne.n	8001f60 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7b1b      	ldrb	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	035a      	lsls	r2, r3, #13
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	e00b      	b.n	8001f60 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	4b28      	ldr	r3, [pc, #160]	@ (800201c <HAL_ADC_Init+0x1a8>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f90:	d003      	beq.n	8001f9a <HAL_ADC_Init+0x126>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d104      	bne.n	8001fa4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	051b      	lsls	r3, r3, #20
 8001fa2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001faa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <HAL_ADC_Init+0x1ac>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fde:	e018      	b.n	8002012 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	f023 0312 	bic.w	r3, r3, #18
 8001fe8:	f043 0210 	orr.w	r2, r3, #16
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002000:	e007      	b.n	8002012 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002012:	7dfb      	ldrb	r3, [r7, #23]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	ffe1f7fd 	.word	0xffe1f7fd
 8002020:	ff1f0efe 	.word	0xff1f0efe

08002024 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ADC_Start_IT+0x1a>
 800203a:	2302      	movs	r3, #2
 800203c:	e0a0      	b.n	8002180 <HAL_ADC_Start_IT+0x15c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fa6e 	bl	8002528 <ADC_Enable>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 808f 	bne.w	8002176 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a45      	ldr	r2, [pc, #276]	@ (8002188 <HAL_ADC_Start_IT+0x164>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d105      	bne.n	8002082 <HAL_ADC_Start_IT+0x5e>
 8002076:	4b45      	ldr	r3, [pc, #276]	@ (800218c <HAL_ADC_Start_IT+0x168>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d115      	bne.n	80020ae <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d026      	beq.n	80020ea <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ac:	e01d      	b.n	80020ea <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a33      	ldr	r2, [pc, #204]	@ (800218c <HAL_ADC_Start_IT+0x168>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d004      	beq.n	80020ce <HAL_ADC_Start_IT+0xaa>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002188 <HAL_ADC_Start_IT+0x164>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d10d      	bne.n	80020ea <HAL_ADC_Start_IT+0xc6>
 80020ce:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <HAL_ADC_Start_IT+0x168>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	f023 0206 	bic.w	r2, r3, #6
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002102:	e002      	b.n	800210a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0202 	mvn.w	r2, #2
 800211a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0220 	orr.w	r2, r2, #32
 800212a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002136:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800213a:	d113      	bne.n	8002164 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002140:	4a11      	ldr	r2, [pc, #68]	@ (8002188 <HAL_ADC_Start_IT+0x164>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d105      	bne.n	8002152 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_ADC_Start_IT+0x168>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d108      	bne.n	8002164 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	e00c      	b.n	800217e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	e003      	b.n	800217e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40012800 	.word	0x40012800
 800218c:	40012400 	.word	0x40012400

08002190 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d03e      	beq.n	8002248 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d039      	beq.n	8002248 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021fa:	d11d      	bne.n	8002238 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002200:	2b00      	cmp	r3, #0
 8002202:	d119      	bne.n	8002238 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0220 	bic.w	r2, r2, #32
 8002212:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe ff05 	bl	8001048 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f06f 0212 	mvn.w	r2, #18
 8002246:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	d04d      	beq.n	80022ee <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d048      	beq.n	80022ee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800227e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002282:	d012      	beq.n	80022aa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800228e:	2b00      	cmp	r3, #0
 8002290:	d125      	bne.n	80022de <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800229c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022a0:	d11d      	bne.n	80022de <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d119      	bne.n	80022de <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022b8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f9bd 	bl	800265e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 020c 	mvn.w	r2, #12
 80022ec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d012      	beq.n	800231e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00d      	beq.n	800231e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f809 	bl	8002326 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0201 	mvn.w	r2, #1
 800231c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x20>
 8002354:	2302      	movs	r3, #2
 8002356:	e0dc      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1da>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d81c      	bhi.n	80023a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b05      	subs	r3, #5
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	3b05      	subs	r3, #5
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	@ 0x34
 80023a0:	e03c      	b.n	800241c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d81c      	bhi.n	80023e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b23      	subs	r3, #35	@ 0x23
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	4019      	ands	r1, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b23      	subs	r3, #35	@ 0x23
 80023d6:	fa00 f203 	lsl.w	r2, r0, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80023e2:	e01b      	b.n	800241c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b41      	subs	r3, #65	@ 0x41
 80023f6:	221f      	movs	r2, #31
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	4019      	ands	r1, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b41      	subs	r3, #65	@ 0x41
 8002410:	fa00 f203 	lsl.w	r2, r0, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b09      	cmp	r3, #9
 8002422:	d91c      	bls.n	800245e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68d9      	ldr	r1, [r3, #12]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	3b1e      	subs	r3, #30
 8002436:	2207      	movs	r2, #7
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4019      	ands	r1, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6898      	ldr	r0, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	3b1e      	subs	r3, #30
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	e019      	b.n	8002492 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6919      	ldr	r1, [r3, #16]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4019      	ands	r1, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6898      	ldr	r0, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b10      	cmp	r3, #16
 8002498:	d003      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800249e:	2b11      	cmp	r3, #17
 80024a0:	d132      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_ADC_ConfigChannel+0x1e4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d125      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d126      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80024c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d11a      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <HAL_ADC_ConfigChannel+0x1e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <HAL_ADC_ConfigChannel+0x1ec>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9a      	lsrs	r2, r3, #18
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x1b2>
 80024f6:	e007      	b.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	40012400 	.word	0x40012400
 8002520:	20000098 	.word	0x20000098
 8002524:	431bde83 	.word	0x431bde83

08002528 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d040      	beq.n	80025c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002556:	4b1f      	ldr	r3, [pc, #124]	@ (80025d4 <ADC_Enable+0xac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1f      	ldr	r2, [pc, #124]	@ (80025d8 <ADC_Enable+0xb0>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	0c9b      	lsrs	r3, r3, #18
 8002562:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002564:	e002      	b.n	800256c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3b01      	subs	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002572:	f7ff fc51 	bl	8001e18 <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002578:	e01f      	b.n	80025ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800257a:	f7ff fc4d 	bl	8001e18 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d918      	bls.n	80025ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d011      	beq.n	80025ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	f043 0210 	orr.w	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e007      	b.n	80025ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d1d8      	bne.n	800257a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000098 	.word	0x20000098
 80025d8:	431bde83 	.word	0x431bde83

080025dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d12e      	bne.n	8002654 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002606:	f7ff fc07 	bl	8001e18 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800260c:	e01b      	b.n	8002646 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800260e:	f7ff fc03 	bl	8001e18 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d914      	bls.n	8002646 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10d      	bne.n	8002646 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e007      	b.n	8002656 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d0dc      	beq.n	800260e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800268c:	4013      	ands	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800269c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a2:	4a04      	ldr	r2, [pc, #16]	@ (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	60d3      	str	r3, [r2, #12]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026bc:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <__NVIC_GetPriorityGrouping+0x18>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	f003 0307 	and.w	r3, r3, #7
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	db0b      	blt.n	80026fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	4906      	ldr	r1, [pc, #24]	@ (8002708 <__NVIC_EnableIRQ+0x34>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	2001      	movs	r0, #1
 80026f6:	fa00 f202 	lsl.w	r2, r0, r2
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	@ (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	@ (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	@ 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f7ff ff90 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff2d 	bl	8002670 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff42 	bl	80026b8 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff90 	bl	8002760 <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5f 	bl	800270c <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff35 	bl	80026d4 <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa2 	bl	80027c4 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b08b      	sub	sp, #44	@ 0x2c
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289e:	e169      	b.n	8002b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028a0:	2201      	movs	r2, #1
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f040 8158 	bne.w	8002b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a9a      	ldr	r2, [pc, #616]	@ (8002b2c <HAL_GPIO_Init+0x2a0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d05e      	beq.n	8002986 <HAL_GPIO_Init+0xfa>
 80028c8:	4a98      	ldr	r2, [pc, #608]	@ (8002b2c <HAL_GPIO_Init+0x2a0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d875      	bhi.n	80029ba <HAL_GPIO_Init+0x12e>
 80028ce:	4a98      	ldr	r2, [pc, #608]	@ (8002b30 <HAL_GPIO_Init+0x2a4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d058      	beq.n	8002986 <HAL_GPIO_Init+0xfa>
 80028d4:	4a96      	ldr	r2, [pc, #600]	@ (8002b30 <HAL_GPIO_Init+0x2a4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d86f      	bhi.n	80029ba <HAL_GPIO_Init+0x12e>
 80028da:	4a96      	ldr	r2, [pc, #600]	@ (8002b34 <HAL_GPIO_Init+0x2a8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d052      	beq.n	8002986 <HAL_GPIO_Init+0xfa>
 80028e0:	4a94      	ldr	r2, [pc, #592]	@ (8002b34 <HAL_GPIO_Init+0x2a8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d869      	bhi.n	80029ba <HAL_GPIO_Init+0x12e>
 80028e6:	4a94      	ldr	r2, [pc, #592]	@ (8002b38 <HAL_GPIO_Init+0x2ac>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d04c      	beq.n	8002986 <HAL_GPIO_Init+0xfa>
 80028ec:	4a92      	ldr	r2, [pc, #584]	@ (8002b38 <HAL_GPIO_Init+0x2ac>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d863      	bhi.n	80029ba <HAL_GPIO_Init+0x12e>
 80028f2:	4a92      	ldr	r2, [pc, #584]	@ (8002b3c <HAL_GPIO_Init+0x2b0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d046      	beq.n	8002986 <HAL_GPIO_Init+0xfa>
 80028f8:	4a90      	ldr	r2, [pc, #576]	@ (8002b3c <HAL_GPIO_Init+0x2b0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d85d      	bhi.n	80029ba <HAL_GPIO_Init+0x12e>
 80028fe:	2b12      	cmp	r3, #18
 8002900:	d82a      	bhi.n	8002958 <HAL_GPIO_Init+0xcc>
 8002902:	2b12      	cmp	r3, #18
 8002904:	d859      	bhi.n	80029ba <HAL_GPIO_Init+0x12e>
 8002906:	a201      	add	r2, pc, #4	@ (adr r2, 800290c <HAL_GPIO_Init+0x80>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	08002987 	.word	0x08002987
 8002910:	08002961 	.word	0x08002961
 8002914:	08002973 	.word	0x08002973
 8002918:	080029b5 	.word	0x080029b5
 800291c:	080029bb 	.word	0x080029bb
 8002920:	080029bb 	.word	0x080029bb
 8002924:	080029bb 	.word	0x080029bb
 8002928:	080029bb 	.word	0x080029bb
 800292c:	080029bb 	.word	0x080029bb
 8002930:	080029bb 	.word	0x080029bb
 8002934:	080029bb 	.word	0x080029bb
 8002938:	080029bb 	.word	0x080029bb
 800293c:	080029bb 	.word	0x080029bb
 8002940:	080029bb 	.word	0x080029bb
 8002944:	080029bb 	.word	0x080029bb
 8002948:	080029bb 	.word	0x080029bb
 800294c:	080029bb 	.word	0x080029bb
 8002950:	08002969 	.word	0x08002969
 8002954:	0800297d 	.word	0x0800297d
 8002958:	4a79      	ldr	r2, [pc, #484]	@ (8002b40 <HAL_GPIO_Init+0x2b4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800295e:	e02c      	b.n	80029ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	623b      	str	r3, [r7, #32]
          break;
 8002966:	e029      	b.n	80029bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	3304      	adds	r3, #4
 800296e:	623b      	str	r3, [r7, #32]
          break;
 8002970:	e024      	b.n	80029bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	3308      	adds	r3, #8
 8002978:	623b      	str	r3, [r7, #32]
          break;
 800297a:	e01f      	b.n	80029bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	330c      	adds	r3, #12
 8002982:	623b      	str	r3, [r7, #32]
          break;
 8002984:	e01a      	b.n	80029bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800298e:	2304      	movs	r3, #4
 8002990:	623b      	str	r3, [r7, #32]
          break;
 8002992:	e013      	b.n	80029bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800299c:	2308      	movs	r3, #8
 800299e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	611a      	str	r2, [r3, #16]
          break;
 80029a6:	e009      	b.n	80029bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a8:	2308      	movs	r3, #8
 80029aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	615a      	str	r2, [r3, #20]
          break;
 80029b2:	e003      	b.n	80029bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029b4:	2300      	movs	r3, #0
 80029b6:	623b      	str	r3, [r7, #32]
          break;
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x130>
          break;
 80029ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2bff      	cmp	r3, #255	@ 0xff
 80029c0:	d801      	bhi.n	80029c6 <HAL_GPIO_Init+0x13a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	e001      	b.n	80029ca <HAL_GPIO_Init+0x13e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2bff      	cmp	r3, #255	@ 0xff
 80029d0:	d802      	bhi.n	80029d8 <HAL_GPIO_Init+0x14c>
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	e002      	b.n	80029de <HAL_GPIO_Init+0x152>
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	3b08      	subs	r3, #8
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	210f      	movs	r1, #15
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	401a      	ands	r2, r3
 80029f0:	6a39      	ldr	r1, [r7, #32]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80b1 	beq.w	8002b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b44 <HAL_GPIO_Init+0x2b8>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	4a4c      	ldr	r2, [pc, #304]	@ (8002b44 <HAL_GPIO_Init+0x2b8>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6193      	str	r3, [r2, #24]
 8002a18:	4b4a      	ldr	r3, [pc, #296]	@ (8002b44 <HAL_GPIO_Init+0x2b8>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a24:	4a48      	ldr	r2, [pc, #288]	@ (8002b48 <HAL_GPIO_Init+0x2bc>)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a40      	ldr	r2, [pc, #256]	@ (8002b4c <HAL_GPIO_Init+0x2c0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d013      	beq.n	8002a78 <HAL_GPIO_Init+0x1ec>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3f      	ldr	r2, [pc, #252]	@ (8002b50 <HAL_GPIO_Init+0x2c4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00d      	beq.n	8002a74 <HAL_GPIO_Init+0x1e8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b54 <HAL_GPIO_Init+0x2c8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d007      	beq.n	8002a70 <HAL_GPIO_Init+0x1e4>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3d      	ldr	r2, [pc, #244]	@ (8002b58 <HAL_GPIO_Init+0x2cc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d101      	bne.n	8002a6c <HAL_GPIO_Init+0x1e0>
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e006      	b.n	8002a7a <HAL_GPIO_Init+0x1ee>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	e004      	b.n	8002a7a <HAL_GPIO_Init+0x1ee>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e002      	b.n	8002a7a <HAL_GPIO_Init+0x1ee>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_GPIO_Init+0x1ee>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7c:	f002 0203 	and.w	r2, r2, #3
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	4093      	lsls	r3, r2
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a8a:	492f      	ldr	r1, [pc, #188]	@ (8002b48 <HAL_GPIO_Init+0x2bc>)
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	492c      	ldr	r1, [pc, #176]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	4928      	ldr	r1, [pc, #160]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002acc:	4b23      	ldr	r3, [pc, #140]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	4922      	ldr	r1, [pc, #136]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60cb      	str	r3, [r1, #12]
 8002ad8:	e006      	b.n	8002ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ada:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	491e      	ldr	r1, [pc, #120]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002af4:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	4918      	ldr	r1, [pc, #96]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b02:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4914      	ldr	r1, [pc, #80]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d021      	beq.n	8002b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	490e      	ldr	r1, [pc, #56]	@ (8002b5c <HAL_GPIO_Init+0x2d0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
 8002b28:	e021      	b.n	8002b6e <HAL_GPIO_Init+0x2e2>
 8002b2a:	bf00      	nop
 8002b2c:	10320000 	.word	0x10320000
 8002b30:	10310000 	.word	0x10310000
 8002b34:	10220000 	.word	0x10220000
 8002b38:	10210000 	.word	0x10210000
 8002b3c:	10120000 	.word	0x10120000
 8002b40:	10110000 	.word	0x10110000
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40010000 	.word	0x40010000
 8002b4c:	40010800 	.word	0x40010800
 8002b50:	40010c00 	.word	0x40010c00
 8002b54:	40011000 	.word	0x40011000
 8002b58:	40011400 	.word	0x40011400
 8002b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b60:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	4909      	ldr	r1, [pc, #36]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	3301      	adds	r3, #1
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f47f ae8e 	bne.w	80028a0 <HAL_GPIO_Init+0x14>
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	372c      	adds	r7, #44	@ 0x2c
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	40010400 	.word	0x40010400

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bb0:	e003      	b.n	8002bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	041a      	lsls	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	611a      	str	r2, [r3, #16]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43d9      	mvns	r1, r3
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	400b      	ands	r3, r1
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	611a      	str	r2, [r3, #16]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0e8      	b.n	8002dda <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f007 fc3d 	bl	800a49c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fb61 	bl	80062fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3304      	adds	r3, #4
 8002c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c44:	f003 fb37 	bl	80062b6 <USB_CoreInit>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0bf      	b.n	8002dda <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 fb65 	bl	8006330 <USB_SetCurrentMode>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b0      	b.n	8002dda <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e03e      	b.n	8002cfc <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3311      	adds	r3, #17
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3310      	adds	r3, #16
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3313      	adds	r3, #19
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3320      	adds	r3, #32
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3324      	adds	r3, #36	@ 0x24
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	791b      	ldrb	r3, [r3, #4]
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d3bb      	bcc.n	8002c7e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	e044      	b.n	8002d96 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	3301      	adds	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	791b      	ldrb	r3, [r3, #4]
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d3b5      	bcc.n	8002d0c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002daa:	f003 facd 	bl	8006348 <USB_DevInit>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e00c      	b.n	8002dda <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f005 fd4d 	bl	8008872 <USB_DevDisconnect>

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_PCD_Start+0x16>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e016      	b.n	8002e26 <HAL_PCD_Start+0x44>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fa63 	bl	80062d0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f007 fdb8 	bl	800a982 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 fd21 	bl	800885e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b088      	sub	sp, #32
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f005 fd23 	bl	8008886 <USB_ReadInterrupts>
 8002e40:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fb1a 	bl	8003486 <PCD_EP_ISR_Handler>

    return;
 8002e52:	e119      	b.n	8003088 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d013      	beq.n	8002e86 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e70:	b292      	uxth	r2, r2
 8002e72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f007 fb8b 	bl	800a592 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f905 	bl	800308e <HAL_PCD_SetAddress>

    return;
 8002e84:	e100      	b.n	8003088 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00c      	beq.n	8002eaa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ea8:	e0ee      	b.n	8003088 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ec6:	b292      	uxth	r2, r2
 8002ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ecc:	e0dc      	b.n	8003088 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d027      	beq.n	8002f28 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	b292      	uxth	r2, r2
 8002eec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0208 	bic.w	r2, r2, #8
 8002f02:	b292      	uxth	r2, r2
 8002f04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f007 fb7b 	bl	800a604 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f20:	b292      	uxth	r2, r2
 8002f22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f26:	e0af      	b.n	8003088 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8083 	beq.w	800303a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e010      	b.n	8002f5c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	7ffb      	ldrb	r3, [r7, #31]
 8002f48:	8812      	ldrh	r2, [r2, #0]
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	3320      	adds	r3, #32
 8002f50:	443b      	add	r3, r7
 8002f52:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002f56:	7ffb      	ldrb	r3, [r7, #31]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	2b07      	cmp	r3, #7
 8002f60:	d9eb      	bls.n	8002f3a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	b292      	uxth	r2, r2
 8002f76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0201 	bic.w	r2, r2, #1
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f92:	bf00      	nop
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f6      	beq.n	8002f94 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	77fb      	strb	r3, [r7, #31]
 8002fc2:	e00f      	b.n	8002fe4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002fc4:	7ffb      	ldrb	r3, [r7, #31]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	7ffa      	ldrb	r2, [r7, #31]
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	440a      	add	r2, r1
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	3320      	adds	r3, #32
 8002fd6:	443b      	add	r3, r7
 8002fd8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002fdc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	7ffb      	ldrb	r3, [r7, #31]
 8002fe6:	2b07      	cmp	r3, #7
 8002fe8:	d9ec      	bls.n	8002fc4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0208 	orr.w	r2, r2, #8
 8002ffc:	b292      	uxth	r2, r2
 8002ffe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003014:	b292      	uxth	r2, r2
 8003016:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003022:	b29a      	uxth	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0204 	orr.w	r2, r2, #4
 800302c:	b292      	uxth	r2, r2
 800302e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f007 facc 	bl	800a5d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003038:	e026      	b.n	8003088 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00f      	beq.n	8003064 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003056:	b292      	uxth	r2, r2
 8003058:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f007 fa8a 	bl	800a576 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003062:	e011      	b.n	8003088 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003076:	b29a      	uxth	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003080:	b292      	uxth	r2, r2
 8003082:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003086:	bf00      	nop
  }
}
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_PCD_SetAddress+0x1a>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e012      	b.n	80030ce <HAL_PCD_SetAddress+0x40>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f005 fbba 	bl	8008838 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	4608      	mov	r0, r1
 80030e0:	4611      	mov	r1, r2
 80030e2:	461a      	mov	r2, r3
 80030e4:	4603      	mov	r3, r0
 80030e6:	70fb      	strb	r3, [r7, #3]
 80030e8:	460b      	mov	r3, r1
 80030ea:	803b      	strh	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	da0e      	bge.n	800311a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 0207 	and.w	r2, r3, #7
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	3310      	adds	r3, #16
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	705a      	strb	r2, [r3, #1]
 8003118:	e00e      	b.n	8003138 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	f003 0207 	and.w	r2, r3, #7
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003144:	883a      	ldrh	r2, [r7, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	78ba      	ldrb	r2, [r7, #2]
 800314e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003150:	78bb      	ldrb	r3, [r7, #2]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d102      	bne.n	800315c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_PCD_EP_Open+0x94>
 8003166:	2302      	movs	r3, #2
 8003168:	e00e      	b.n	8003188 <HAL_PCD_EP_Open+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	4618      	mov	r0, r3
 800317a:	f003 f903 	bl	8006384 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003186:	7afb      	ldrb	r3, [r7, #11]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800319c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	da0e      	bge.n	80031c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 0207 	and.w	r2, r3, #7
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	3310      	adds	r3, #16
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	705a      	strb	r2, [r3, #1]
 80031c0:	e00e      	b.n	80031e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 0207 	and.w	r2, r3, #7
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_PCD_EP_Close+0x6a>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e00e      	b.n	8003218 <HAL_PCD_EP_Close+0x88>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fc7b 	bl	8006b04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	f003 0207 	and.w	r2, r3, #7
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2200      	movs	r2, #0
 8003258:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	b2da      	uxtb	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6979      	ldr	r1, [r7, #20]
 8003272:	4618      	mov	r0, r3
 8003274:	f003 fe32 	bl	8006edc <USB_EPStartXfer>

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 0207 	and.w	r2, r3, #7
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80032a4:	681b      	ldr	r3, [r3, #0]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	460b      	mov	r3, r1
 80032be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	7afb      	ldrb	r3, [r7, #11]
 80032c2:	f003 0207 	and.w	r2, r3, #7
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	3310      	adds	r3, #16
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2201      	movs	r2, #1
 80032fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fc:	7afb      	ldrb	r3, [r7, #11]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	b2da      	uxtb	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6979      	ldr	r1, [r7, #20]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 fde4 	bl	8006edc <USB_EPStartXfer>

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	7912      	ldrb	r2, [r2, #4]
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e04c      	b.n	80033d6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800333c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003340:	2b00      	cmp	r3, #0
 8003342:	da0e      	bge.n	8003362 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 0207 	and.w	r2, r3, #7
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	3310      	adds	r3, #16
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	705a      	strb	r2, [r3, #1]
 8003360:	e00c      	b.n	800337c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_PCD_EP_SetStall+0x7e>
 8003398:	2302      	movs	r3, #2
 800339a:	e01c      	b.n	80033d6 <HAL_PCD_EP_SetStall+0xb8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68f9      	ldr	r1, [r7, #12]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f005 f947 	bl	800863e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f005 fa6c 	bl	80088a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	7912      	ldrb	r2, [r2, #4]
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e040      	b.n	800347e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003400:	2b00      	cmp	r3, #0
 8003402:	da0e      	bge.n	8003422 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	f003 0207 	and.w	r2, r3, #7
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	3310      	adds	r3, #16
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	705a      	strb	r2, [r3, #1]
 8003420:	e00e      	b.n	8003440 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	f003 0207 	and.w	r2, r3, #7
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_PCD_EP_ClrStall+0x82>
 800345c:	2302      	movs	r3, #2
 800345e:	e00e      	b.n	800347e <HAL_PCD_EP_ClrStall+0xa0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	4618      	mov	r0, r3
 8003470:	f005 f935 	bl	80086de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b096      	sub	sp, #88	@ 0x58
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800348e:	e3bb      	b.n	8003c08 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003498:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800349c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80034aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 8175 	bne.w	800379e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d14e      	bne.n	800355e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80034cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d0:	81fb      	strh	r3, [r7, #14]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	89fb      	ldrh	r3, [r7, #14]
 80034d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3310      	adds	r3, #16
 80034e8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	3302      	adds	r3, #2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003514:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	441a      	add	r2, r3
 8003520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003522:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003524:	2100      	movs	r1, #0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f007 f80b 	bl	800a542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7b5b      	ldrb	r3, [r3, #13]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8368 	beq.w	8003c08 <PCD_EP_ISR_Handler+0x782>
 8003538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8363 	bne.w	8003c08 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7b5b      	ldrb	r3, [r3, #13]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	735a      	strb	r2, [r3, #13]
 800355c:	e354      	b.n	8003c08 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003564:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003570:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003578:	2b00      	cmp	r3, #0
 800357a:	d034      	beq.n	80035e6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	3306      	adds	r3, #6
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80035b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f005 f9c2 	bl	8008944 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035cc:	4013      	ands	r3, r2
 80035ce:	823b      	strh	r3, [r7, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	8a3a      	ldrh	r2, [r7, #16]
 80035d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035da:	b292      	uxth	r2, r2
 80035dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f006 ff82 	bl	800a4e8 <HAL_PCD_SetupStageCallback>
 80035e4:	e310      	b.n	8003c08 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035e6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f280 830c 	bge.w	8003c08 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035fc:	4013      	ands	r3, r2
 80035fe:	83fb      	strh	r3, [r7, #30]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	8bfa      	ldrh	r2, [r7, #30]
 8003606:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800360a:	b292      	uxth	r2, r2
 800360c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003616:	b29b      	uxth	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	3306      	adds	r3, #6
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003638:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800363a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d019      	beq.n	8003676 <PCD_EP_ISR_Handler+0x1f0>
 8003642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003650:	6959      	ldr	r1, [r3, #20]
 8003652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003654:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003658:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800365a:	b29b      	uxth	r3, r3
 800365c:	f005 f972 	bl	8008944 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	441a      	add	r2, r3
 800366a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800366e:	2100      	movs	r1, #0
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f006 ff4b 	bl	800a50c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003680:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 82bd 	bne.w	8003c08 <PCD_EP_ISR_Handler+0x782>
 800368e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003692:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003696:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800369a:	f000 82b5 	beq.w	8003c08 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4413      	add	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80036d4:	d91d      	bls.n	8003712 <PCD_EP_ISR_Handler+0x28c>
 80036d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <PCD_EP_ISR_Handler+0x26a>
 80036ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ec:	3b01      	subs	r3, #1
 80036ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	029b      	lsls	r3, r3, #10
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	4313      	orrs	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800370a:	b29a      	uxth	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	801a      	strh	r2, [r3, #0]
 8003710:	e026      	b.n	8003760 <PCD_EP_ISR_Handler+0x2da>
 8003712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <PCD_EP_ISR_Handler+0x2aa>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003728:	b29a      	uxth	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	801a      	strh	r2, [r3, #0]
 800372e:	e017      	b.n	8003760 <PCD_EP_ISR_Handler+0x2da>
 8003730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	647b      	str	r3, [r7, #68]	@ 0x44
 8003738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <PCD_EP_ISR_Handler+0x2c4>
 8003744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003746:	3301      	adds	r3, #1
 8003748:	647b      	str	r3, [r7, #68]	@ 0x44
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29a      	uxth	r2, r3
 8003750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003752:	b29b      	uxth	r3, r3
 8003754:	029b      	lsls	r3, r3, #10
 8003756:	b29b      	uxth	r3, r3
 8003758:	4313      	orrs	r3, r2
 800375a:	b29a      	uxth	r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800376c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003770:	827b      	strh	r3, [r7, #18]
 8003772:	8a7b      	ldrh	r3, [r7, #18]
 8003774:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003778:	827b      	strh	r3, [r7, #18]
 800377a:	8a7b      	ldrh	r3, [r7, #18]
 800377c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003780:	827b      	strh	r3, [r7, #18]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	8a7b      	ldrh	r3, [r7, #18]
 8003788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800378c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003798:	b29b      	uxth	r3, r3
 800379a:	8013      	strh	r3, [r2, #0]
 800379c:	e234      	b.n	8003c08 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037b2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f280 80fc 	bge.w	80039b4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80037d2:	4013      	ands	r3, r2
 80037d4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80037ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037ee:	b292      	uxth	r2, r2
 80037f0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037f2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380a:	7b1b      	ldrb	r3, [r3, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d125      	bne.n	800385c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003818:	b29b      	uxth	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	3306      	adds	r3, #6
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003838:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800383c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8092 	beq.w	800396a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384c:	6959      	ldr	r1, [r3, #20]
 800384e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003850:	88da      	ldrh	r2, [r3, #6]
 8003852:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003856:	f005 f875 	bl	8008944 <USB_ReadPMA>
 800385a:	e086      	b.n	800396a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800385c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385e:	78db      	ldrb	r3, [r3, #3]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d10a      	bne.n	800387a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003864:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003868:	461a      	mov	r2, r3
 800386a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f9d9 	bl	8003c24 <HAL_PCD_EP_DB_Receive>
 8003872:	4603      	mov	r3, r0
 8003874:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003878:	e077      	b.n	800396a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003894:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80038aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d024      	beq.n	8003922 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	3302      	adds	r3, #2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003900:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003904:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02e      	beq.n	800396a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003912:	6959      	ldr	r1, [r3, #20]
 8003914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003916:	891a      	ldrh	r2, [r3, #8]
 8003918:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800391c:	f005 f812 	bl	8008944 <USB_ReadPMA>
 8003920:	e023      	b.n	800396a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800392a:	b29b      	uxth	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	3306      	adds	r3, #6
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800394e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	6959      	ldr	r1, [r3, #20]
 800395e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003960:	895a      	ldrh	r2, [r3, #10]
 8003962:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003966:	f004 ffed 	bl	8008944 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800396a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003972:	441a      	add	r2, r3
 8003974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003976:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003980:	441a      	add	r2, r3
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <PCD_EP_ISR_Handler+0x514>
 800398e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	429a      	cmp	r2, r3
 8003998:	d206      	bcs.n	80039a8 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800399a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f006 fdb3 	bl	800a50c <HAL_PCD_DataOutStageCallback>
 80039a6:	e005      	b.n	80039b4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039ae:	4618      	mov	r0, r3
 80039b0:	f003 fa94 	bl	8006edc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80039b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8123 	beq.w	8003c08 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80039c2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	3310      	adds	r3, #16
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80039ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a14:	78db      	ldrb	r3, [r3, #3]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	f040 80a2 	bne.w	8003b60 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a24:	7b1b      	ldrb	r3, [r3, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8093 	beq.w	8003b52 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d046      	beq.n	8003ac6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d126      	bne.n	8003a8e <PCD_EP_ISR_Handler+0x608>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	4413      	add	r3, r2
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	011a      	lsls	r2, r3, #4
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	4413      	add	r3, r2
 8003a62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e061      	b.n	8003b52 <PCD_EP_ISR_Handler+0x6cc>
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d15d      	bne.n	8003b52 <PCD_EP_ISR_Handler+0x6cc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aaa:	4413      	add	r3, r2
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	011a      	lsls	r2, r3, #4
 8003ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	e045      	b.n	8003b52 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d126      	bne.n	8003b22 <PCD_EP_ISR_Handler+0x69c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae8:	4413      	add	r3, r2
 8003aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	011a      	lsls	r2, r3, #4
 8003af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af4:	4413      	add	r3, r2
 8003af6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	801a      	strh	r2, [r3, #0]
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	e017      	b.n	8003b52 <PCD_EP_ISR_Handler+0x6cc>
 8003b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d113      	bne.n	8003b52 <PCD_EP_ISR_Handler+0x6cc>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b38:	4413      	add	r3, r2
 8003b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	011a      	lsls	r2, r3, #4
 8003b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b44:	4413      	add	r3, r2
 8003b46:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4e:	2200      	movs	r2, #0
 8003b50:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	4619      	mov	r1, r3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f006 fcf2 	bl	800a542 <HAL_PCD_DataInStageCallback>
 8003b5e:	e053      	b.n	8003c08 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003b60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d146      	bne.n	8003bfa <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3302      	adds	r3, #2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b94:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	699a      	ldr	r2, [r3, #24]
 8003b9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d907      	bls.n	8003bb4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb0:	619a      	str	r2, [r3, #24]
 8003bb2:	e002      	b.n	8003bba <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f006 fcba 	bl	800a542 <HAL_PCD_DataInStageCallback>
 8003bce:	e01b      	b.n	8003c08 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003bd8:	441a      	add	r2, r3
 8003bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bdc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003be6:	441a      	add	r2, r3
 8003be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bea:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f003 f972 	bl	8006edc <USB_EPStartXfer>
 8003bf8:	e006      	b.n	8003c08 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003bfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f91b 	bl	8003e3e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	b21b      	sxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f6ff ac3b 	blt.w	8003490 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3758      	adds	r7, #88	@ 0x58
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d07e      	beq.n	8003d3a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	3302      	adds	r3, #2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	8b7b      	ldrh	r3, [r7, #26]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d306      	bcc.n	8003c7e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	8b7b      	ldrh	r3, [r7, #26]
 8003c76:	1ad2      	subs	r2, r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	619a      	str	r2, [r3, #24]
 8003c7c:	e002      	b.n	8003c84 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d123      	bne.n	8003cd4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca6:	833b      	strh	r3, [r7, #24]
 8003ca8:	8b3b      	ldrh	r3, [r7, #24]
 8003caa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003cae:	833b      	strh	r3, [r7, #24]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	441a      	add	r2, r3
 8003cbe:	8b3b      	ldrh	r3, [r7, #24]
 8003cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01f      	beq.n	8003d1e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf8:	82fb      	strh	r3, [r7, #22]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	441a      	add	r2, r3
 8003d08:	8afb      	ldrh	r3, [r7, #22]
 8003d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d1e:	8b7b      	ldrh	r3, [r7, #26]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8087 	beq.w	8003e34 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6959      	ldr	r1, [r3, #20]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	891a      	ldrh	r2, [r3, #8]
 8003d32:	8b7b      	ldrh	r3, [r7, #26]
 8003d34:	f004 fe06 	bl	8008944 <USB_ReadPMA>
 8003d38:	e07c      	b.n	8003e34 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3306      	adds	r3, #6
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d62:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	8b7b      	ldrh	r3, [r7, #26]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d306      	bcc.n	8003d7c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	8b7b      	ldrh	r3, [r7, #26]
 8003d74:	1ad2      	subs	r2, r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	619a      	str	r2, [r3, #24]
 8003d7a:	e002      	b.n	8003d82 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d123      	bne.n	8003dd2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da4:	83fb      	strh	r3, [r7, #30]
 8003da6:	8bfb      	ldrh	r3, [r7, #30]
 8003da8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003dac:	83fb      	strh	r3, [r7, #30]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	441a      	add	r2, r3
 8003dbc:	8bfb      	ldrh	r3, [r7, #30]
 8003dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d11f      	bne.n	8003e1c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df6:	83bb      	strh	r3, [r7, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	8bbb      	ldrh	r3, [r7, #28]
 8003e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e1c:	8b7b      	ldrh	r3, [r7, #26]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6959      	ldr	r1, [r3, #20]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	895a      	ldrh	r2, [r3, #10]
 8003e2e:	8b7b      	ldrh	r3, [r7, #26]
 8003e30:	f004 fd88 	bl	8008944 <USB_ReadPMA>
    }
  }

  return count;
 8003e34:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b0a4      	sub	sp, #144	@ 0x90
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 81dd 	beq.w	8004212 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e80:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d907      	bls.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e98:	1ad2      	subs	r2, r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	619a      	str	r2, [r3, #24]
 8003e9e:	e002      	b.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f040 80b9 	bne.w	8004022 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d126      	bne.n	8003f06 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ecc:	4413      	add	r3, r2
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	011a      	lsls	r2, r3, #4
 8003ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed8:	4413      	add	r3, r2
 8003eda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e01a      	b.n	8003f3c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d116      	bne.n	8003f3c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	4413      	add	r3, r2
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	011a      	lsls	r2, r3, #4
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2e:	4413      	add	r3, r2
 8003f30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	2200      	movs	r2, #0
 8003f3a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d126      	bne.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61fb      	str	r3, [r7, #28]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	011a      	lsls	r2, r3, #4
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	801a      	strh	r2, [r3, #0]
 8003f96:	e017      	b.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	785b      	ldrb	r3, [r3, #1]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d113      	bne.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	4413      	add	r3, r2
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	011a      	lsls	r2, r3, #4
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	4413      	add	r3, r2
 8003fbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fc0:	623b      	str	r3, [r7, #32]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f006 fab7 	bl	800a542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 82fc 	beq.w	80045d8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffa:	82fb      	strh	r3, [r7, #22]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	441a      	add	r2, r3
 800400a:	8afb      	ldrh	r3, [r7, #22]
 800400c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800401c:	b29b      	uxth	r3, r3
 800401e:	8013      	strh	r3, [r2, #0]
 8004020:	e2da      	b.n	80045d8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d021      	beq.n	8004070 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004046:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800405c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004064:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800406c:	b29b      	uxth	r3, r3
 800406e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004076:	2b01      	cmp	r3, #1
 8004078:	f040 82ae 	bne.w	80045d8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004084:	441a      	add	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004092:	441a      	add	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d30b      	bcc.n	80040bc <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040b4:	1ad2      	subs	r2, r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	621a      	str	r2, [r3, #32]
 80040ba:	e017      	b.n	80040ec <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d108      	bne.n	80040d6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80040c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80040d4:	e00a      	b.n	80040ec <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2200      	movs	r2, #0
 80040ea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	785b      	ldrb	r3, [r3, #1]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d165      	bne.n	80041c0 <HAL_PCD_EP_DB_Transmit+0x382>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004102:	b29b      	uxth	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004108:	4413      	add	r3, r2
 800410a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	011a      	lsls	r2, r3, #4
 8004112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004114:	4413      	add	r3, r2
 8004116:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800411a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800411c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004126:	b29a      	uxth	r2, r3
 8004128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412a:	801a      	strh	r2, [r3, #0]
 800412c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004130:	2b3e      	cmp	r3, #62	@ 0x3e
 8004132:	d91d      	bls.n	8004170 <HAL_PCD_EP_DB_Transmit+0x332>
 8004134:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800413c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <HAL_PCD_EP_DB_Transmit+0x310>
 8004148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800414a:	3b01      	subs	r3, #1
 800414c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800414e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29a      	uxth	r2, r3
 8004154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004156:	b29b      	uxth	r3, r3
 8004158:	029b      	lsls	r3, r3, #10
 800415a:	b29b      	uxth	r3, r3
 800415c:	4313      	orrs	r3, r2
 800415e:	b29b      	uxth	r3, r3
 8004160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004168:	b29a      	uxth	r2, r3
 800416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	e044      	b.n	80041fa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004170:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <HAL_PCD_EP_DB_Transmit+0x350>
 8004178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004186:	b29a      	uxth	r2, r3
 8004188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	e035      	b.n	80041fa <HAL_PCD_EP_DB_Transmit+0x3bc>
 800418e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80041a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041a4:	3301      	adds	r3, #1
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	029b      	lsls	r3, r3, #10
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	e01c      	b.n	80041fa <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d118      	bne.n	80041fa <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041dc:	4413      	add	r3, r2
 80041de:	647b      	str	r3, [r7, #68]	@ 0x44
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	011a      	lsls	r2, r3, #4
 80041e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041e8:	4413      	add	r3, r2
 80041ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80041f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6959      	ldr	r1, [r3, #20]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	891a      	ldrh	r2, [r3, #8]
 8004206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800420a:	b29b      	uxth	r3, r3
 800420c:	f004 fb55 	bl	80088ba <USB_WritePMA>
 8004210:	e1e2      	b.n	80045d8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800421a:	b29b      	uxth	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	3306      	adds	r3, #6
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004246:	429a      	cmp	r2, r3
 8004248:	d307      	bcc.n	800425a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004252:	1ad2      	subs	r2, r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	619a      	str	r2, [r3, #24]
 8004258:	e002      	b.n	8004260 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 80c0 	bne.w	80043ea <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d126      	bne.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x482>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004280:	b29b      	uxth	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004286:	4413      	add	r3, r2
 8004288:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	011a      	lsls	r2, r3, #4
 8004290:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004292:	4413      	add	r3, r2
 8004294:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004298:	67bb      	str	r3, [r7, #120]	@ 0x78
 800429a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	e01a      	b.n	80042f6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d116      	bne.n	80042f6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042dc:	4413      	add	r3, r2
 80042de:	667b      	str	r3, [r7, #100]	@ 0x64
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	011a      	lsls	r2, r3, #4
 80042e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042e8:	4413      	add	r3, r2
 80042ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80042f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f2:	2200      	movs	r2, #0
 80042f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d12b      	bne.n	800435c <HAL_PCD_EP_DB_Transmit+0x51e>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004312:	b29b      	uxth	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004318:	4413      	add	r3, r2
 800431a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	011a      	lsls	r2, r3, #4
 8004322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004324:	4413      	add	r3, r2
 8004326:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800432a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800432e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800433a:	b29a      	uxth	r2, r3
 800433c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004352:	b29a      	uxth	r2, r3
 8004354:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	e017      	b.n	800438c <HAL_PCD_EP_DB_Transmit+0x54e>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d113      	bne.n	800438c <HAL_PCD_EP_DB_Transmit+0x54e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800436c:	b29b      	uxth	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004372:	4413      	add	r3, r2
 8004374:	677b      	str	r3, [r7, #116]	@ 0x74
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	011a      	lsls	r2, r3, #4
 800437c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800437e:	4413      	add	r3, r2
 8004380:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004384:	673b      	str	r3, [r7, #112]	@ 0x70
 8004386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004388:	2200      	movs	r2, #0
 800438a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	4619      	mov	r1, r3
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f006 f8d5 	bl	800a542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 811a 	bne.w	80045d8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043be:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	441a      	add	r2, r3
 80043d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
 80043e8:	e0f6      	b.n	80045d8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d121      	bne.n	8004438 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	441a      	add	r2, r3
 8004420:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800442c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004434:	b29b      	uxth	r3, r3
 8004436:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800443e:	2b01      	cmp	r3, #1
 8004440:	f040 80ca 	bne.w	80045d8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800444c:	441a      	add	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800445a:	441a      	add	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6a1a      	ldr	r2, [r3, #32]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d30b      	bcc.n	8004484 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	6a1a      	ldr	r2, [r3, #32]
 8004478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	621a      	str	r2, [r3, #32]
 8004482:	e017      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800448c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004490:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800449c:	e00a      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2200      	movs	r2, #0
 80044aa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d165      	bne.n	800458e <HAL_PCD_EP_DB_Transmit+0x750>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d6:	4413      	add	r3, r2
 80044d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	011a      	lsls	r2, r3, #4
 80044e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044e2:	4413      	add	r3, r2
 80044e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8004500:	d91d      	bls.n	800453e <HAL_PCD_EP_DB_Transmit+0x700>
 8004502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800450a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <HAL_PCD_EP_DB_Transmit+0x6de>
 8004516:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004518:	3b01      	subs	r3, #1
 800451a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29a      	uxth	r2, r3
 8004522:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004524:	b29b      	uxth	r3, r3
 8004526:	029b      	lsls	r3, r3, #10
 8004528:	b29b      	uxth	r3, r3
 800452a:	4313      	orrs	r3, r2
 800452c:	b29b      	uxth	r3, r3
 800452e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004536:	b29a      	uxth	r2, r3
 8004538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800453a:	801a      	strh	r2, [r3, #0]
 800453c:	e041      	b.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x784>
 800453e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <HAL_PCD_EP_DB_Transmit+0x71e>
 8004546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004554:	b29a      	uxth	r2, r3
 8004556:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004558:	801a      	strh	r2, [r3, #0]
 800455a:	e032      	b.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x784>
 800455c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004564:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_PCD_EP_DB_Transmit+0x738>
 8004570:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004572:	3301      	adds	r3, #1
 8004574:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004576:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29a      	uxth	r2, r3
 800457c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800457e:	b29b      	uxth	r3, r3
 8004580:	029b      	lsls	r3, r3, #10
 8004582:	b29b      	uxth	r3, r3
 8004584:	4313      	orrs	r3, r2
 8004586:	b29a      	uxth	r2, r3
 8004588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	e019      	b.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x784>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d115      	bne.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a4:	4413      	add	r3, r2
 80045a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	011a      	lsls	r2, r3, #4
 80045ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b0:	4413      	add	r3, r2
 80045b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045c0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6959      	ldr	r1, [r3, #20]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	895a      	ldrh	r2, [r3, #10]
 80045ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f004 f971 	bl	80088ba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f2:	82bb      	strh	r3, [r7, #20]
 80045f4:	8abb      	ldrh	r3, [r7, #20]
 80045f6:	f083 0310 	eor.w	r3, r3, #16
 80045fa:	82bb      	strh	r3, [r7, #20]
 80045fc:	8abb      	ldrh	r3, [r7, #20]
 80045fe:	f083 0320 	eor.w	r3, r3, #32
 8004602:	82bb      	strh	r3, [r7, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	441a      	add	r2, r3
 8004612:	8abb      	ldrh	r3, [r7, #20]
 8004614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800461c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004624:	b29b      	uxth	r3, r3
 8004626:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3790      	adds	r7, #144	@ 0x90
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004632:	b480      	push	{r7}
 8004634:	b087      	sub	sp, #28
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	607b      	str	r3, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	817b      	strh	r3, [r7, #10]
 8004640:	4613      	mov	r3, r2
 8004642:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004644:	897b      	ldrh	r3, [r7, #10]
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004650:	897b      	ldrh	r3, [r7, #10]
 8004652:	f003 0207 	and.w	r2, r3, #7
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	3310      	adds	r3, #16
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e009      	b.n	800467c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004668:	897a      	ldrh	r2, [r7, #10]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4413      	add	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800467c:	893b      	ldrh	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2200      	movs	r2, #0
 8004686:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	b29a      	uxth	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	80da      	strh	r2, [r3, #6]
 8004690:	e00b      	b.n	80046aa <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2201      	movs	r2, #1
 8004696:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	b29a      	uxth	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e272      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8087 	beq.w	80047e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d8:	4b92      	ldr	r3, [pc, #584]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d00c      	beq.n	80046fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d112      	bne.n	8004716 <HAL_RCC_OscConfig+0x5e>
 80046f0:	4b8c      	ldr	r3, [pc, #560]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046fc:	d10b      	bne.n	8004716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fe:	4b89      	ldr	r3, [pc, #548]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d06c      	beq.n	80047e4 <HAL_RCC_OscConfig+0x12c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d168      	bne.n	80047e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e24c      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471e:	d106      	bne.n	800472e <HAL_RCC_OscConfig+0x76>
 8004720:	4b80      	ldr	r3, [pc, #512]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a7f      	ldr	r2, [pc, #508]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	e02e      	b.n	800478c <HAL_RCC_OscConfig+0xd4>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x98>
 8004736:	4b7b      	ldr	r3, [pc, #492]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7a      	ldr	r2, [pc, #488]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 800473c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b78      	ldr	r3, [pc, #480]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a77      	ldr	r2, [pc, #476]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xd4>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0xbc>
 800475a:	4b72      	ldr	r3, [pc, #456]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a71      	ldr	r2, [pc, #452]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b6f      	ldr	r3, [pc, #444]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6e      	ldr	r2, [pc, #440]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xd4>
 8004774:	4b6b      	ldr	r3, [pc, #428]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6a      	ldr	r2, [pc, #424]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b68      	ldr	r3, [pc, #416]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a67      	ldr	r2, [pc, #412]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800478a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd fb40 	bl	8001e18 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fd fb3c 	bl	8001e18 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e200      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xe4>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fd fb2c 	bl	8001e18 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fd fb28 	bl	8001e18 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1ec      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b53      	ldr	r3, [pc, #332]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x10c>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d063      	beq.n	80048ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047fe:	4b49      	ldr	r3, [pc, #292]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b08      	cmp	r3, #8
 8004808:	d11c      	bne.n	8004844 <HAL_RCC_OscConfig+0x18c>
 800480a:	4b46      	ldr	r3, [pc, #280]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004816:	4b43      	ldr	r3, [pc, #268]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x176>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1c0      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b3d      	ldr	r3, [pc, #244]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4939      	ldr	r1, [pc, #228]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	e03a      	b.n	80048ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b36      	ldr	r3, [pc, #216]	@ (8004928 <HAL_RCC_OscConfig+0x270>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004852:	f7fd fae1 	bl	8001e18 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485a:	f7fd fadd 	bl	8001e18 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1a1      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	4b2d      	ldr	r3, [pc, #180]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004878:	4b2a      	ldr	r3, [pc, #168]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4927      	ldr	r1, [pc, #156]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	e015      	b.n	80048ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488e:	4b26      	ldr	r3, [pc, #152]	@ (8004928 <HAL_RCC_OscConfig+0x270>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fd fac0 	bl	8001e18 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489c:	f7fd fabc 	bl	8001e18 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e180      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d03a      	beq.n	800493c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d019      	beq.n	8004902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ce:	4b17      	ldr	r3, [pc, #92]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d4:	f7fd faa0 	bl	8001e18 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fd fa9c 	bl	8001e18 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e160      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <HAL_RCC_OscConfig+0x26c>)
 80048f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048fa:	2001      	movs	r0, #1
 80048fc:	f000 fa9c 	bl	8004e38 <RCC_Delay>
 8004900:	e01c      	b.n	800493c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004902:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004908:	f7fd fa86 	bl	8001e18 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490e:	e00f      	b.n	8004930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004910:	f7fd fa82 	bl	8001e18 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d908      	bls.n	8004930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e146      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000
 8004928:	42420000 	.word	0x42420000
 800492c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004930:	4b92      	ldr	r3, [pc, #584]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e9      	bne.n	8004910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80a6 	beq.w	8004a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494e:	4b8b      	ldr	r3, [pc, #556]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	4b88      	ldr	r3, [pc, #544]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	4a87      	ldr	r2, [pc, #540]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004964:	61d3      	str	r3, [r2, #28]
 8004966:	4b85      	ldr	r3, [pc, #532]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004976:	4b82      	ldr	r3, [pc, #520]	@ (8004b80 <HAL_RCC_OscConfig+0x4c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d118      	bne.n	80049b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004982:	4b7f      	ldr	r3, [pc, #508]	@ (8004b80 <HAL_RCC_OscConfig+0x4c8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a7e      	ldr	r2, [pc, #504]	@ (8004b80 <HAL_RCC_OscConfig+0x4c8>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800498c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498e:	f7fd fa43 	bl	8001e18 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004996:	f7fd fa3f 	bl	8001e18 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b64      	cmp	r3, #100	@ 0x64
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e103      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	4b75      	ldr	r3, [pc, #468]	@ (8004b80 <HAL_RCC_OscConfig+0x4c8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d106      	bne.n	80049ca <HAL_RCC_OscConfig+0x312>
 80049bc:	4b6f      	ldr	r3, [pc, #444]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4a6e      	ldr	r2, [pc, #440]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6213      	str	r3, [r2, #32]
 80049c8:	e02d      	b.n	8004a26 <HAL_RCC_OscConfig+0x36e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0x334>
 80049d2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4a69      	ldr	r2, [pc, #420]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	6213      	str	r3, [r2, #32]
 80049de:	4b67      	ldr	r3, [pc, #412]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4a66      	ldr	r2, [pc, #408]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	f023 0304 	bic.w	r3, r3, #4
 80049e8:	6213      	str	r3, [r2, #32]
 80049ea:	e01c      	b.n	8004a26 <HAL_RCC_OscConfig+0x36e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	d10c      	bne.n	8004a0e <HAL_RCC_OscConfig+0x356>
 80049f4:	4b61      	ldr	r3, [pc, #388]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	4a60      	ldr	r2, [pc, #384]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	f043 0304 	orr.w	r3, r3, #4
 80049fe:	6213      	str	r3, [r2, #32]
 8004a00:	4b5e      	ldr	r3, [pc, #376]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4a5d      	ldr	r2, [pc, #372]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6213      	str	r3, [r2, #32]
 8004a0c:	e00b      	b.n	8004a26 <HAL_RCC_OscConfig+0x36e>
 8004a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4a5a      	ldr	r2, [pc, #360]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	6213      	str	r3, [r2, #32]
 8004a1a:	4b58      	ldr	r3, [pc, #352]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	4a57      	ldr	r2, [pc, #348]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d015      	beq.n	8004a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7fd f9f3 	bl	8001e18 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fd f9ef 	bl	8001e18 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e0b1      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ee      	beq.n	8004a36 <HAL_RCC_OscConfig+0x37e>
 8004a58:	e014      	b.n	8004a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5a:	f7fd f9dd 	bl	8001e18 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a60:	e00a      	b.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fd f9d9 	bl	8001e18 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e09b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a78:	4b40      	ldr	r3, [pc, #256]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ee      	bne.n	8004a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d105      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 8087 	beq.w	8004bae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa0:	4b36      	ldr	r3, [pc, #216]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d061      	beq.n	8004b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d146      	bne.n	8004b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab4:	4b33      	ldr	r3, [pc, #204]	@ (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aba:	f7fd f9ad 	bl	8001e18 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac2:	f7fd f9a9 	bl	8001e18 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e06d      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad4:	4b29      	ldr	r3, [pc, #164]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae8:	d108      	bne.n	8004afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aea:	4b24      	ldr	r3, [pc, #144]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	4921      	ldr	r1, [pc, #132]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004afc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a19      	ldr	r1, [r3, #32]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	491b      	ldr	r1, [pc, #108]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b14:	4b1b      	ldr	r3, [pc, #108]	@ (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1a:	f7fd f97d 	bl	8001e18 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b22:	f7fd f979 	bl	8001e18 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e03d      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b34:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f0      	beq.n	8004b22 <HAL_RCC_OscConfig+0x46a>
 8004b40:	e035      	b.n	8004bae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b42:	4b10      	ldr	r3, [pc, #64]	@ (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fd f966 	bl	8001e18 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fd f962 	bl	8001e18 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e026      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b62:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x498>
 8004b6e:	e01e      	b.n	8004bae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d107      	bne.n	8004b88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e019      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	40007000 	.word	0x40007000
 8004b84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b88:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <HAL_RCC_OscConfig+0x500>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d001      	beq.n	8004bae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000

08004bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0d0      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d910      	bls.n	8004c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b67      	ldr	r3, [pc, #412]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0207 	bic.w	r2, r3, #7
 8004be6:	4965      	ldr	r1, [pc, #404]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b63      	ldr	r3, [pc, #396]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0b8      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c18:	4b59      	ldr	r3, [pc, #356]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4a58      	ldr	r2, [pc, #352]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c30:	4b53      	ldr	r3, [pc, #332]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a52      	ldr	r2, [pc, #328]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c3c:	4b50      	ldr	r3, [pc, #320]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	494d      	ldr	r1, [pc, #308]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d040      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	4b47      	ldr	r3, [pc, #284]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d115      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e07f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7a:	4b41      	ldr	r3, [pc, #260]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e073      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e06b      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9a:	4b39      	ldr	r3, [pc, #228]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4936      	ldr	r1, [pc, #216]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cac:	f7fd f8b4 	bl	8001e18 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	e00a      	b.n	8004cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb4:	f7fd f8b0 	bl	8001e18 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e053      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	4b2d      	ldr	r3, [pc, #180]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 020c 	and.w	r2, r3, #12
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d1eb      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b27      	ldr	r3, [pc, #156]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d210      	bcs.n	8004d0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b24      	ldr	r3, [pc, #144]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 0207 	bic.w	r2, r3, #7
 8004cf2:	4922      	ldr	r1, [pc, #136]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b20      	ldr	r3, [pc, #128]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e032      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d18:	4b19      	ldr	r3, [pc, #100]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4916      	ldr	r1, [pc, #88]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	490e      	ldr	r1, [pc, #56]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d4a:	f000 f821 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	490a      	ldr	r1, [pc, #40]	@ (8004d84 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5c:	5ccb      	ldrb	r3, [r1, r3]
 8004d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d62:	4a09      	ldr	r2, [pc, #36]	@ (8004d88 <HAL_RCC_ClockConfig+0x1cc>)
 8004d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d66:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_RCC_ClockConfig+0x1d0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fd f812 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40022000 	.word	0x40022000
 8004d80:	40021000 	.word	0x40021000
 8004d84:	0800b3b8 	.word	0x0800b3b8
 8004d88:	20000098 	.word	0x20000098
 8004d8c:	2000009c 	.word	0x2000009c

08004d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	2300      	movs	r3, #0
 8004da4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004daa:	4b1e      	ldr	r3, [pc, #120]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d002      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d003      	beq.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8004dbe:	e027      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dc0:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dc2:	613b      	str	r3, [r7, #16]
      break;
 8004dc4:	e027      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	0c9b      	lsrs	r3, r3, #18
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	4a17      	ldr	r2, [pc, #92]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004dd0:	5cd3      	ldrb	r3, [r2, r3]
 8004dd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d010      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dde:	4b11      	ldr	r3, [pc, #68]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	0c5b      	lsrs	r3, r3, #17
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	4a11      	ldr	r2, [pc, #68]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004dea:	5cd3      	ldrb	r3, [r2, r3]
 8004dec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004df2:	fb03 f202 	mul.w	r2, r3, r2
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	e004      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a0c      	ldr	r2, [pc, #48]	@ (8004e34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	613b      	str	r3, [r7, #16]
      break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e10:	4b05      	ldr	r3, [pc, #20]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e12:	613b      	str	r3, [r7, #16]
      break;
 8004e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e16:	693b      	ldr	r3, [r7, #16]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
 8004e28:	007a1200 	.word	0x007a1200
 8004e2c:	0800b3c8 	.word	0x0800b3c8
 8004e30:	0800b3d8 	.word	0x0800b3d8
 8004e34:	003d0900 	.word	0x003d0900

08004e38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <RCC_Delay+0x34>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0a      	ldr	r2, [pc, #40]	@ (8004e70 <RCC_Delay+0x38>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	0a5b      	lsrs	r3, r3, #9
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e54:	bf00      	nop
  }
  while (Delay --);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	60fa      	str	r2, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f9      	bne.n	8004e54 <RCC_Delay+0x1c>
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	20000098 	.word	0x20000098
 8004e70:	10624dd3 	.word	0x10624dd3

08004e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d07d      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e90:	2300      	movs	r3, #0
 8004e92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e94:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10d      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea0:	4b4c      	ldr	r3, [pc, #304]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	61d3      	str	r3, [r2, #28]
 8004eac:	4b49      	ldr	r3, [pc, #292]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebc:	4b46      	ldr	r3, [pc, #280]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d118      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ec8:	4b43      	ldr	r3, [pc, #268]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a42      	ldr	r2, [pc, #264]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed4:	f7fc ffa0 	bl	8001e18 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eda:	e008      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004edc:	f7fc ff9c 	bl	8001e18 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	@ 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e06d      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	4b3a      	ldr	r3, [pc, #232]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004efa:	4b36      	ldr	r3, [pc, #216]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d02e      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d027      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f18:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f22:	4b2e      	ldr	r3, [pc, #184]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f28:	4b2c      	ldr	r3, [pc, #176]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f2e:	4a29      	ldr	r2, [pc, #164]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d014      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3e:	f7fc ff6b 	bl	8001e18 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f44:	e00a      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fc ff67 	bl	8001e18 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e036      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ee      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f68:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4917      	ldr	r1, [pc, #92]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f98:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	490b      	ldr	r1, [pc, #44]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fb6:	4b07      	ldr	r3, [pc, #28]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	4904      	ldr	r1, [pc, #16]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40007000 	.word	0x40007000
 8004fdc:	42420440 	.word	0x42420440

08004fe0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e041      	b.n	8005076 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fc fcea 	bl	80019e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f000 fc9e 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d109      	bne.n	80050a4 <HAL_TIM_PWM_Start+0x24>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e022      	b.n	80050ea <HAL_TIM_PWM_Start+0x6a>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d109      	bne.n	80050be <HAL_TIM_PWM_Start+0x3e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	bf14      	ite	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	2300      	moveq	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	e015      	b.n	80050ea <HAL_TIM_PWM_Start+0x6a>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d109      	bne.n	80050d8 <HAL_TIM_PWM_Start+0x58>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	e008      	b.n	80050ea <HAL_TIM_PWM_Start+0x6a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e05e      	b.n	80051b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_PWM_Start+0x82>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005100:	e013      	b.n	800512a <HAL_TIM_PWM_Start+0xaa>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d104      	bne.n	8005112 <HAL_TIM_PWM_Start+0x92>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005110:	e00b      	b.n	800512a <HAL_TIM_PWM_Start+0xaa>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d104      	bne.n	8005122 <HAL_TIM_PWM_Start+0xa2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005120:	e003      	b.n	800512a <HAL_TIM_PWM_Start+0xaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2201      	movs	r2, #1
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 ff17 	bl	8005f66 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1e      	ldr	r2, [pc, #120]	@ (80051b8 <HAL_TIM_PWM_Start+0x138>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d107      	bne.n	8005152 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005150:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a18      	ldr	r2, [pc, #96]	@ (80051b8 <HAL_TIM_PWM_Start+0x138>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_TIM_PWM_Start+0xfa>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005164:	d009      	beq.n	800517a <HAL_TIM_PWM_Start+0xfa>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <HAL_TIM_PWM_Start+0x13c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_TIM_PWM_Start+0xfa>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a12      	ldr	r2, [pc, #72]	@ (80051c0 <HAL_TIM_PWM_Start+0x140>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d111      	bne.n	800519e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b06      	cmp	r3, #6
 800518a:	d010      	beq.n	80051ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519c:	e007      	b.n	80051ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800

080051c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e041      	b.n	800525a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fc fc28 	bl	8001a40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 fbac 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIM_IC_Start_IT+0x1e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800527e:	b2db      	uxtb	r3, r3
 8005280:	e013      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x46>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIM_IC_Start_IT+0x2e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800528e:	b2db      	uxtb	r3, r3
 8005290:	e00b      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x46>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_IC_Start_IT+0x3e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e003      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x46>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <HAL_TIM_IC_Start_IT+0x58>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e013      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0x80>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d104      	bne.n	80052cc <HAL_TIM_IC_Start_IT+0x68>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e00b      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0x80>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d104      	bne.n	80052dc <HAL_TIM_IC_Start_IT+0x78>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e003      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0x80>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052e6:	7bbb      	ldrb	r3, [r7, #14]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d102      	bne.n	80052f2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052ec:	7b7b      	ldrb	r3, [r7, #13]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d001      	beq.n	80052f6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e0b8      	b.n	8005468 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_IC_Start_IT+0xa2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005304:	e013      	b.n	800532e <HAL_TIM_IC_Start_IT+0xca>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d104      	bne.n	8005316 <HAL_TIM_IC_Start_IT+0xb2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005314:	e00b      	b.n	800532e <HAL_TIM_IC_Start_IT+0xca>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d104      	bne.n	8005326 <HAL_TIM_IC_Start_IT+0xc2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005324:	e003      	b.n	800532e <HAL_TIM_IC_Start_IT+0xca>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_TIM_IC_Start_IT+0xda>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800533c:	e013      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x102>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d104      	bne.n	800534e <HAL_TIM_IC_Start_IT+0xea>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800534c:	e00b      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x102>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d104      	bne.n	800535e <HAL_TIM_IC_Start_IT+0xfa>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800535c:	e003      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x102>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d841      	bhi.n	80053f0 <HAL_TIM_IC_Start_IT+0x18c>
 800536c:	a201      	add	r2, pc, #4	@ (adr r2, 8005374 <HAL_TIM_IC_Start_IT+0x110>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080053f1 	.word	0x080053f1
 800537c:	080053f1 	.word	0x080053f1
 8005380:	080053f1 	.word	0x080053f1
 8005384:	080053bb 	.word	0x080053bb
 8005388:	080053f1 	.word	0x080053f1
 800538c:	080053f1 	.word	0x080053f1
 8005390:	080053f1 	.word	0x080053f1
 8005394:	080053cd 	.word	0x080053cd
 8005398:	080053f1 	.word	0x080053f1
 800539c:	080053f1 	.word	0x080053f1
 80053a0:	080053f1 	.word	0x080053f1
 80053a4:	080053df 	.word	0x080053df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0202 	orr.w	r2, r2, #2
 80053b6:	60da      	str	r2, [r3, #12]
      break;
 80053b8:	e01d      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0204 	orr.w	r2, r2, #4
 80053c8:	60da      	str	r2, [r3, #12]
      break;
 80053ca:	e014      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0208 	orr.w	r2, r2, #8
 80053da:	60da      	str	r2, [r3, #12]
      break;
 80053dc:	e00b      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0210 	orr.w	r2, r2, #16
 80053ec:	60da      	str	r2, [r3, #12]
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
      break;
 80053f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d134      	bne.n	8005466 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fdae 	bl	8005f66 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a18      	ldr	r2, [pc, #96]	@ (8005470 <HAL_TIM_IC_Start_IT+0x20c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00e      	beq.n	8005432 <HAL_TIM_IC_Start_IT+0x1ce>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541c:	d009      	beq.n	8005432 <HAL_TIM_IC_Start_IT+0x1ce>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a14      	ldr	r2, [pc, #80]	@ (8005474 <HAL_TIM_IC_Start_IT+0x210>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <HAL_TIM_IC_Start_IT+0x1ce>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a12      	ldr	r2, [pc, #72]	@ (8005478 <HAL_TIM_IC_Start_IT+0x214>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d111      	bne.n	8005456 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b06      	cmp	r3, #6
 8005442:	d010      	beq.n	8005466 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005454:	e007      	b.n	8005466 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0201 	orr.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800

0800547c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d020      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01b      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0202 	mvn.w	r2, #2
 80054b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fb fd8e 	bl	8000fe8 <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fa2b 	bl	800592a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa31 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d020      	beq.n	800552c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01b      	beq.n	800552c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0204 	mvn.w	r2, #4
 80054fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fb fd68 	bl	8000fe8 <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa05 	bl	800592a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fa0b 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d020      	beq.n	8005578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01b      	beq.n	8005578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0208 	mvn.w	r2, #8
 8005548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2204      	movs	r2, #4
 800554e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fb fd42 	bl	8000fe8 <HAL_TIM_IC_CaptureCallback>
 8005564:	e005      	b.n	8005572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9df 	bl	800592a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f9e5 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	d020      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01b      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0210 	mvn.w	r2, #16
 8005594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2208      	movs	r2, #8
 800559a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb fd1c 	bl	8000fe8 <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9b9 	bl	800592a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f9bf 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0201 	mvn.w	r2, #1
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f998 	bl	8005918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fe28 	bl	800625c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f98f 	bl	800594e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0220 	mvn.w	r2, #32
 800564c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fdfb 	bl	800624a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005676:	2302      	movs	r3, #2
 8005678:	e088      	b.n	800578c <HAL_TIM_IC_ConfigChannel+0x130>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11b      	bne.n	80056c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005698:	f000 fb58 	bl	8005d4c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 020c 	bic.w	r2, r2, #12
 80056aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6999      	ldr	r1, [r3, #24]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	619a      	str	r2, [r3, #24]
 80056be:	e060      	b.n	8005782 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d11c      	bne.n	8005700 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80056d6:	f000 fb93 	bl	8005e00 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80056e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6999      	ldr	r1, [r3, #24]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	021a      	lsls	r2, r3, #8
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	619a      	str	r2, [r3, #24]
 80056fe:	e040      	b.n	8005782 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b08      	cmp	r3, #8
 8005704:	d11b      	bne.n	800573e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005716:	f000 fbaf 	bl	8005e78 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 020c 	bic.w	r2, r2, #12
 8005728:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69d9      	ldr	r1, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	61da      	str	r2, [r3, #28]
 800573c:	e021      	b.n	8005782 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b0c      	cmp	r3, #12
 8005742:	d11c      	bne.n	800577e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005754:	f000 fbcb 	bl	8005eee <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005766:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69d9      	ldr	r1, [r3, #28]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	021a      	lsls	r2, r3, #8
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	61da      	str	r2, [r3, #28]
 800577c:	e001      	b.n	8005782 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0ae      	b.n	8005910 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b0c      	cmp	r3, #12
 80057be:	f200 809f 	bhi.w	8005900 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057fd 	.word	0x080057fd
 80057cc:	08005901 	.word	0x08005901
 80057d0:	08005901 	.word	0x08005901
 80057d4:	08005901 	.word	0x08005901
 80057d8:	0800583d 	.word	0x0800583d
 80057dc:	08005901 	.word	0x08005901
 80057e0:	08005901 	.word	0x08005901
 80057e4:	08005901 	.word	0x08005901
 80057e8:	0800587f 	.word	0x0800587f
 80057ec:	08005901 	.word	0x08005901
 80057f0:	08005901 	.word	0x08005901
 80057f4:	08005901 	.word	0x08005901
 80057f8:	080058bf 	.word	0x080058bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f91a 	bl	8005a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0208 	orr.w	r2, r2, #8
 8005816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0204 	bic.w	r2, r2, #4
 8005826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6999      	ldr	r1, [r3, #24]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	619a      	str	r2, [r3, #24]
      break;
 800583a:	e064      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f960 	bl	8005b08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6999      	ldr	r1, [r3, #24]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	619a      	str	r2, [r3, #24]
      break;
 800587c:	e043      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f9a9 	bl	8005bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0208 	orr.w	r2, r2, #8
 8005898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0204 	bic.w	r2, r2, #4
 80058a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69d9      	ldr	r1, [r3, #28]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	61da      	str	r2, [r3, #28]
      break;
 80058bc:	e023      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 f9f3 	bl	8005cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69d9      	ldr	r1, [r3, #28]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	021a      	lsls	r2, r3, #8
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	61da      	str	r2, [r3, #28]
      break;
 80058fe:	e002      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	75fb      	strb	r3, [r7, #23]
      break;
 8005904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800590e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr

0800592a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a2f      	ldr	r2, [pc, #188]	@ (8005a30 <TIM_Base_SetConfig+0xd0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00b      	beq.n	8005990 <TIM_Base_SetConfig+0x30>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597e:	d007      	beq.n	8005990 <TIM_Base_SetConfig+0x30>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a2c      	ldr	r2, [pc, #176]	@ (8005a34 <TIM_Base_SetConfig+0xd4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_Base_SetConfig+0x30>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2b      	ldr	r2, [pc, #172]	@ (8005a38 <TIM_Base_SetConfig+0xd8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d108      	bne.n	80059a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a22      	ldr	r2, [pc, #136]	@ (8005a30 <TIM_Base_SetConfig+0xd0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_Base_SetConfig+0x62>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b0:	d007      	beq.n	80059c2 <TIM_Base_SetConfig+0x62>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a34 <TIM_Base_SetConfig+0xd4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_Base_SetConfig+0x62>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a38 <TIM_Base_SetConfig+0xd8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005a30 <TIM_Base_SetConfig+0xd0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d103      	bne.n	8005a08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f023 0201 	bic.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	611a      	str	r2, [r3, #16]
  }
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800

08005a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 0201 	bic.w	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f023 0302 	bic.w	r3, r3, #2
 8005a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a1c      	ldr	r2, [pc, #112]	@ (8005b04 <TIM_OC1_SetConfig+0xc8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d10c      	bne.n	8005ab2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0308 	bic.w	r3, r3, #8
 8005a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f023 0304 	bic.w	r3, r3, #4
 8005ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a13      	ldr	r2, [pc, #76]	@ (8005b04 <TIM_OC1_SetConfig+0xc8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d111      	bne.n	8005ade <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	621a      	str	r2, [r3, #32]
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40012c00 	.word	0x40012c00

08005b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f023 0210 	bic.w	r2, r3, #16
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0320 	bic.w	r3, r3, #32
 8005b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd8 <TIM_OC2_SetConfig+0xd0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d10d      	bne.n	8005b84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a14      	ldr	r2, [pc, #80]	@ (8005bd8 <TIM_OC2_SetConfig+0xd0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d113      	bne.n	8005bb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr
 8005bd8:	40012c00 	.word	0x40012c00

08005bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0303 	bic.w	r3, r3, #3
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	@ (8005cac <TIM_OC3_SetConfig+0xd0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d10d      	bne.n	8005c56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a14      	ldr	r2, [pc, #80]	@ (8005cac <TIM_OC3_SetConfig+0xd0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d113      	bne.n	8005c86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40012c00 	.word	0x40012c00

08005cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	031b      	lsls	r3, r3, #12
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8005d48 <TIM_OC4_SetConfig+0x98>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d109      	bne.n	8005d24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	019b      	lsls	r3, r3, #6
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr
 8005d48:	40012c00 	.word	0x40012c00

08005d4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f023 0201 	bic.w	r2, r3, #1
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <TIM_TI1_SetConfig+0xa8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00b      	beq.n	8005d92 <TIM_TI1_SetConfig+0x46>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d80:	d007      	beq.n	8005d92 <TIM_TI1_SetConfig+0x46>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	@ (8005df8 <TIM_TI1_SetConfig+0xac>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_TI1_SetConfig+0x46>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dfc <TIM_TI1_SetConfig+0xb0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d101      	bne.n	8005d96 <TIM_TI1_SetConfig+0x4a>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <TIM_TI1_SetConfig+0x4c>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0303 	bic.w	r3, r3, #3
 8005da2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	e003      	b.n	8005db6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f023 030a 	bic.w	r3, r3, #10
 8005dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f003 030a 	and.w	r3, r3, #10
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800

08005e00 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f023 0210 	bic.w	r2, r3, #16
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	031b      	lsls	r3, r3, #12
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e52:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f023 0303 	bic.w	r3, r3, #3
 8005ea4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	621a      	str	r2, [r3, #32]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b087      	sub	sp, #28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	031b      	lsls	r3, r3, #12
 8005f46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	621a      	str	r2, [r3, #32]
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr

08005f66 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b087      	sub	sp, #28
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	2201      	movs	r2, #1
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1a      	ldr	r2, [r3, #32]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	43db      	mvns	r3, r3
 8005f88:	401a      	ands	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1a      	ldr	r2, [r3, #32]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	621a      	str	r2, [r3, #32]
}
 8005fa4:	bf00      	nop
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr
	...

08005fb0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d109      	bne.n	8005fd4 <HAL_TIMEx_PWMN_Start+0x24>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	bf14      	ite	ne
 8005fcc:	2301      	movne	r3, #1
 8005fce:	2300      	moveq	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	e022      	b.n	800601a <HAL_TIMEx_PWMN_Start+0x6a>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d109      	bne.n	8005fee <HAL_TIMEx_PWMN_Start+0x3e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	bf14      	ite	ne
 8005fe6:	2301      	movne	r3, #1
 8005fe8:	2300      	moveq	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	e015      	b.n	800601a <HAL_TIMEx_PWMN_Start+0x6a>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d109      	bne.n	8006008 <HAL_TIMEx_PWMN_Start+0x58>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	bf14      	ite	ne
 8006000:	2301      	movne	r3, #1
 8006002:	2300      	moveq	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	e008      	b.n	800601a <HAL_TIMEx_PWMN_Start+0x6a>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	bf14      	ite	ne
 8006014:	2301      	movne	r3, #1
 8006016:	2300      	moveq	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e059      	b.n	80060d6 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <HAL_TIMEx_PWMN_Start+0x82>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006030:	e013      	b.n	800605a <HAL_TIMEx_PWMN_Start+0xaa>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b04      	cmp	r3, #4
 8006036:	d104      	bne.n	8006042 <HAL_TIMEx_PWMN_Start+0x92>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006040:	e00b      	b.n	800605a <HAL_TIMEx_PWMN_Start+0xaa>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b08      	cmp	r3, #8
 8006046:	d104      	bne.n	8006052 <HAL_TIMEx_PWMN_Start+0xa2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006050:	e003      	b.n	800605a <HAL_TIMEx_PWMN_Start+0xaa>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2202      	movs	r2, #2
 8006056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2204      	movs	r2, #4
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f903 	bl	800626e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006076:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a18      	ldr	r2, [pc, #96]	@ (80060e0 <HAL_TIMEx_PWMN_Start+0x130>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00e      	beq.n	80060a0 <HAL_TIMEx_PWMN_Start+0xf0>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800608a:	d009      	beq.n	80060a0 <HAL_TIMEx_PWMN_Start+0xf0>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a14      	ldr	r2, [pc, #80]	@ (80060e4 <HAL_TIMEx_PWMN_Start+0x134>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d004      	beq.n	80060a0 <HAL_TIMEx_PWMN_Start+0xf0>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a13      	ldr	r2, [pc, #76]	@ (80060e8 <HAL_TIMEx_PWMN_Start+0x138>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d111      	bne.n	80060c4 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b06      	cmp	r3, #6
 80060b0:	d010      	beq.n	80060d4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c2:	e007      	b.n	80060d4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800

080060ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006100:	2302      	movs	r3, #2
 8006102:	e046      	b.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a16      	ldr	r2, [pc, #88]	@ (800619c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00e      	beq.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006150:	d009      	beq.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a12      	ldr	r2, [pc, #72]	@ (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d004      	beq.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a10      	ldr	r2, [pc, #64]	@ (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d10c      	bne.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800616c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	4313      	orrs	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800

080061a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e03d      	b.n	8006240 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr

0800625c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr

0800626e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800626e:	b480      	push	{r7}
 8006270:	b087      	sub	sp, #28
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	2204      	movs	r2, #4
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	43db      	mvns	r3, r3
 8006290:	401a      	ands	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	fa01 f303 	lsl.w	r3, r1, r3
 80062a6:	431a      	orrs	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	621a      	str	r2, [r3, #32]
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	4638      	mov	r0, r7
 80062c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062e0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80062e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006304:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006308:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	b29b      	uxth	r3, r3
 8006316:	43db      	mvns	r3, r3
 8006318:	b29b      	uxth	r3, r3
 800631a:	4013      	ands	r3, r2
 800631c:	b29a      	uxth	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr

08006330 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr

08006348 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	4638      	mov	r0, r7
 8006352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr
	...

08006384 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006384:	b480      	push	{r7}
 8006386:	b09d      	sub	sp, #116	@ 0x74
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80063a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	78db      	ldrb	r3, [r3, #3]
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d81f      	bhi.n	80063f6 <USB_ActivateEndpoint+0x72>
 80063b6:	a201      	add	r2, pc, #4	@ (adr r2, 80063bc <USB_ActivateEndpoint+0x38>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	080063cd 	.word	0x080063cd
 80063c0:	080063e9 	.word	0x080063e9
 80063c4:	080063ff 	.word	0x080063ff
 80063c8:	080063db 	.word	0x080063db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80063d8:	e012      	b.n	8006400 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063de:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80063e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80063e6:	e00b      	b.n	8006400 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80063e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80063f4:	e004      	b.n	8006400 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80063fc:	e000      	b.n	8006400 <USB_ActivateEndpoint+0x7c>
      break;
 80063fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	441a      	add	r2, r3
 800640a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800641a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006438:	b29b      	uxth	r3, r3
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	7812      	ldrb	r2, [r2, #0]
 800643e:	4313      	orrs	r3, r2
 8006440:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	441a      	add	r2, r3
 800644e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800645a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800645e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006462:	b29b      	uxth	r3, r3
 8006464:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	7b1b      	ldrb	r3, [r3, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f040 8178 	bne.w	8006760 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8084 	beq.w	8006582 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006484:	b29b      	uxth	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	4413      	add	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	011a      	lsls	r2, r3, #4
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	88db      	ldrh	r3, [r3, #6]
 80064a2:	085b      	lsrs	r3, r3, #1
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	827b      	strh	r3, [r7, #18]
 80064bc:	8a7b      	ldrh	r3, [r7, #18]
 80064be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d01b      	beq.n	80064fe <USB_ActivateEndpoint+0x17a>
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064dc:	823b      	strh	r3, [r7, #16]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	441a      	add	r2, r3
 80064e8:	8a3b      	ldrh	r3, [r7, #16]
 80064ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	78db      	ldrb	r3, [r3, #3]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d020      	beq.n	8006548 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800651c:	81bb      	strh	r3, [r7, #12]
 800651e:	89bb      	ldrh	r3, [r7, #12]
 8006520:	f083 0320 	eor.w	r3, r3, #32
 8006524:	81bb      	strh	r3, [r7, #12]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	441a      	add	r2, r3
 8006530:	89bb      	ldrh	r3, [r7, #12]
 8006532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800653a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800653e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006542:	b29b      	uxth	r3, r3
 8006544:	8013      	strh	r3, [r2, #0]
 8006546:	e2d5      	b.n	8006af4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800655a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800655e:	81fb      	strh	r3, [r7, #14]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	89fb      	ldrh	r3, [r7, #14]
 800656c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006570:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657c:	b29b      	uxth	r3, r3
 800657e:	8013      	strh	r3, [r2, #0]
 8006580:	e2b8      	b.n	8006af4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	633b      	str	r3, [r7, #48]	@ 0x30
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800658c:	b29b      	uxth	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	4413      	add	r3, r2
 8006594:	633b      	str	r3, [r7, #48]	@ 0x30
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	011a      	lsls	r2, r3, #4
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80065a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	88db      	ldrh	r3, [r3, #6]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	4413      	add	r3, r2
 80065c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	011a      	lsls	r2, r3, #4
 80065d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d2:	4413      	add	r3, r2
 80065d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80065f0:	d91d      	bls.n	800662e <USB_ActivateEndpoint+0x2aa>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <USB_ActivateEndpoint+0x288>
 8006606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006608:	3b01      	subs	r3, #1
 800660a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29a      	uxth	r2, r3
 8006612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006614:	b29b      	uxth	r3, r3
 8006616:	029b      	lsls	r3, r3, #10
 8006618:	b29b      	uxth	r3, r3
 800661a:	4313      	orrs	r3, r2
 800661c:	b29b      	uxth	r3, r3
 800661e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006626:	b29a      	uxth	r2, r3
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e026      	b.n	800667c <USB_ActivateEndpoint+0x2f8>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <USB_ActivateEndpoint+0x2c8>
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006644:	b29a      	uxth	r2, r3
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	e017      	b.n	800667c <USB_ActivateEndpoint+0x2f8>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <USB_ActivateEndpoint+0x2e2>
 8006660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006662:	3301      	adds	r3, #1
 8006664:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29a      	uxth	r2, r3
 800666c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800666e:	b29b      	uxth	r3, r3
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	b29b      	uxth	r3, r3
 8006674:	4313      	orrs	r3, r2
 8006676:	b29a      	uxth	r2, r3
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	847b      	strh	r3, [r7, #34]	@ 0x22
 800668a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800668c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01b      	beq.n	80066cc <USB_ActivateEndpoint+0x348>
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066aa:	843b      	strh	r3, [r7, #32]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	8c3b      	ldrh	r3, [r7, #32]
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d124      	bne.n	800671e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ea:	83bb      	strh	r3, [r7, #28]
 80066ec:	8bbb      	ldrh	r3, [r7, #28]
 80066ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066f2:	83bb      	strh	r3, [r7, #28]
 80066f4:	8bbb      	ldrh	r3, [r7, #28]
 80066f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066fa:	83bb      	strh	r3, [r7, #28]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	8bbb      	ldrh	r3, [r7, #28]
 8006708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006718:	b29b      	uxth	r3, r3
 800671a:	8013      	strh	r3, [r2, #0]
 800671c:	e1ea      	b.n	8006af4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006734:	83fb      	strh	r3, [r7, #30]
 8006736:	8bfb      	ldrh	r3, [r7, #30]
 8006738:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800673c:	83fb      	strh	r3, [r7, #30]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	8bfb      	ldrh	r3, [r7, #30]
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]
 800675e:	e1c9      	b.n	8006af4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	78db      	ldrb	r3, [r3, #3]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d11e      	bne.n	80067a6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800677a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	441a      	add	r2, r3
 800678c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006798:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800679c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]
 80067a4:	e01d      	b.n	80067e2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80067b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067bc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	441a      	add	r2, r3
 80067ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80067ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067f2:	4413      	add	r3, r2
 80067f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	011a      	lsls	r2, r3, #4
 80067fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006804:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	891b      	ldrh	r3, [r3, #8]
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	b29b      	uxth	r3, r3
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	657b      	str	r3, [r7, #84]	@ 0x54
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006826:	4413      	add	r3, r2
 8006828:	657b      	str	r3, [r7, #84]	@ 0x54
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	011a      	lsls	r2, r3, #4
 8006830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006832:	4413      	add	r3, r2
 8006834:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006838:	653b      	str	r3, [r7, #80]	@ 0x50
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	895b      	ldrh	r3, [r3, #10]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	b29b      	uxth	r3, r3
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006848:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f040 8093 	bne.w	800697a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006864:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d01b      	beq.n	80068a8 <USB_ActivateEndpoint+0x524>
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006886:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	441a      	add	r2, r3
 8006892:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800689c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80068b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80068b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01b      	beq.n	80068f8 <USB_ActivateEndpoint+0x574>
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	441a      	add	r2, r3
 80068e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80068e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800690a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006910:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006912:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006916:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006918:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800691a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800691e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	441a      	add	r2, r3
 800692a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800692c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693c:	b29b      	uxth	r3, r3
 800693e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006956:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]
 8006978:	e0bc      	b.n	8006af4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800698a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800698e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01d      	beq.n	80069d2 <USB_ActivateEndpoint+0x64e>
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ac:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	441a      	add	r2, r3
 80069ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80069e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80069e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d01d      	beq.n	8006a2a <USB_ActivateEndpoint+0x6a6>
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a04:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	441a      	add	r2, r3
 8006a12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006a16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	78db      	ldrb	r3, [r3, #3]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d024      	beq.n	8006a7c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006a4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006a50:	f083 0320 	eor.w	r3, r3, #32
 8006a54:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
 8006a7a:	e01d      	b.n	8006ab8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	441a      	add	r2, r3
 8006aa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ace:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006ae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006af4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3774      	adds	r7, #116	@ 0x74
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop

08006b04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b08d      	sub	sp, #52	@ 0x34
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	7b1b      	ldrb	r3, [r3, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f040 808e 	bne.w	8006c34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d044      	beq.n	8006baa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	81bb      	strh	r3, [r7, #12]
 8006b2e:	89bb      	ldrh	r3, [r7, #12]
 8006b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01b      	beq.n	8006b70 <USB_DeactivateEndpoint+0x6c>
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4e:	817b      	strh	r3, [r7, #10]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	441a      	add	r2, r3
 8006b5a:	897b      	ldrh	r3, [r7, #10]
 8006b5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b86:	813b      	strh	r3, [r7, #8]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	441a      	add	r2, r3
 8006b92:	893b      	ldrh	r3, [r7, #8]
 8006b94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	8013      	strh	r3, [r2, #0]
 8006ba8:	e192      	b.n	8006ed0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	827b      	strh	r3, [r7, #18]
 8006bb8:	8a7b      	ldrh	r3, [r7, #18]
 8006bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01b      	beq.n	8006bfa <USB_DeactivateEndpoint+0xf6>
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd8:	823b      	strh	r3, [r7, #16]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	441a      	add	r2, r3
 8006be4:	8a3b      	ldrh	r3, [r7, #16]
 8006be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c10:	81fb      	strh	r3, [r7, #14]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8013      	strh	r3, [r2, #0]
 8006c32:	e14d      	b.n	8006ed0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f040 80a5 	bne.w	8006d88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	843b      	strh	r3, [r7, #32]
 8006c4c:	8c3b      	ldrh	r3, [r7, #32]
 8006c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01b      	beq.n	8006c8e <USB_DeactivateEndpoint+0x18a>
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c6c:	83fb      	strh	r3, [r7, #30]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	441a      	add	r2, r3
 8006c78:	8bfb      	ldrh	r3, [r7, #30]
 8006c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	83bb      	strh	r3, [r7, #28]
 8006c9c:	8bbb      	ldrh	r3, [r7, #28]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01b      	beq.n	8006cde <USB_DeactivateEndpoint+0x1da>
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cbc:	837b      	strh	r3, [r7, #26]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	441a      	add	r2, r3
 8006cc8:	8b7b      	ldrh	r3, [r7, #26]
 8006cca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf4:	833b      	strh	r3, [r7, #24]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	441a      	add	r2, r3
 8006d00:	8b3b      	ldrh	r3, [r7, #24]
 8006d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2c:	82fb      	strh	r3, [r7, #22]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	8afb      	ldrh	r3, [r7, #22]
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d64:	82bb      	strh	r3, [r7, #20]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	441a      	add	r2, r3
 8006d70:	8abb      	ldrh	r3, [r7, #20]
 8006d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	8013      	strh	r3, [r2, #0]
 8006d86:	e0a3      	b.n	8006ed0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006d96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01b      	beq.n	8006dd8 <USB_DeactivateEndpoint+0x2d4>
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	441a      	add	r2, r3
 8006dc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006de6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01b      	beq.n	8006e28 <USB_DeactivateEndpoint+0x324>
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	441a      	add	r2, r3
 8006e12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	441a      	add	r2, r3
 8006e4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	441a      	add	r2, r3
 8006e82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	441a      	add	r2, r3
 8006eba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3734      	adds	r7, #52	@ 0x34
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr

08006edc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b0c2      	sub	sp, #264	@ 0x108
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eea:	6018      	str	r0, [r3, #0]
 8006eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	f040 86b7 	bne.w	8007c76 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699a      	ldr	r2, [r3, #24]
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d908      	bls.n	8006f36 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006f34:	e007      	b.n	8006f46 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	7b1b      	ldrb	r3, [r3, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d13a      	bne.n	8006fcc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6959      	ldr	r1, [r3, #20]
 8006f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	88da      	ldrh	r2, [r3, #6]
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f78:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f7c:	6800      	ldr	r0, [r0, #0]
 8006f7e:	f001 fc9c 	bl	80088ba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	011a      	lsls	r2, r3, #4
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	f000 be1f 	b.w	8007c0a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	78db      	ldrb	r3, [r3, #3]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	f040 8462 	bne.w	80078a2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6a1a      	ldr	r2, [r3, #32]
 8006fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	f240 83df 	bls.w	80077ba <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800701e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007022:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	441a      	add	r2, r3
 8007040:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800704c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007054:	b29b      	uxth	r3, r3
 8007056:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6a1a      	ldr	r2, [r3, #32]
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007068:	1ad2      	subs	r2, r2, r3
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 81c7 	beq.w	800742c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80070aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d177      	bne.n	80071aa <USB_EPStartXfer+0x2ce>
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070da:	4413      	add	r3, r2
 80070dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	011a      	lsls	r2, r3, #4
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	4413      	add	r3, r2
 80070f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007100:	b29a      	uxth	r2, r3
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710a:	2b3e      	cmp	r3, #62	@ 0x3e
 800710c:	d921      	bls.n	8007152 <USB_EPStartXfer+0x276>
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711c:	f003 031f 	and.w	r3, r3, #31
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <USB_EPStartXfer+0x252>
 8007124:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007128:	3b01      	subs	r3, #1
 800712a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29a      	uxth	r2, r3
 8007134:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007138:	b29b      	uxth	r3, r3
 800713a:	029b      	lsls	r3, r3, #10
 800713c:	b29b      	uxth	r3, r3
 800713e:	4313      	orrs	r3, r2
 8007140:	b29b      	uxth	r3, r3
 8007142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714a:	b29a      	uxth	r2, r3
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	801a      	strh	r2, [r3, #0]
 8007150:	e050      	b.n	80071f4 <USB_EPStartXfer+0x318>
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <USB_EPStartXfer+0x294>
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007168:	b29a      	uxth	r2, r3
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	801a      	strh	r2, [r3, #0]
 800716e:	e041      	b.n	80071f4 <USB_EPStartXfer+0x318>
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800717a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <USB_EPStartXfer+0x2b4>
 8007186:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800718a:	3301      	adds	r3, #1
 800718c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29a      	uxth	r2, r3
 8007196:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800719a:	b29b      	uxth	r3, r3
 800719c:	029b      	lsls	r3, r3, #10
 800719e:	b29b      	uxth	r3, r3
 80071a0:	4313      	orrs	r3, r2
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	e024      	b.n	80071f4 <USB_EPStartXfer+0x318>
 80071aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d11c      	bne.n	80071f4 <USB_EPStartXfer+0x318>
 80071ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	4413      	add	r3, r2
 80071d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80071d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	011a      	lsls	r2, r3, #4
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	4413      	add	r3, r2
 80071e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	895b      	ldrh	r3, [r3, #10]
 8007200:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6959      	ldr	r1, [r3, #20]
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007214:	b29b      	uxth	r3, r3
 8007216:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800721a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800721e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007222:	6800      	ldr	r0, [r0, #0]
 8007224:	f001 fb49 	bl	80088ba <USB_WritePMA>
            ep->xfer_buff += len;
 8007228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695a      	ldr	r2, [r3, #20]
 8007234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007238:	441a      	add	r2, r3
 800723a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6a1a      	ldr	r2, [r3, #32]
 8007252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	429a      	cmp	r2, r3
 8007260:	d90f      	bls.n	8007282 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6a1a      	ldr	r2, [r3, #32]
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007272:	1ad2      	subs	r2, r2, r3
 8007274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	621a      	str	r2, [r3, #32]
 8007280:	e00e      	b.n	80072a0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2200      	movs	r2, #0
 800729e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d177      	bne.n	80073a0 <USB_EPStartXfer+0x4c4>
 80072b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	4413      	add	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
 80072d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	011a      	lsls	r2, r3, #4
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	4413      	add	r3, r2
 80072e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007300:	2b3e      	cmp	r3, #62	@ 0x3e
 8007302:	d921      	bls.n	8007348 <USB_EPStartXfer+0x46c>
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800730e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007312:	f003 031f 	and.w	r3, r3, #31
 8007316:	2b00      	cmp	r3, #0
 8007318:	d104      	bne.n	8007324 <USB_EPStartXfer+0x448>
 800731a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800731e:	3b01      	subs	r3, #1
 8007320:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29a      	uxth	r2, r3
 800732a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800732e:	b29b      	uxth	r3, r3
 8007330:	029b      	lsls	r3, r3, #10
 8007332:	b29b      	uxth	r3, r3
 8007334:	4313      	orrs	r3, r2
 8007336:	b29b      	uxth	r3, r3
 8007338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007340:	b29a      	uxth	r2, r3
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e056      	b.n	80073f6 <USB_EPStartXfer+0x51a>
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <USB_EPStartXfer+0x48a>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800735a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735e:	b29a      	uxth	r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	801a      	strh	r2, [r3, #0]
 8007364:	e047      	b.n	80073f6 <USB_EPStartXfer+0x51a>
 8007366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736a:	085b      	lsrs	r3, r3, #1
 800736c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <USB_EPStartXfer+0x4aa>
 800737c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007380:	3301      	adds	r3, #1
 8007382:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29a      	uxth	r2, r3
 800738c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007390:	b29b      	uxth	r3, r3
 8007392:	029b      	lsls	r3, r3, #10
 8007394:	b29b      	uxth	r3, r3
 8007396:	4313      	orrs	r3, r2
 8007398:	b29a      	uxth	r2, r3
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	801a      	strh	r2, [r3, #0]
 800739e:	e02a      	b.n	80073f6 <USB_EPStartXfer+0x51a>
 80073a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d122      	bne.n	80073f6 <USB_EPStartXfer+0x51a>
 80073b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	623b      	str	r3, [r7, #32]
 80073bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	4413      	add	r3, r2
 80073d2:	623b      	str	r3, [r7, #32]
 80073d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	011a      	lsls	r2, r3, #4
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	4413      	add	r3, r2
 80073e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	891b      	ldrh	r3, [r3, #8]
 8007402:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6959      	ldr	r1, [r3, #20]
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007416:	b29b      	uxth	r3, r3
 8007418:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800741c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007420:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007424:	6800      	ldr	r0, [r0, #0]
 8007426:	f001 fa48 	bl	80088ba <USB_WritePMA>
 800742a:	e3ee      	b.n	8007c0a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800742c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d177      	bne.n	800752c <USB_EPStartXfer+0x650>
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800745c:	4413      	add	r3, r2
 800745e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	011a      	lsls	r2, r3, #4
 800746e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007470:	4413      	add	r3, r2
 8007472:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007476:	647b      	str	r3, [r7, #68]	@ 0x44
 8007478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007482:	b29a      	uxth	r2, r3
 8007484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007486:	801a      	strh	r2, [r3, #0]
 8007488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748c:	2b3e      	cmp	r3, #62	@ 0x3e
 800748e:	d921      	bls.n	80074d4 <USB_EPStartXfer+0x5f8>
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007494:	095b      	lsrs	r3, r3, #5
 8007496:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749e:	f003 031f 	and.w	r3, r3, #31
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <USB_EPStartXfer+0x5d4>
 80074a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074aa:	3b01      	subs	r3, #1
 80074ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	029b      	lsls	r3, r3, #10
 80074be:	b29b      	uxth	r3, r3
 80074c0:	4313      	orrs	r3, r2
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	e056      	b.n	8007582 <USB_EPStartXfer+0x6a6>
 80074d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <USB_EPStartXfer+0x616>
 80074dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074ee:	801a      	strh	r2, [r3, #0]
 80074f0:	e047      	b.n	8007582 <USB_EPStartXfer+0x6a6>
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d004      	beq.n	8007512 <USB_EPStartXfer+0x636>
 8007508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800750c:	3301      	adds	r3, #1
 800750e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	b29a      	uxth	r2, r3
 8007518:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800751c:	b29b      	uxth	r3, r3
 800751e:	029b      	lsls	r3, r3, #10
 8007520:	b29b      	uxth	r3, r3
 8007522:	4313      	orrs	r3, r2
 8007524:	b29a      	uxth	r2, r3
 8007526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	e02a      	b.n	8007582 <USB_EPStartXfer+0x6a6>
 800752c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d122      	bne.n	8007582 <USB_EPStartXfer+0x6a6>
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	653b      	str	r3, [r7, #80]	@ 0x50
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007556:	b29b      	uxth	r3, r3
 8007558:	461a      	mov	r2, r3
 800755a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800755c:	4413      	add	r3, r2
 800755e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	011a      	lsls	r2, r3, #4
 800756e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007570:	4413      	add	r3, r2
 8007572:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757c:	b29a      	uxth	r2, r3
 800757e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007580:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	891b      	ldrh	r3, [r3, #8]
 800758e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6959      	ldr	r1, [r3, #20]
 800759e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075b0:	6800      	ldr	r0, [r0, #0]
 80075b2:	f001 f982 	bl	80088ba <USB_WritePMA>
            ep->xfer_buff += len;
 80075b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695a      	ldr	r2, [r3, #20]
 80075c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c6:	441a      	add	r2, r3
 80075c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6a1a      	ldr	r2, [r3, #32]
 80075e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d90f      	bls.n	8007610 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80075f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6a1a      	ldr	r2, [r3, #32]
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	1ad2      	subs	r2, r2, r3
 8007602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	621a      	str	r2, [r3, #32]
 800760e:	e00e      	b.n	800762e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800762e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	643b      	str	r3, [r7, #64]	@ 0x40
 800763a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	785b      	ldrb	r3, [r3, #1]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d177      	bne.n	800773a <USB_EPStartXfer+0x85e>
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007664:	b29b      	uxth	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766a:	4413      	add	r3, r2
 800766c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800766e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	011a      	lsls	r2, r3, #4
 800767c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767e:	4413      	add	r3, r2
 8007680:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
 8007686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007690:	b29a      	uxth	r2, r3
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007694:	801a      	strh	r2, [r3, #0]
 8007696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769a:	2b3e      	cmp	r3, #62	@ 0x3e
 800769c:	d921      	bls.n	80076e2 <USB_EPStartXfer+0x806>
 800769e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <USB_EPStartXfer+0x7e2>
 80076b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b8:	3b01      	subs	r3, #1
 80076ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80076be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	029b      	lsls	r3, r3, #10
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4313      	orrs	r3, r2
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076da:	b29a      	uxth	r2, r3
 80076dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e050      	b.n	8007784 <USB_EPStartXfer+0x8a8>
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <USB_EPStartXfer+0x824>
 80076ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fc:	801a      	strh	r2, [r3, #0]
 80076fe:	e041      	b.n	8007784 <USB_EPStartXfer+0x8a8>
 8007700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007704:	085b      	lsrs	r3, r3, #1
 8007706:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <USB_EPStartXfer+0x844>
 8007716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771a:	3301      	adds	r3, #1
 800771c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29a      	uxth	r2, r3
 8007726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772a:	b29b      	uxth	r3, r3
 800772c:	029b      	lsls	r3, r3, #10
 800772e:	b29b      	uxth	r3, r3
 8007730:	4313      	orrs	r3, r2
 8007732:	b29a      	uxth	r2, r3
 8007734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007736:	801a      	strh	r2, [r3, #0]
 8007738:	e024      	b.n	8007784 <USB_EPStartXfer+0x8a8>
 800773a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d11c      	bne.n	8007784 <USB_EPStartXfer+0x8a8>
 800774a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007758:	b29b      	uxth	r3, r3
 800775a:	461a      	mov	r2, r3
 800775c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800775e:	4413      	add	r3, r2
 8007760:	643b      	str	r3, [r7, #64]	@ 0x40
 8007762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	011a      	lsls	r2, r3, #4
 8007770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007772:	4413      	add	r3, r2
 8007774:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777e:	b29a      	uxth	r2, r3
 8007780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007782:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	895b      	ldrh	r3, [r3, #10]
 8007790:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6959      	ldr	r1, [r3, #20]
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80077ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077b2:	6800      	ldr	r0, [r0, #0]
 80077b4:	f001 f881 	bl	80088ba <USB_WritePMA>
 80077b8:	e227      	b.n	8007c0a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80077ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80077ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80077f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	441a      	add	r2, r3
 800780e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800781a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800781e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007822:	b29b      	uxth	r3, r3
 8007824:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007840:	b29b      	uxth	r3, r3
 8007842:	461a      	mov	r2, r3
 8007844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007846:	4413      	add	r3, r2
 8007848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800784a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	011a      	lsls	r2, r3, #4
 8007858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800785a:	4413      	add	r3, r2
 800785c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007860:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007866:	b29a      	uxth	r2, r3
 8007868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800786a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800786c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	891b      	ldrh	r3, [r3, #8]
 8007878:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800787c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6959      	ldr	r1, [r3, #20]
 8007888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788c:	b29b      	uxth	r3, r3
 800788e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007892:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007896:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800789a:	6800      	ldr	r0, [r0, #0]
 800789c:	f001 f80d 	bl	80088ba <USB_WritePMA>
 80078a0:	e1b3      	b.n	8007c0a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80078a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6a1a      	ldr	r2, [r3, #32]
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80c6 	beq.w	8007a74 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80078f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d177      	bne.n	80079f4 <USB_EPStartXfer+0xb18>
 8007904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007924:	4413      	add	r3, r2
 8007926:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	011a      	lsls	r2, r3, #4
 8007936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007938:	4413      	add	r3, r2
 800793a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800793e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29b      	uxth	r3, r3
 8007946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800794a:	b29a      	uxth	r2, r3
 800794c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007954:	2b3e      	cmp	r3, #62	@ 0x3e
 8007956:	d921      	bls.n	800799c <USB_EPStartXfer+0xac0>
 8007958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007966:	f003 031f 	and.w	r3, r3, #31
 800796a:	2b00      	cmp	r3, #0
 800796c:	d104      	bne.n	8007978 <USB_EPStartXfer+0xa9c>
 800796e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007972:	3b01      	subs	r3, #1
 8007974:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29a      	uxth	r2, r3
 800797e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007982:	b29b      	uxth	r3, r3
 8007984:	029b      	lsls	r3, r3, #10
 8007986:	b29b      	uxth	r3, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	b29b      	uxth	r3, r3
 800798c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007994:	b29a      	uxth	r2, r3
 8007996:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007998:	801a      	strh	r2, [r3, #0]
 800799a:	e050      	b.n	8007a3e <USB_EPStartXfer+0xb62>
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <USB_EPStartXfer+0xade>
 80079a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	e041      	b.n	8007a3e <USB_EPStartXfer+0xb62>
 80079ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079be:	085b      	lsrs	r3, r3, #1
 80079c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <USB_EPStartXfer+0xafe>
 80079d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80079d4:	3301      	adds	r3, #1
 80079d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80079da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	b29a      	uxth	r2, r3
 80079e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	029b      	lsls	r3, r3, #10
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	4313      	orrs	r3, r2
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	e024      	b.n	8007a3e <USB_EPStartXfer+0xb62>
 80079f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d11c      	bne.n	8007a3e <USB_EPStartXfer+0xb62>
 8007a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a18:	4413      	add	r3, r2
 8007a1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	011a      	lsls	r2, r3, #4
 8007a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	895b      	ldrh	r3, [r3, #10]
 8007a4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6959      	ldr	r1, [r3, #20]
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a68:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a6c:	6800      	ldr	r0, [r0, #0]
 8007a6e:	f000 ff24 	bl	80088ba <USB_WritePMA>
 8007a72:	e0ca      	b.n	8007c0a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d177      	bne.n	8007b74 <USB_EPStartXfer+0xc98>
 8007a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aa4:	4413      	add	r3, r2
 8007aa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	011a      	lsls	r2, r3, #4
 8007ab6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ab8:	4413      	add	r3, r2
 8007aba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007abe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ad6:	d921      	bls.n	8007b1c <USB_EPStartXfer+0xc40>
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae6:	f003 031f 	and.w	r3, r3, #31
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <USB_EPStartXfer+0xc1c>
 8007aee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007af2:	3b01      	subs	r3, #1
 8007af4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	029b      	lsls	r3, r3, #10
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b18:	801a      	strh	r2, [r3, #0]
 8007b1a:	e05c      	b.n	8007bd6 <USB_EPStartXfer+0xcfa>
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <USB_EPStartXfer+0xc5e>
 8007b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b36:	801a      	strh	r2, [r3, #0]
 8007b38:	e04d      	b.n	8007bd6 <USB_EPStartXfer+0xcfa>
 8007b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <USB_EPStartXfer+0xc7e>
 8007b50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007b54:	3301      	adds	r3, #1
 8007b56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	029b      	lsls	r3, r3, #10
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	e030      	b.n	8007bd6 <USB_EPStartXfer+0xcfa>
 8007b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d128      	bne.n	8007bd6 <USB_EPStartXfer+0xcfa>
 8007b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ba8:	4413      	add	r3, r2
 8007baa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	011a      	lsls	r2, r3, #4
 8007bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007bd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	891b      	ldrh	r3, [r3, #8]
 8007be2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6959      	ldr	r1, [r3, #20]
 8007bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bfc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c04:	6800      	ldr	r0, [r0, #0]
 8007c06:	f000 fe58 	bl	80088ba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	881b      	ldrh	r3, [r3, #0]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c30:	817b      	strh	r3, [r7, #10]
 8007c32:	897b      	ldrh	r3, [r7, #10]
 8007c34:	f083 0310 	eor.w	r3, r3, #16
 8007c38:	817b      	strh	r3, [r7, #10]
 8007c3a:	897b      	ldrh	r3, [r7, #10]
 8007c3c:	f083 0320 	eor.w	r3, r3, #32
 8007c40:	817b      	strh	r3, [r7, #10]
 8007c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	441a      	add	r2, r3
 8007c5c:	897b      	ldrh	r3, [r7, #10]
 8007c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8013      	strh	r3, [r2, #0]
 8007c72:	f000 bcde 	b.w	8008632 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	7b1b      	ldrb	r3, [r3, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f040 80bb 	bne.w	8007dfe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d917      	bls.n	8007cd4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	699a      	ldr	r2, [r3, #24]
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc4:	1ad2      	subs	r2, r2, r3
 8007cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	619a      	str	r2, [r3, #24]
 8007cd2:	e00e      	b.n	8007cf2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d16:	4413      	add	r3, r2
 8007d18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	011a      	lsls	r2, r3, #4
 8007d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d2e:	4413      	add	r3, r2
 8007d30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d50:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d52:	d924      	bls.n	8007d9e <USB_EPStartXfer+0xec2>
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <USB_EPStartXfer+0xe98>
 8007d6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	029b      	lsls	r3, r3, #10
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	4313      	orrs	r3, r2
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d98:	801a      	strh	r2, [r3, #0]
 8007d9a:	f000 bc10 	b.w	80085be <USB_EPStartXfer+0x16e2>
 8007d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10c      	bne.n	8007dc0 <USB_EPStartXfer+0xee4>
 8007da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	e3fe      	b.n	80085be <USB_EPStartXfer+0x16e2>
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc4:	085b      	lsrs	r3, r3, #1
 8007dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d004      	beq.n	8007de0 <USB_EPStartXfer+0xf04>
 8007dd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007dda:	3301      	adds	r3, #1
 8007ddc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	029b      	lsls	r3, r3, #10
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4313      	orrs	r3, r2
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007dfa:	801a      	strh	r2, [r3, #0]
 8007dfc:	e3df      	b.n	80085be <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	78db      	ldrb	r3, [r3, #3]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	f040 8218 	bne.w	8008240 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 809d 	bne.w	8007f5c <USB_EPStartXfer+0x1080>
 8007e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e46:	4413      	add	r3, r2
 8007e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	011a      	lsls	r2, r3, #4
 8007e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e5e:	4413      	add	r3, r2
 8007e60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e7a:	801a      	strh	r2, [r3, #0]
 8007e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e8a:	d92b      	bls.n	8007ee4 <USB_EPStartXfer+0x1008>
 8007e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	095b      	lsrs	r3, r3, #5
 8007e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d104      	bne.n	8007ebc <USB_EPStartXfer+0xfe0>
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	029b      	lsls	r3, r3, #10
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ee0:	801a      	strh	r2, [r3, #0]
 8007ee2:	e070      	b.n	8007fc6 <USB_EPStartXfer+0x10ea>
 8007ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10c      	bne.n	8007f0e <USB_EPStartXfer+0x1032>
 8007ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	e05b      	b.n	8007fc6 <USB_EPStartXfer+0x10ea>
 8007f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <USB_EPStartXfer+0x1062>
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	029b      	lsls	r3, r3, #10
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	e034      	b.n	8007fc6 <USB_EPStartXfer+0x10ea>
 8007f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d12c      	bne.n	8007fc6 <USB_EPStartXfer+0x10ea>
 8007f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f90:	4413      	add	r3, r2
 8007f92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	011a      	lsls	r2, r3, #4
 8007fa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007fa8:	4413      	add	r3, r2
 8007faa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f040 809d 	bne.w	8008120 <USB_EPStartXfer+0x1244>
 8007fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008002:	b29b      	uxth	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800800a:	4413      	add	r3, r2
 800800c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	011a      	lsls	r2, r3, #4
 800801e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008022:	4413      	add	r3, r2
 8008024:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800802c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008038:	b29a      	uxth	r2, r3
 800803a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	2b3e      	cmp	r3, #62	@ 0x3e
 800804e:	d92b      	bls.n	80080a8 <USB_EPStartXfer+0x11cc>
 8008050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 031f 	and.w	r3, r3, #31
 8008072:	2b00      	cmp	r3, #0
 8008074:	d104      	bne.n	8008080 <USB_EPStartXfer+0x11a4>
 8008076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800807a:	3b01      	subs	r3, #1
 800807c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008080:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29a      	uxth	r2, r3
 8008088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800808c:	b29b      	uxth	r3, r3
 800808e:	029b      	lsls	r3, r3, #10
 8008090:	b29b      	uxth	r3, r3
 8008092:	4313      	orrs	r3, r2
 8008094:	b29b      	uxth	r3, r3
 8008096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800809a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800809e:	b29a      	uxth	r2, r3
 80080a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	e069      	b.n	800817c <USB_EPStartXfer+0x12a0>
 80080a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10c      	bne.n	80080d2 <USB_EPStartXfer+0x11f6>
 80080b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080ce:	801a      	strh	r2, [r3, #0]
 80080d0:	e054      	b.n	800817c <USB_EPStartXfer+0x12a0>
 80080d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80080e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <USB_EPStartXfer+0x1226>
 80080f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080fc:	3301      	adds	r3, #1
 80080fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008102:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29a      	uxth	r2, r3
 800810a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800810e:	b29b      	uxth	r3, r3
 8008110:	029b      	lsls	r3, r3, #10
 8008112:	b29b      	uxth	r3, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	e02d      	b.n	800817c <USB_EPStartXfer+0x12a0>
 8008120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	785b      	ldrb	r3, [r3, #1]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d125      	bne.n	800817c <USB_EPStartXfer+0x12a0>
 8008130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800813e:	b29b      	uxth	r3, r3
 8008140:	461a      	mov	r2, r3
 8008142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008146:	4413      	add	r3, r2
 8008148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800814c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	011a      	lsls	r2, r3, #4
 800815a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800815e:	4413      	add	r3, r2
 8008160:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008164:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	b29a      	uxth	r2, r3
 8008176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800817a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800817c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8218 	beq.w	80085be <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800818e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80081b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <USB_EPStartXfer+0x12ea>
 80081ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80081be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10d      	bne.n	80081e2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80081c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80081ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f040 81f5 	bne.w	80085be <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80081d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80081d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f040 81ee 	bne.w	80085be <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80081e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008208:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800820c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	441a      	add	r2, r3
 8008226:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800822a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800822e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008236:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800823a:	b29b      	uxth	r3, r3
 800823c:	8013      	strh	r3, [r2, #0]
 800823e:	e1be      	b.n	80085be <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	78db      	ldrb	r3, [r3, #3]
 800824c:	2b01      	cmp	r3, #1
 800824e:	f040 81b4 	bne.w	80085ba <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	429a      	cmp	r2, r3
 800826c:	d917      	bls.n	800829e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800826e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800827e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699a      	ldr	r2, [r3, #24]
 800828a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800828e:	1ad2      	subs	r2, r2, r3
 8008290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	619a      	str	r2, [r3, #24]
 800829c:	e00e      	b.n	80082bc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800829e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80082ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2200      	movs	r2, #0
 80082ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80082bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f040 8085 	bne.w	80083d8 <USB_EPStartXfer+0x14fc>
 80082ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082f2:	4413      	add	r3, r2
 80082f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	011a      	lsls	r2, r3, #4
 8008306:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800830a:	4413      	add	r3, r2
 800830c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008310:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008314:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008320:	b29a      	uxth	r2, r3
 8008322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008326:	801a      	strh	r2, [r3, #0]
 8008328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832c:	2b3e      	cmp	r3, #62	@ 0x3e
 800832e:	d923      	bls.n	8008378 <USB_EPStartXfer+0x149c>
 8008330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800833a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833e:	f003 031f 	and.w	r3, r3, #31
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <USB_EPStartXfer+0x1474>
 8008346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800834a:	3b01      	subs	r3, #1
 800834c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29a      	uxth	r2, r3
 8008358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800835c:	b29b      	uxth	r3, r3
 800835e:	029b      	lsls	r3, r3, #10
 8008360:	b29b      	uxth	r3, r3
 8008362:	4313      	orrs	r3, r2
 8008364:	b29b      	uxth	r3, r3
 8008366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836e:	b29a      	uxth	r2, r3
 8008370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008374:	801a      	strh	r2, [r3, #0]
 8008376:	e060      	b.n	800843a <USB_EPStartXfer+0x155e>
 8008378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10c      	bne.n	800839a <USB_EPStartXfer+0x14be>
 8008380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b29b      	uxth	r3, r3
 8008388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800838c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008390:	b29a      	uxth	r2, r3
 8008392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008396:	801a      	strh	r2, [r3, #0]
 8008398:	e04f      	b.n	800843a <USB_EPStartXfer+0x155e>
 800839a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80083a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <USB_EPStartXfer+0x14de>
 80083b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083b4:	3301      	adds	r3, #1
 80083b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80083ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	029b      	lsls	r3, r3, #10
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	4313      	orrs	r3, r2
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083d4:	801a      	strh	r2, [r3, #0]
 80083d6:	e030      	b.n	800843a <USB_EPStartXfer+0x155e>
 80083d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d128      	bne.n	800843a <USB_EPStartXfer+0x155e>
 80083e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80083f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008404:	b29b      	uxth	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800840c:	4413      	add	r3, r2
 800840e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	011a      	lsls	r2, r3, #4
 8008420:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008424:	4413      	add	r3, r2
 8008426:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800842a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800842e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008432:	b29a      	uxth	r2, r3
 8008434:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	785b      	ldrb	r3, [r3, #1]
 8008454:	2b00      	cmp	r3, #0
 8008456:	f040 8085 	bne.w	8008564 <USB_EPStartXfer+0x1688>
 800845a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008476:	b29b      	uxth	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800847e:	4413      	add	r3, r2
 8008480:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	011a      	lsls	r2, r3, #4
 8008492:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008496:	4413      	add	r3, r2
 8008498:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800849c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084b2:	801a      	strh	r2, [r3, #0]
 80084b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80084ba:	d923      	bls.n	8008504 <USB_EPStartXfer+0x1628>
 80084bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ca:	f003 031f 	and.w	r3, r3, #31
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d104      	bne.n	80084dc <USB_EPStartXfer+0x1600>
 80084d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084d6:	3b01      	subs	r3, #1
 80084d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	029b      	lsls	r3, r3, #10
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4313      	orrs	r3, r2
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008500:	801a      	strh	r2, [r3, #0]
 8008502:	e05c      	b.n	80085be <USB_EPStartXfer+0x16e2>
 8008504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10c      	bne.n	8008526 <USB_EPStartXfer+0x164a>
 800850c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851c:	b29a      	uxth	r2, r3
 800851e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e04b      	b.n	80085be <USB_EPStartXfer+0x16e2>
 8008526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852a:	085b      	lsrs	r3, r3, #1
 800852c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	d004      	beq.n	8008546 <USB_EPStartXfer+0x166a>
 800853c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008540:	3301      	adds	r3, #1
 8008542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29a      	uxth	r2, r3
 800854e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008552:	b29b      	uxth	r3, r3
 8008554:	029b      	lsls	r3, r3, #10
 8008556:	b29b      	uxth	r3, r3
 8008558:	4313      	orrs	r3, r2
 800855a:	b29a      	uxth	r2, r3
 800855c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	e02c      	b.n	80085be <USB_EPStartXfer+0x16e2>
 8008564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	785b      	ldrb	r3, [r3, #1]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d124      	bne.n	80085be <USB_EPStartXfer+0x16e2>
 8008574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800858a:	4413      	add	r3, r2
 800858c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	011a      	lsls	r2, r3, #4
 800859e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80085a2:	4413      	add	r3, r2
 80085a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80085a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	e001      	b.n	80085be <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e03a      	b.n	8008634 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80085e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80085ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80085f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80085f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80085f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80085fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	441a      	add	r2, r3
 800861a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800861e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800862a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800862e:	b29b      	uxth	r3, r3
 8008630:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d020      	beq.n	8008692 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008666:	81bb      	strh	r3, [r7, #12]
 8008668:	89bb      	ldrh	r3, [r7, #12]
 800866a:	f083 0310 	eor.w	r3, r3, #16
 800866e:	81bb      	strh	r3, [r7, #12]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	441a      	add	r2, r3
 800867a:	89bb      	ldrh	r3, [r7, #12]
 800867c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800868c:	b29b      	uxth	r3, r3
 800868e:	8013      	strh	r3, [r2, #0]
 8008690:	e01f      	b.n	80086d2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a8:	81fb      	strh	r3, [r7, #14]
 80086aa:	89fb      	ldrh	r3, [r7, #14]
 80086ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80086b0:	81fb      	strh	r3, [r7, #14]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	441a      	add	r2, r3
 80086bc:	89fb      	ldrh	r3, [r7, #14]
 80086be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr

080086de <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086de:	b480      	push	{r7}
 80086e0:	b087      	sub	sp, #28
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	7b1b      	ldrb	r3, [r3, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f040 809d 	bne.w	800882c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	785b      	ldrb	r3, [r3, #1]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d04c      	beq.n	8008794 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	823b      	strh	r3, [r7, #16]
 8008708:	8a3b      	ldrh	r3, [r7, #16]
 800870a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d01b      	beq.n	800874a <USB_EPClearStall+0x6c>
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008728:	81fb      	strh	r3, [r7, #14]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	441a      	add	r2, r3
 8008734:	89fb      	ldrh	r3, [r7, #14]
 8008736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800873a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800873e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008742:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008746:	b29b      	uxth	r3, r3
 8008748:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	78db      	ldrb	r3, [r3, #3]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d06c      	beq.n	800882c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008768:	81bb      	strh	r3, [r7, #12]
 800876a:	89bb      	ldrh	r3, [r7, #12]
 800876c:	f083 0320 	eor.w	r3, r3, #32
 8008770:	81bb      	strh	r3, [r7, #12]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	441a      	add	r2, r3
 800877c:	89bb      	ldrh	r3, [r7, #12]
 800877e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800878a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800878e:	b29b      	uxth	r3, r3
 8008790:	8013      	strh	r3, [r2, #0]
 8008792:	e04b      	b.n	800882c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	82fb      	strh	r3, [r7, #22]
 80087a2:	8afb      	ldrh	r3, [r7, #22]
 80087a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d01b      	beq.n	80087e4 <USB_EPClearStall+0x106>
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c2:	82bb      	strh	r3, [r7, #20]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	441a      	add	r2, r3
 80087ce:	8abb      	ldrh	r3, [r7, #20]
 80087d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087fa:	827b      	strh	r3, [r7, #18]
 80087fc:	8a7b      	ldrh	r3, [r7, #18]
 80087fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008802:	827b      	strh	r3, [r7, #18]
 8008804:	8a7b      	ldrh	r3, [r7, #18]
 8008806:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800880a:	827b      	strh	r3, [r7, #18]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	441a      	add	r2, r3
 8008816:	8a7b      	ldrh	r3, [r7, #18]
 8008818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800881c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008828:	b29b      	uxth	r3, r3
 800882a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	371c      	adds	r7, #28
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d103      	bne.n	8008852 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2280      	movs	r2, #128	@ 0x80
 800884e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr

0800885e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr

08008872 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	bc80      	pop	{r7}
 8008884:	4770      	bx	lr

08008886 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008886:	b480      	push	{r7}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008894:	b29b      	uxth	r3, r3
 8008896:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008898:	68fb      	ldr	r3, [r7, #12]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bc80      	pop	{r7}
 80088b8:	4770      	bx	lr

080088ba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b08b      	sub	sp, #44	@ 0x2c
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	4611      	mov	r1, r2
 80088c6:	461a      	mov	r2, r3
 80088c8:	460b      	mov	r3, r1
 80088ca:	80fb      	strh	r3, [r7, #6]
 80088cc:	4613      	mov	r3, r2
 80088ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80088d0:	88bb      	ldrh	r3, [r7, #4]
 80088d2:	3301      	adds	r3, #1
 80088d4:	085b      	lsrs	r3, r3, #1
 80088d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	005a      	lsls	r2, r3, #1
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80088f2:	e01e      	b.n	8008932 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	3301      	adds	r3, #1
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	021b      	lsls	r3, r3, #8
 8008902:	b21a      	sxth	r2, r3
 8008904:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008908:	4313      	orrs	r3, r2
 800890a:	b21b      	sxth	r3, r3
 800890c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	8a7a      	ldrh	r2, [r7, #18]
 8008912:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	3302      	adds	r3, #2
 8008918:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	3302      	adds	r3, #2
 800891e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	3301      	adds	r3, #1
 8008924:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	3301      	adds	r3, #1
 800892a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800892c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892e:	3b01      	subs	r3, #1
 8008930:	627b      	str	r3, [r7, #36]	@ 0x24
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1dd      	bne.n	80088f4 <USB_WritePMA+0x3a>
  }
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	372c      	adds	r7, #44	@ 0x2c
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008944:	b480      	push	{r7}
 8008946:	b08b      	sub	sp, #44	@ 0x2c
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4611      	mov	r1, r2
 8008950:	461a      	mov	r2, r3
 8008952:	460b      	mov	r3, r1
 8008954:	80fb      	strh	r3, [r7, #6]
 8008956:	4613      	mov	r3, r2
 8008958:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800895a:	88bb      	ldrh	r3, [r7, #4]
 800895c:	085b      	lsrs	r3, r3, #1
 800895e:	b29b      	uxth	r3, r3
 8008960:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800896a:	88fb      	ldrh	r3, [r7, #6]
 800896c:	005a      	lsls	r2, r3, #1
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008976:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	627b      	str	r3, [r7, #36]	@ 0x24
 800897c:	e01b      	b.n	80089b6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	3302      	adds	r3, #2
 800898a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	b2da      	uxtb	r2, r3
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	3301      	adds	r3, #1
 8008998:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	0a1b      	lsrs	r3, r3, #8
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	3301      	adds	r3, #1
 80089a8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	3302      	adds	r3, #2
 80089ae:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	3b01      	subs	r3, #1
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e0      	bne.n	800897e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80089bc:	88bb      	ldrh	r3, [r7, #4]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d007      	beq.n	80089d8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	701a      	strb	r2, [r3, #0]
  }
}
 80089d8:	bf00      	nop
 80089da:	372c      	adds	r7, #44	@ 0x2c
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr

080089e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	460b      	mov	r3, r1
 80089ec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	7c1b      	ldrb	r3, [r3, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d115      	bne.n	8008a26 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089fe:	2202      	movs	r2, #2
 8008a00:	2181      	movs	r1, #129	@ 0x81
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 fe81 	bl	800a70a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a12:	2202      	movs	r2, #2
 8008a14:	2101      	movs	r1, #1
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 fe77 	bl	800a70a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008a24:	e012      	b.n	8008a4c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a26:	2340      	movs	r3, #64	@ 0x40
 8008a28:	2202      	movs	r2, #2
 8008a2a:	2181      	movs	r1, #129	@ 0x81
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fe6c 	bl	800a70a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a38:	2340      	movs	r3, #64	@ 0x40
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 fe63 	bl	800a70a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	2203      	movs	r2, #3
 8008a50:	2182      	movs	r1, #130	@ 0x82
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f001 fe59 	bl	800a70a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a5e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008a62:	f001 ff79 	bl	800a958 <USBD_static_malloc>
 8008a66:	4602      	mov	r2, r0
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
 8008a7c:	e026      	b.n	8008acc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a84:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7c1b      	ldrb	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008aae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 ff18 	bl	800a8ea <USBD_LL_PrepareReceive>
 8008aba:	e007      	b.n	8008acc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ac2:	2340      	movs	r3, #64	@ 0x40
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 ff0f 	bl	800a8ea <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ae6:	2181      	movs	r1, #129	@ 0x81
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 fe34 	bl	800a756 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008af4:	2101      	movs	r1, #1
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 fe2d 	bl	800a756 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b04:	2182      	movs	r1, #130	@ 0x82
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 fe25 	bl	800a756 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00e      	beq.n	8008b3a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 ff1f 	bl	800a970 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b54:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d039      	beq.n	8008be2 <USBD_CDC_Setup+0x9e>
 8008b6e:	2b20      	cmp	r3, #32
 8008b70:	d17f      	bne.n	8008c72 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	88db      	ldrh	r3, [r3, #6]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d029      	beq.n	8008bce <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b25b      	sxtb	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	da11      	bge.n	8008ba8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008b90:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	88d2      	ldrh	r2, [r2, #6]
 8008b96:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b98:	6939      	ldr	r1, [r7, #16]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	88db      	ldrh	r3, [r3, #6]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fa05 	bl	8009fb0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008ba6:	e06b      	b.n	8008c80 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	785a      	ldrb	r2, [r3, #1]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	88db      	ldrh	r3, [r3, #6]
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008bbe:	6939      	ldr	r1, [r7, #16]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	88db      	ldrh	r3, [r3, #6]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 fa20 	bl	800a00c <USBD_CtlPrepareRx>
      break;
 8008bcc:	e058      	b.n	8008c80 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	7850      	ldrb	r0, [r2, #1]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	4798      	blx	r3
      break;
 8008be0:	e04e      	b.n	8008c80 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b0b      	cmp	r3, #11
 8008be8:	d02e      	beq.n	8008c48 <USBD_CDC_Setup+0x104>
 8008bea:	2b0b      	cmp	r3, #11
 8008bec:	dc38      	bgt.n	8008c60 <USBD_CDC_Setup+0x11c>
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <USBD_CDC_Setup+0xb4>
 8008bf2:	2b0a      	cmp	r3, #10
 8008bf4:	d014      	beq.n	8008c20 <USBD_CDC_Setup+0xdc>
 8008bf6:	e033      	b.n	8008c60 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d107      	bne.n	8008c12 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c02:	f107 030c 	add.w	r3, r7, #12
 8008c06:	2202      	movs	r2, #2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 f9d0 	bl	8009fb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c10:	e02e      	b.n	8008c70 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 f961 	bl	8009edc <USBD_CtlError>
            ret = USBD_FAIL;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c1e:	e027      	b.n	8008c70 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d107      	bne.n	8008c3a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c2a:	f107 030f 	add.w	r3, r7, #15
 8008c2e:	2201      	movs	r2, #1
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 f9bc 	bl	8009fb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c38:	e01a      	b.n	8008c70 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 f94d 	bl	8009edc <USBD_CtlError>
            ret = USBD_FAIL;
 8008c42:	2302      	movs	r3, #2
 8008c44:	75fb      	strb	r3, [r7, #23]
          break;
 8008c46:	e013      	b.n	8008c70 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d00d      	beq.n	8008c6e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 f941 	bl	8009edc <USBD_CtlError>
            ret = USBD_FAIL;
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c5e:	e006      	b.n	8008c6e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 f93a 	bl	8009edc <USBD_CtlError>
          ret = USBD_FAIL;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	75fb      	strb	r3, [r7, #23]
          break;
 8008c6c:	e000      	b.n	8008c70 <USBD_CDC_Setup+0x12c>
          break;
 8008c6e:	bf00      	nop
      }
      break;
 8008c70:	e006      	b.n	8008c80 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f931 	bl	8009edc <USBD_CtlError>
      ret = USBD_FAIL;
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c7e:	bf00      	nop
  }

  return ret;
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c9c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ca4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d03a      	beq.n	8008d26 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	331c      	adds	r3, #28
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d029      	beq.n	8008d1a <USBD_CDC_DataIn+0x90>
 8008cc6:	78fa      	ldrb	r2, [r7, #3]
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	440b      	add	r3, r1
 8008cd4:	331c      	adds	r3, #28
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	78f9      	ldrb	r1, [r7, #3]
 8008cda:	68b8      	ldr	r0, [r7, #8]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	4403      	add	r3, r0
 8008ce6:	3320      	adds	r3, #32
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cee:	fb01 f303 	mul.w	r3, r1, r3
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d110      	bne.n	8008d1a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008cf8:	78fa      	ldrb	r2, [r7, #3]
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	331c      	adds	r3, #28
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d0c:	78f9      	ldrb	r1, [r7, #3]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2200      	movs	r2, #0
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 fdc6 	bl	800a8a4 <USBD_LL_Transmit>
 8008d18:	e003      	b.n	8008d22 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	e000      	b.n	8008d28 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008d26:	2302      	movs	r3, #2
  }
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 fdf1 	bl	800a930 <USBD_LL_GetRxDataSize>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00d      	beq.n	8008d7c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008d74:	4611      	mov	r1, r2
 8008d76:	4798      	blx	r3

    return USBD_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e000      	b.n	8008d7e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d7c:	2302      	movs	r3, #2
  }
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d94:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d014      	beq.n	8008dca <USBD_CDC_EP0_RxReady+0x44>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008da6:	2bff      	cmp	r3, #255	@ 0xff
 8008da8:	d00f      	beq.n	8008dca <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008db8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008dc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	22ff      	movs	r2, #255	@ 0xff
 8008dc6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2243      	movs	r2, #67	@ 0x43
 8008de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008de2:	4b03      	ldr	r3, [pc, #12]	@ (8008df0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	2000012c 	.word	0x2000012c

08008df4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2243      	movs	r2, #67	@ 0x43
 8008e00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008e02:	4b03      	ldr	r3, [pc, #12]	@ (8008e10 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	200000e8 	.word	0x200000e8

08008e14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2243      	movs	r2, #67	@ 0x43
 8008e20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008e22:	4b03      	ldr	r3, [pc, #12]	@ (8008e30 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bc80      	pop	{r7}
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	20000170 	.word	0x20000170

08008e34 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	220a      	movs	r2, #10
 8008e40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008e42:	4b03      	ldr	r3, [pc, #12]	@ (8008e50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bc80      	pop	{r7}
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	200000a4 	.word	0x200000a4

08008e54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr

08008e80 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e94:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e9e:	88fa      	ldrh	r2, [r7, #6]
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr

08008eb2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ec2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr

08008ed8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d01c      	beq.n	8008f2c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d115      	bne.n	8008f28 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2181      	movs	r1, #129	@ 0x81
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 fcc0 	bl	800a8a4 <USBD_LL_Transmit>

      return USBD_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e002      	b.n	8008f2e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008f2c:	2302      	movs	r3, #2
  }
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d017      	beq.n	8008f80 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	7c1b      	ldrb	r3, [r3, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d109      	bne.n	8008f6c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f62:	2101      	movs	r1, #1
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 fcc0 	bl	800a8ea <USBD_LL_PrepareReceive>
 8008f6a:	e007      	b.n	8008f7c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f72:	2340      	movs	r3, #64	@ 0x40
 8008f74:	2101      	movs	r1, #1
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f001 fcb7 	bl	800a8ea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e000      	b.n	8008f82 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008f80:	2302      	movs	r3, #2
  }
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	4613      	mov	r3, r2
 8008f96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	e01a      	b.n	8008fd8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	79fa      	ldrb	r2, [r7, #7]
 8008fce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f001 fb25 	bl	800a620 <USBD_LL_Init>

  return USBD_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d006      	beq.n	8009002 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
 8009000:	e001      	b.n	8009006 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009002:	2302      	movs	r3, #2
 8009004:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr

08009012 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 fb5a 	bl	800a6d4 <USBD_LL_Start>

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	bc80      	pop	{r7}
 800903c:	4770      	bx	lr

0800903e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	460b      	mov	r3, r1
 8009048:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800904a:	2302      	movs	r3, #2
 800904c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00c      	beq.n	8009072 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	78fa      	ldrb	r2, [r7, #3]
 8009062:	4611      	mov	r1, r2
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	4798      	blx	r3
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	78fa      	ldrb	r2, [r7, #3]
 8009092:	4611      	mov	r1, r2
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	4798      	blx	r3

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 fed8 	bl	8009e6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80090c8:	461a      	mov	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80090d6:	f003 031f 	and.w	r3, r3, #31
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d016      	beq.n	800910c <USBD_LL_SetupStage+0x6a>
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d81c      	bhi.n	800911c <USBD_LL_SetupStage+0x7a>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <USBD_LL_SetupStage+0x4a>
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d008      	beq.n	80090fc <USBD_LL_SetupStage+0x5a>
 80090ea:	e017      	b.n	800911c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f9cb 	bl	8009490 <USBD_StdDevReq>
      break;
 80090fa:	e01a      	b.n	8009132 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fa2d 	bl	8009564 <USBD_StdItfReq>
      break;
 800910a:	e012      	b.n	8009132 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fa6d 	bl	80095f4 <USBD_StdEPReq>
      break;
 800911a:	e00a      	b.n	8009132 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009122:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009126:	b2db      	uxtb	r3, r3
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f001 fb32 	bl	800a794 <USBD_LL_StallEP>
      break;
 8009130:	bf00      	nop
  }

  return USBD_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	460b      	mov	r3, r1
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d14b      	bne.n	80091e8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009156:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800915e:	2b03      	cmp	r3, #3
 8009160:	d134      	bne.n	80091cc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	429a      	cmp	r2, r3
 800916c:	d919      	bls.n	80091a2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	68da      	ldr	r2, [r3, #12]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	1ad2      	subs	r2, r2, r3
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	68da      	ldr	r2, [r3, #12]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009184:	429a      	cmp	r2, r3
 8009186:	d203      	bcs.n	8009190 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800918c:	b29b      	uxth	r3, r3
 800918e:	e002      	b.n	8009196 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009194:	b29b      	uxth	r3, r3
 8009196:	461a      	mov	r2, r3
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 ff54 	bl	800a048 <USBD_CtlContinueRx>
 80091a0:	e038      	b.n	8009214 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d105      	bne.n	80091c4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 ff51 	bl	800a06c <USBD_CtlSendStatus>
 80091ca:	e023      	b.n	8009214 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091d2:	2b05      	cmp	r3, #5
 80091d4:	d11e      	bne.n	8009214 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80091de:	2100      	movs	r1, #0
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f001 fad7 	bl	800a794 <USBD_LL_StallEP>
 80091e6:	e015      	b.n	8009214 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00d      	beq.n	8009210 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d108      	bne.n	8009210 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	7afa      	ldrb	r2, [r7, #11]
 8009208:	4611      	mov	r1, r2
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	4798      	blx	r3
 800920e:	e001      	b.n	8009214 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009210:	2302      	movs	r3, #2
 8009212:	e000      	b.n	8009216 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b086      	sub	sp, #24
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	460b      	mov	r3, r1
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d17f      	bne.n	8009332 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3314      	adds	r3, #20
 8009236:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800923e:	2b02      	cmp	r3, #2
 8009240:	d15c      	bne.n	80092fc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	429a      	cmp	r2, r3
 800924c:	d915      	bls.n	800927a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	1ad2      	subs	r2, r2, r3
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	b29b      	uxth	r3, r3
 8009262:	461a      	mov	r2, r3
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 febe 	bl	8009fe8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800926c:	2300      	movs	r3, #0
 800926e:	2200      	movs	r2, #0
 8009270:	2100      	movs	r1, #0
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f001 fb39 	bl	800a8ea <USBD_LL_PrepareReceive>
 8009278:	e04e      	b.n	8009318 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	6912      	ldr	r2, [r2, #16]
 8009282:	fbb3 f1f2 	udiv	r1, r3, r2
 8009286:	fb01 f202 	mul.w	r2, r1, r2
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d11c      	bne.n	80092ca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009298:	429a      	cmp	r2, r3
 800929a:	d316      	bcc.n	80092ca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d20f      	bcs.n	80092ca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092aa:	2200      	movs	r2, #0
 80092ac:	2100      	movs	r1, #0
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fe9a 	bl	8009fe8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092bc:	2300      	movs	r3, #0
 80092be:	2200      	movs	r2, #0
 80092c0:	2100      	movs	r1, #0
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f001 fb11 	bl	800a8ea <USBD_LL_PrepareReceive>
 80092c8:	e026      	b.n	8009318 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00a      	beq.n	80092ec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d105      	bne.n	80092ec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80092ec:	2180      	movs	r1, #128	@ 0x80
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f001 fa50 	bl	800a794 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fecc 	bl	800a092 <USBD_CtlReceiveStatus>
 80092fa:	e00d      	b.n	8009318 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009302:	2b04      	cmp	r3, #4
 8009304:	d004      	beq.n	8009310 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800930c:	2b00      	cmp	r3, #0
 800930e:	d103      	bne.n	8009318 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009310:	2180      	movs	r1, #128	@ 0x80
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f001 fa3e 	bl	800a794 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800931e:	2b01      	cmp	r3, #1
 8009320:	d11d      	bne.n	800935e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f7ff fe81 	bl	800902a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009330:	e015      	b.n	800935e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00d      	beq.n	800935a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009344:	2b03      	cmp	r3, #3
 8009346:	d108      	bne.n	800935a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	7afa      	ldrb	r2, [r7, #11]
 8009352:	4611      	mov	r1, r2
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	4798      	blx	r3
 8009358:	e001      	b.n	800935e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800935a:	2302      	movs	r3, #2
 800935c:	e000      	b.n	8009360 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009370:	2340      	movs	r3, #64	@ 0x40
 8009372:	2200      	movs	r2, #0
 8009374:	2100      	movs	r1, #0
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 f9c7 	bl	800a70a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2240      	movs	r2, #64	@ 0x40
 8009388:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800938c:	2340      	movs	r3, #64	@ 0x40
 800938e:	2200      	movs	r2, #0
 8009390:	2180      	movs	r1, #128	@ 0x80
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 f9b9 	bl	800a70a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2240      	movs	r2, #64	@ 0x40
 80093a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d009      	beq.n	80093e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6852      	ldr	r2, [r2, #4]
 80093d8:	b2d2      	uxtb	r2, r2
 80093da:	4611      	mov	r1, r2
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	4798      	blx	r3
  }

  return USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	bc80      	pop	{r7}
 8009406:	4770      	bx	lr

08009408 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2204      	movs	r2, #4
 8009420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	bc80      	pop	{r7}
 800942e:	4770      	bx	lr

08009430 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800943e:	2b04      	cmp	r3, #4
 8009440:	d105      	bne.n	800944e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	bc80      	pop	{r7}
 8009458:	4770      	bx	lr

0800945a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009468:	2b03      	cmp	r3, #3
 800946a:	d10b      	bne.n	8009484 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094a6:	2b40      	cmp	r3, #64	@ 0x40
 80094a8:	d005      	beq.n	80094b6 <USBD_StdDevReq+0x26>
 80094aa:	2b40      	cmp	r3, #64	@ 0x40
 80094ac:	d84f      	bhi.n	800954e <USBD_StdDevReq+0xbe>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <USBD_StdDevReq+0x36>
 80094b2:	2b20      	cmp	r3, #32
 80094b4:	d14b      	bne.n	800954e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	4798      	blx	r3
      break;
 80094c4:	e048      	b.n	8009558 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	785b      	ldrb	r3, [r3, #1]
 80094ca:	2b09      	cmp	r3, #9
 80094cc:	d839      	bhi.n	8009542 <USBD_StdDevReq+0xb2>
 80094ce:	a201      	add	r2, pc, #4	@ (adr r2, 80094d4 <USBD_StdDevReq+0x44>)
 80094d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d4:	08009525 	.word	0x08009525
 80094d8:	08009539 	.word	0x08009539
 80094dc:	08009543 	.word	0x08009543
 80094e0:	0800952f 	.word	0x0800952f
 80094e4:	08009543 	.word	0x08009543
 80094e8:	08009507 	.word	0x08009507
 80094ec:	080094fd 	.word	0x080094fd
 80094f0:	08009543 	.word	0x08009543
 80094f4:	0800951b 	.word	0x0800951b
 80094f8:	08009511 	.word	0x08009511
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f9dc 	bl	80098bc <USBD_GetDescriptor>
          break;
 8009504:	e022      	b.n	800954c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fb3f 	bl	8009b8c <USBD_SetAddress>
          break;
 800950e:	e01d      	b.n	800954c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fb7e 	bl	8009c14 <USBD_SetConfig>
          break;
 8009518:	e018      	b.n	800954c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fc07 	bl	8009d30 <USBD_GetConfig>
          break;
 8009522:	e013      	b.n	800954c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fc37 	bl	8009d9a <USBD_GetStatus>
          break;
 800952c:	e00e      	b.n	800954c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fc65 	bl	8009e00 <USBD_SetFeature>
          break;
 8009536:	e009      	b.n	800954c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fc74 	bl	8009e28 <USBD_ClrFeature>
          break;
 8009540:	e004      	b.n	800954c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fcc9 	bl	8009edc <USBD_CtlError>
          break;
 800954a:	bf00      	nop
      }
      break;
 800954c:	e004      	b.n	8009558 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fcc3 	bl	8009edc <USBD_CtlError>
      break;
 8009556:	bf00      	nop
  }

  return ret;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop

08009564 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800957a:	2b40      	cmp	r3, #64	@ 0x40
 800957c:	d005      	beq.n	800958a <USBD_StdItfReq+0x26>
 800957e:	2b40      	cmp	r3, #64	@ 0x40
 8009580:	d82e      	bhi.n	80095e0 <USBD_StdItfReq+0x7c>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <USBD_StdItfReq+0x26>
 8009586:	2b20      	cmp	r3, #32
 8009588:	d12a      	bne.n	80095e0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009590:	3b01      	subs	r3, #1
 8009592:	2b02      	cmp	r3, #2
 8009594:	d81d      	bhi.n	80095d2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	889b      	ldrh	r3, [r3, #4]
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b01      	cmp	r3, #1
 800959e:	d813      	bhi.n	80095c8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
 80095ae:	4603      	mov	r3, r0
 80095b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	88db      	ldrh	r3, [r3, #6]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d110      	bne.n	80095dc <USBD_StdItfReq+0x78>
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10d      	bne.n	80095dc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fd53 	bl	800a06c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095c6:	e009      	b.n	80095dc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fc86 	bl	8009edc <USBD_CtlError>
          break;
 80095d0:	e004      	b.n	80095dc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fc81 	bl	8009edc <USBD_CtlError>
          break;
 80095da:	e000      	b.n	80095de <USBD_StdItfReq+0x7a>
          break;
 80095dc:	bf00      	nop
      }
      break;
 80095de:	e004      	b.n	80095ea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fc7a 	bl	8009edc <USBD_CtlError>
      break;
 80095e8:	bf00      	nop
  }

  return USBD_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	889b      	ldrh	r3, [r3, #4]
 8009606:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009610:	2b40      	cmp	r3, #64	@ 0x40
 8009612:	d007      	beq.n	8009624 <USBD_StdEPReq+0x30>
 8009614:	2b40      	cmp	r3, #64	@ 0x40
 8009616:	f200 8146 	bhi.w	80098a6 <USBD_StdEPReq+0x2b2>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <USBD_StdEPReq+0x40>
 800961e:	2b20      	cmp	r3, #32
 8009620:	f040 8141 	bne.w	80098a6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	4798      	blx	r3
      break;
 8009632:	e13d      	b.n	80098b0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800963c:	2b20      	cmp	r3, #32
 800963e:	d10a      	bne.n	8009656 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	4798      	blx	r3
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	e12d      	b.n	80098b2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	785b      	ldrb	r3, [r3, #1]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d007      	beq.n	800966e <USBD_StdEPReq+0x7a>
 800965e:	2b03      	cmp	r3, #3
 8009660:	f300 811b 	bgt.w	800989a <USBD_StdEPReq+0x2a6>
 8009664:	2b00      	cmp	r3, #0
 8009666:	d072      	beq.n	800974e <USBD_StdEPReq+0x15a>
 8009668:	2b01      	cmp	r3, #1
 800966a:	d03a      	beq.n	80096e2 <USBD_StdEPReq+0xee>
 800966c:	e115      	b.n	800989a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009674:	2b02      	cmp	r3, #2
 8009676:	d002      	beq.n	800967e <USBD_StdEPReq+0x8a>
 8009678:	2b03      	cmp	r3, #3
 800967a:	d015      	beq.n	80096a8 <USBD_StdEPReq+0xb4>
 800967c:	e02b      	b.n	80096d6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00c      	beq.n	800969e <USBD_StdEPReq+0xaa>
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	2b80      	cmp	r3, #128	@ 0x80
 8009688:	d009      	beq.n	800969e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 f880 	bl	800a794 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009694:	2180      	movs	r1, #128	@ 0x80
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 f87c 	bl	800a794 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800969c:	e020      	b.n	80096e0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fc1b 	bl	8009edc <USBD_CtlError>
              break;
 80096a6:	e01b      	b.n	80096e0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	885b      	ldrh	r3, [r3, #2]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10e      	bne.n	80096ce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00b      	beq.n	80096ce <USBD_StdEPReq+0xda>
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	2b80      	cmp	r3, #128	@ 0x80
 80096ba:	d008      	beq.n	80096ce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	88db      	ldrh	r3, [r3, #6]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d104      	bne.n	80096ce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 f863 	bl	800a794 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fccc 	bl	800a06c <USBD_CtlSendStatus>

              break;
 80096d4:	e004      	b.n	80096e0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fbff 	bl	8009edc <USBD_CtlError>
              break;
 80096de:	bf00      	nop
          }
          break;
 80096e0:	e0e0      	b.n	80098a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d002      	beq.n	80096f2 <USBD_StdEPReq+0xfe>
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d015      	beq.n	800971c <USBD_StdEPReq+0x128>
 80096f0:	e026      	b.n	8009740 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00c      	beq.n	8009712 <USBD_StdEPReq+0x11e>
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	2b80      	cmp	r3, #128	@ 0x80
 80096fc:	d009      	beq.n	8009712 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f001 f846 	bl	800a794 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009708:	2180      	movs	r1, #128	@ 0x80
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 f842 	bl	800a794 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009710:	e01c      	b.n	800974c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fbe1 	bl	8009edc <USBD_CtlError>
              break;
 800971a:	e017      	b.n	800974c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	885b      	ldrh	r3, [r3, #2]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d112      	bne.n	800974a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800972a:	2b00      	cmp	r3, #0
 800972c:	d004      	beq.n	8009738 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 f84d 	bl	800a7d2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fc97 	bl	800a06c <USBD_CtlSendStatus>
              }
              break;
 800973e:	e004      	b.n	800974a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fbca 	bl	8009edc <USBD_CtlError>
              break;
 8009748:	e000      	b.n	800974c <USBD_StdEPReq+0x158>
              break;
 800974a:	bf00      	nop
          }
          break;
 800974c:	e0aa      	b.n	80098a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009754:	2b02      	cmp	r3, #2
 8009756:	d002      	beq.n	800975e <USBD_StdEPReq+0x16a>
 8009758:	2b03      	cmp	r3, #3
 800975a:	d032      	beq.n	80097c2 <USBD_StdEPReq+0x1ce>
 800975c:	e097      	b.n	800988e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d007      	beq.n	8009774 <USBD_StdEPReq+0x180>
 8009764:	7bbb      	ldrb	r3, [r7, #14]
 8009766:	2b80      	cmp	r3, #128	@ 0x80
 8009768:	d004      	beq.n	8009774 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fbb5 	bl	8009edc <USBD_CtlError>
                break;
 8009772:	e091      	b.n	8009898 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009778:	2b00      	cmp	r3, #0
 800977a:	da0b      	bge.n	8009794 <USBD_StdEPReq+0x1a0>
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009782:	4613      	mov	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	3310      	adds	r3, #16
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	4413      	add	r3, r2
 8009790:	3304      	adds	r3, #4
 8009792:	e00b      	b.n	80097ac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	4413      	add	r3, r2
 80097aa:	3304      	adds	r3, #4
 80097ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2202      	movs	r2, #2
 80097b8:	4619      	mov	r1, r3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fbf8 	bl	8009fb0 <USBD_CtlSendData>
              break;
 80097c0:	e06a      	b.n	8009898 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	da11      	bge.n	80097ee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
 80097cc:	f003 020f 	and.w	r2, r3, #15
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	440b      	add	r3, r1
 80097dc:	3318      	adds	r3, #24
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d117      	bne.n	8009814 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fb78 	bl	8009edc <USBD_CtlError>
                  break;
 80097ec:	e054      	b.n	8009898 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	f003 020f 	and.w	r2, r3, #15
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	440b      	add	r3, r1
 8009800:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d104      	bne.n	8009814 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fb65 	bl	8009edc <USBD_CtlError>
                  break;
 8009812:	e041      	b.n	8009898 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009818:	2b00      	cmp	r3, #0
 800981a:	da0b      	bge.n	8009834 <USBD_StdEPReq+0x240>
 800981c:	7bbb      	ldrb	r3, [r7, #14]
 800981e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	3310      	adds	r3, #16
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	4413      	add	r3, r2
 8009830:	3304      	adds	r3, #4
 8009832:	e00b      	b.n	800984c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	4413      	add	r3, r2
 800984a:	3304      	adds	r3, #4
 800984c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <USBD_StdEPReq+0x266>
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	2b80      	cmp	r3, #128	@ 0x80
 8009858:	d103      	bne.n	8009862 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	e00e      	b.n	8009880 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 ffd2 	bl	800a810 <USBD_LL_IsStallEP>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2201      	movs	r2, #1
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	e002      	b.n	8009880 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2202      	movs	r2, #2
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fb92 	bl	8009fb0 <USBD_CtlSendData>
              break;
 800988c:	e004      	b.n	8009898 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fb23 	bl	8009edc <USBD_CtlError>
              break;
 8009896:	bf00      	nop
          }
          break;
 8009898:	e004      	b.n	80098a4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fb1d 	bl	8009edc <USBD_CtlError>
          break;
 80098a2:	bf00      	nop
      }
      break;
 80098a4:	e004      	b.n	80098b0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fb17 	bl	8009edc <USBD_CtlError>
      break;
 80098ae:	bf00      	nop
  }

  return ret;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	885b      	ldrh	r3, [r3, #2]
 80098d6:	0a1b      	lsrs	r3, r3, #8
 80098d8:	b29b      	uxth	r3, r3
 80098da:	3b01      	subs	r3, #1
 80098dc:	2b06      	cmp	r3, #6
 80098de:	f200 8128 	bhi.w	8009b32 <USBD_GetDescriptor+0x276>
 80098e2:	a201      	add	r2, pc, #4	@ (adr r2, 80098e8 <USBD_GetDescriptor+0x2c>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	08009905 	.word	0x08009905
 80098ec:	0800991d 	.word	0x0800991d
 80098f0:	0800995d 	.word	0x0800995d
 80098f4:	08009b33 	.word	0x08009b33
 80098f8:	08009b33 	.word	0x08009b33
 80098fc:	08009ad3 	.word	0x08009ad3
 8009900:	08009aff 	.word	0x08009aff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	7c12      	ldrb	r2, [r2, #16]
 8009910:	f107 0108 	add.w	r1, r7, #8
 8009914:	4610      	mov	r0, r2
 8009916:	4798      	blx	r3
 8009918:	60f8      	str	r0, [r7, #12]
      break;
 800991a:	e112      	b.n	8009b42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	7c1b      	ldrb	r3, [r3, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10d      	bne.n	8009940 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800992a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992c:	f107 0208 	add.w	r2, r7, #8
 8009930:	4610      	mov	r0, r2
 8009932:	4798      	blx	r3
 8009934:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3301      	adds	r3, #1
 800993a:	2202      	movs	r2, #2
 800993c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800993e:	e100      	b.n	8009b42 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009948:	f107 0208 	add.w	r2, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	2202      	movs	r2, #2
 8009958:	701a      	strb	r2, [r3, #0]
      break;
 800995a:	e0f2      	b.n	8009b42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	885b      	ldrh	r3, [r3, #2]
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b05      	cmp	r3, #5
 8009964:	f200 80ac 	bhi.w	8009ac0 <USBD_GetDescriptor+0x204>
 8009968:	a201      	add	r2, pc, #4	@ (adr r2, 8009970 <USBD_GetDescriptor+0xb4>)
 800996a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996e:	bf00      	nop
 8009970:	08009989 	.word	0x08009989
 8009974:	080099bd 	.word	0x080099bd
 8009978:	080099f1 	.word	0x080099f1
 800997c:	08009a25 	.word	0x08009a25
 8009980:	08009a59 	.word	0x08009a59
 8009984:	08009a8d 	.word	0x08009a8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	7c12      	ldrb	r2, [r2, #16]
 80099a0:	f107 0108 	add.w	r1, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
 80099a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099aa:	e091      	b.n	8009ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa94 	bl	8009edc <USBD_CtlError>
            err++;
 80099b4:	7afb      	ldrb	r3, [r7, #11]
 80099b6:	3301      	adds	r3, #1
 80099b8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ba:	e089      	b.n	8009ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00b      	beq.n	80099e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	7c12      	ldrb	r2, [r2, #16]
 80099d4:	f107 0108 	add.w	r1, r7, #8
 80099d8:	4610      	mov	r0, r2
 80099da:	4798      	blx	r3
 80099dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099de:	e077      	b.n	8009ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa7a 	bl	8009edc <USBD_CtlError>
            err++;
 80099e8:	7afb      	ldrb	r3, [r7, #11]
 80099ea:	3301      	adds	r3, #1
 80099ec:	72fb      	strb	r3, [r7, #11]
          break;
 80099ee:	e06f      	b.n	8009ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	7c12      	ldrb	r2, [r2, #16]
 8009a08:	f107 0108 	add.w	r1, r7, #8
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4798      	blx	r3
 8009a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a12:	e05d      	b.n	8009ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa60 	bl	8009edc <USBD_CtlError>
            err++;
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	72fb      	strb	r3, [r7, #11]
          break;
 8009a22:	e055      	b.n	8009ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7c12      	ldrb	r2, [r2, #16]
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a46:	e043      	b.n	8009ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa46 	bl	8009edc <USBD_CtlError>
            err++;
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	3301      	adds	r3, #1
 8009a54:	72fb      	strb	r3, [r7, #11]
          break;
 8009a56:	e03b      	b.n	8009ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	7c12      	ldrb	r2, [r2, #16]
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a7a:	e029      	b.n	8009ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa2c 	bl	8009edc <USBD_CtlError>
            err++;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	3301      	adds	r3, #1
 8009a88:	72fb      	strb	r3, [r7, #11]
          break;
 8009a8a:	e021      	b.n	8009ad0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	7c12      	ldrb	r2, [r2, #16]
 8009aa4:	f107 0108 	add.w	r1, r7, #8
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4798      	blx	r3
 8009aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aae:	e00f      	b.n	8009ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa12 	bl	8009edc <USBD_CtlError>
            err++;
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	3301      	adds	r3, #1
 8009abc:	72fb      	strb	r3, [r7, #11]
          break;
 8009abe:	e007      	b.n	8009ad0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fa0a 	bl	8009edc <USBD_CtlError>
          err++;
 8009ac8:	7afb      	ldrb	r3, [r7, #11]
 8009aca:	3301      	adds	r3, #1
 8009acc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009ace:	e038      	b.n	8009b42 <USBD_GetDescriptor+0x286>
 8009ad0:	e037      	b.n	8009b42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	7c1b      	ldrb	r3, [r3, #16]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d109      	bne.n	8009aee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae2:	f107 0208 	add.w	r2, r7, #8
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4798      	blx	r3
 8009aea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009aec:	e029      	b.n	8009b42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f9f3 	bl	8009edc <USBD_CtlError>
        err++;
 8009af6:	7afb      	ldrb	r3, [r7, #11]
 8009af8:	3301      	adds	r3, #1
 8009afa:	72fb      	strb	r3, [r7, #11]
      break;
 8009afc:	e021      	b.n	8009b42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	7c1b      	ldrb	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10d      	bne.n	8009b22 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0e:	f107 0208 	add.w	r2, r7, #8
 8009b12:	4610      	mov	r0, r2
 8009b14:	4798      	blx	r3
 8009b16:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	2207      	movs	r2, #7
 8009b1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b20:	e00f      	b.n	8009b42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f9d9 	bl	8009edc <USBD_CtlError>
        err++;
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b30:	e007      	b.n	8009b42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f9d1 	bl	8009edc <USBD_CtlError>
      err++;
 8009b3a:	7afb      	ldrb	r3, [r7, #11]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b40:	bf00      	nop
  }

  if (err != 0U)
 8009b42:	7afb      	ldrb	r3, [r7, #11]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d11c      	bne.n	8009b82 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009b48:	893b      	ldrh	r3, [r7, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d011      	beq.n	8009b72 <USBD_GetDescriptor+0x2b6>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	88db      	ldrh	r3, [r3, #6]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00d      	beq.n	8009b72 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	88da      	ldrh	r2, [r3, #6]
 8009b5a:	893b      	ldrh	r3, [r7, #8]
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	bf28      	it	cs
 8009b60:	4613      	movcs	r3, r2
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b66:	893b      	ldrh	r3, [r7, #8]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fa1f 	bl	8009fb0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	88db      	ldrh	r3, [r3, #6]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d104      	bne.n	8009b84 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fa76 	bl	800a06c <USBD_CtlSendStatus>
 8009b80:	e000      	b.n	8009b84 <USBD_GetDescriptor+0x2c8>
    return;
 8009b82:	bf00      	nop
    }
  }
}
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop

08009b8c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	889b      	ldrh	r3, [r3, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d130      	bne.n	8009c00 <USBD_SetAddress+0x74>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	88db      	ldrh	r3, [r3, #6]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d12c      	bne.n	8009c00 <USBD_SetAddress+0x74>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bac:	d828      	bhi.n	8009c00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	885b      	ldrh	r3, [r3, #2]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d104      	bne.n	8009bce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f988 	bl	8009edc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bcc:	e01d      	b.n	8009c0a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	7bfa      	ldrb	r2, [r7, #15]
 8009bd2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fe43 	bl	800a866 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fa43 	bl	800a06c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d004      	beq.n	8009bf6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf4:	e009      	b.n	8009c0a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bfe:	e004      	b.n	8009c0a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f96a 	bl	8009edc <USBD_CtlError>
  }
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	885b      	ldrh	r3, [r3, #2]
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	4b41      	ldr	r3, [pc, #260]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009c26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c28:	4b40      	ldr	r3, [pc, #256]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d904      	bls.n	8009c3a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f952 	bl	8009edc <USBD_CtlError>
 8009c38:	e075      	b.n	8009d26 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d002      	beq.n	8009c4a <USBD_SetConfig+0x36>
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	d023      	beq.n	8009c90 <USBD_SetConfig+0x7c>
 8009c48:	e062      	b.n	8009d10 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009c4a:	4b38      	ldr	r3, [pc, #224]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d01a      	beq.n	8009c88 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009c52:	4b36      	ldr	r3, [pc, #216]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2203      	movs	r2, #3
 8009c60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c64:	4b31      	ldr	r3, [pc, #196]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff f9e7 	bl	800903e <USBD_SetClassConfig>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d104      	bne.n	8009c80 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f92f 	bl	8009edc <USBD_CtlError>
            return;
 8009c7e:	e052      	b.n	8009d26 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f9f3 	bl	800a06c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c86:	e04e      	b.n	8009d26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f9ef 	bl	800a06c <USBD_CtlSendStatus>
        break;
 8009c8e:	e04a      	b.n	8009d26 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009c90:	4b26      	ldr	r3, [pc, #152]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d112      	bne.n	8009cbe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009ca0:	4b22      	ldr	r3, [pc, #136]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009caa:	4b20      	ldr	r3, [pc, #128]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff f9e3 	bl	800907c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f9d8 	bl	800a06c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009cbc:	e033      	b.n	8009d26 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d01d      	beq.n	8009d08 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff f9d1 	bl	800907c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009cda:	4b14      	ldr	r3, [pc, #80]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ce4:	4b11      	ldr	r3, [pc, #68]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff f9a7 	bl	800903e <USBD_SetClassConfig>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d104      	bne.n	8009d00 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f8ef 	bl	8009edc <USBD_CtlError>
            return;
 8009cfe:	e012      	b.n	8009d26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f9b3 	bl	800a06c <USBD_CtlSendStatus>
        break;
 8009d06:	e00e      	b.n	8009d26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f9af 	bl	800a06c <USBD_CtlSendStatus>
        break;
 8009d0e:	e00a      	b.n	8009d26 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f8e2 	bl	8009edc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009d18:	4b04      	ldr	r3, [pc, #16]	@ (8009d2c <USBD_SetConfig+0x118>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff f9ac 	bl	800907c <USBD_ClrClassConfig>
        break;
 8009d24:	bf00      	nop
    }
  }
}
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	200003d0 	.word	0x200003d0

08009d30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	88db      	ldrh	r3, [r3, #6]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d004      	beq.n	8009d4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f8c9 	bl	8009edc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d4a:	e022      	b.n	8009d92 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	dc02      	bgt.n	8009d5c <USBD_GetConfig+0x2c>
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	dc03      	bgt.n	8009d62 <USBD_GetConfig+0x32>
 8009d5a:	e015      	b.n	8009d88 <USBD_GetConfig+0x58>
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d00b      	beq.n	8009d78 <USBD_GetConfig+0x48>
 8009d60:	e012      	b.n	8009d88 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3308      	adds	r3, #8
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f91d 	bl	8009fb0 <USBD_CtlSendData>
        break;
 8009d76:	e00c      	b.n	8009d92 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f915 	bl	8009fb0 <USBD_CtlSendData>
        break;
 8009d86:	e004      	b.n	8009d92 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f8a6 	bl	8009edc <USBD_CtlError>
        break;
 8009d90:	bf00      	nop
}
 8009d92:	bf00      	nop
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009daa:	3b01      	subs	r3, #1
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d81e      	bhi.n	8009dee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	88db      	ldrh	r3, [r3, #6]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d004      	beq.n	8009dc2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009db8:	6839      	ldr	r1, [r7, #0]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f88e 	bl	8009edc <USBD_CtlError>
        break;
 8009dc0:	e01a      	b.n	8009df8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f043 0202 	orr.w	r2, r3, #2
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	330c      	adds	r3, #12
 8009de2:	2202      	movs	r2, #2
 8009de4:	4619      	mov	r1, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f8e2 	bl	8009fb0 <USBD_CtlSendData>
      break;
 8009dec:	e004      	b.n	8009df8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f873 	bl	8009edc <USBD_CtlError>
      break;
 8009df6:	bf00      	nop
  }
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	885b      	ldrh	r3, [r3, #2]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d106      	bne.n	8009e20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f926 	bl	800a06c <USBD_CtlSendStatus>
  }
}
 8009e20:	bf00      	nop
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d80b      	bhi.n	8009e56 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	885b      	ldrh	r3, [r3, #2]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d10c      	bne.n	8009e60 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f90c 	bl	800a06c <USBD_CtlSendStatus>
      }
      break;
 8009e54:	e004      	b.n	8009e60 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f83f 	bl	8009edc <USBD_CtlError>
      break;
 8009e5e:	e000      	b.n	8009e62 <USBD_ClrFeature+0x3a>
      break;
 8009e60:	bf00      	nop
  }
}
 8009e62:	bf00      	nop
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781a      	ldrb	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	785a      	ldrb	r2, [r3, #1]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	3302      	adds	r3, #2
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	3303      	adds	r3, #3
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	021b      	lsls	r3, r3, #8
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	4413      	add	r3, r2
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	3305      	adds	r3, #5
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	4413      	add	r3, r2
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	3306      	adds	r3, #6
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	3307      	adds	r3, #7
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	021b      	lsls	r3, r3, #8
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	4413      	add	r3, r2
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	80da      	strh	r2, [r3, #6]

}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr

08009edc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009ee6:	2180      	movs	r1, #128	@ 0x80
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fc53 	bl	800a794 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009eee:	2100      	movs	r1, #0
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fc4f 	bl	800a794 <USBD_LL_StallEP>
}
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b086      	sub	sp, #24
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d032      	beq.n	8009f7a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 f834 	bl	8009f82 <USBD_GetLen>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	75fa      	strb	r2, [r7, #23]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4413      	add	r3, r2
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	7812      	ldrb	r2, [r2, #0]
 8009f38:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	75fa      	strb	r2, [r7, #23]
 8009f40:	461a      	mov	r2, r3
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	4413      	add	r3, r2
 8009f46:	2203      	movs	r2, #3
 8009f48:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009f4a:	e012      	b.n	8009f72 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	60fa      	str	r2, [r7, #12]
 8009f52:	7dfa      	ldrb	r2, [r7, #23]
 8009f54:	1c51      	adds	r1, r2, #1
 8009f56:	75f9      	strb	r1, [r7, #23]
 8009f58:	4611      	mov	r1, r2
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	440a      	add	r2, r1
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	75fa      	strb	r2, [r7, #23]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e8      	bne.n	8009f4c <USBD_GetString+0x4e>
    }
  }
}
 8009f7a:	bf00      	nop
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b085      	sub	sp, #20
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009f8e:	e005      	b.n	8009f9c <USBD_GetLen+0x1a>
  {
    len++;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
 8009f92:	3301      	adds	r3, #1
 8009f94:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f5      	bne.n	8009f90 <USBD_GetLen+0xe>
  }

  return len;
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bc80      	pop	{r7}
 8009fae:	4770      	bx	lr

08009fb0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009fc6:	88fa      	ldrh	r2, [r7, #6]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009fcc:	88fa      	ldrh	r2, [r7, #6]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fd2:	88fb      	ldrh	r3, [r7, #6]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fc63 	bl	800a8a4 <USBD_LL_Transmit>

  return USBD_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ff6:	88fb      	ldrh	r3, [r7, #6]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 fc51 	bl	800a8a4 <USBD_LL_Transmit>

  return USBD_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	4613      	mov	r3, r2
 800a018:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2203      	movs	r2, #3
 800a01e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a022:	88fa      	ldrh	r2, [r7, #6]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a02a:	88fa      	ldrh	r2, [r7, #6]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a032:	88fb      	ldrh	r3, [r7, #6]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	2100      	movs	r1, #0
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 fc56 	bl	800a8ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	4613      	mov	r3, r2
 800a054:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a056:	88fb      	ldrh	r3, [r7, #6]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	2100      	movs	r1, #0
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 fc44 	bl	800a8ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2204      	movs	r2, #4
 800a078:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a07c:	2300      	movs	r3, #0
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fc0e 	bl	800a8a4 <USBD_LL_Transmit>

  return USBD_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2205      	movs	r2, #5
 800a09e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fc1e 	bl	800a8ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4912      	ldr	r1, [pc, #72]	@ (800a108 <MX_USB_DEVICE_Init+0x50>)
 800a0c0:	4812      	ldr	r0, [pc, #72]	@ (800a10c <MX_USB_DEVICE_Init+0x54>)
 800a0c2:	f7fe ff62 	bl	8008f8a <USBD_Init>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0cc:	f7f7 fc0c 	bl	80018e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a0d0:	490f      	ldr	r1, [pc, #60]	@ (800a110 <MX_USB_DEVICE_Init+0x58>)
 800a0d2:	480e      	ldr	r0, [pc, #56]	@ (800a10c <MX_USB_DEVICE_Init+0x54>)
 800a0d4:	f7fe ff84 	bl	8008fe0 <USBD_RegisterClass>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0de:	f7f7 fc03 	bl	80018e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0e2:	490c      	ldr	r1, [pc, #48]	@ (800a114 <MX_USB_DEVICE_Init+0x5c>)
 800a0e4:	4809      	ldr	r0, [pc, #36]	@ (800a10c <MX_USB_DEVICE_Init+0x54>)
 800a0e6:	f7fe feb5 	bl	8008e54 <USBD_CDC_RegisterInterface>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0f0:	f7f7 fbfa 	bl	80018e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a0f4:	4805      	ldr	r0, [pc, #20]	@ (800a10c <MX_USB_DEVICE_Init+0x54>)
 800a0f6:	f7fe ff8c 	bl	8009012 <USBD_Start>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a100:	f7f7 fbf2 	bl	80018e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a104:	bf00      	nop
 800a106:	bd80      	pop	{r7, pc}
 800a108:	200001c4 	.word	0x200001c4
 800a10c:	200003d4 	.word	0x200003d4
 800a110:	200000b0 	.word	0x200000b0
 800a114:	200001b4 	.word	0x200001b4

0800a118 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a11c:	2200      	movs	r2, #0
 800a11e:	4905      	ldr	r1, [pc, #20]	@ (800a134 <CDC_Init_FS+0x1c>)
 800a120:	4805      	ldr	r0, [pc, #20]	@ (800a138 <CDC_Init_FS+0x20>)
 800a122:	f7fe fead 	bl	8008e80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a126:	4905      	ldr	r1, [pc, #20]	@ (800a13c <CDC_Init_FS+0x24>)
 800a128:	4803      	ldr	r0, [pc, #12]	@ (800a138 <CDC_Init_FS+0x20>)
 800a12a:	f7fe fec2 	bl	8008eb2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a12e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a130:	4618      	mov	r0, r3
 800a132:	bd80      	pop	{r7, pc}
 800a134:	20000a98 	.word	0x20000a98
 800a138:	200003d4 	.word	0x200003d4
 800a13c:	20000698 	.word	0x20000698

0800a140 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a144:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a146:	4618      	mov	r0, r3
 800a148:	46bd      	mov	sp, r7
 800a14a:	bc80      	pop	{r7}
 800a14c:	4770      	bx	lr
	...

0800a150 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	6039      	str	r1, [r7, #0]
 800a15a:	71fb      	strb	r3, [r7, #7]
 800a15c:	4613      	mov	r3, r2
 800a15e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a160:	79fb      	ldrb	r3, [r7, #7]
 800a162:	2b23      	cmp	r3, #35	@ 0x23
 800a164:	d84a      	bhi.n	800a1fc <CDC_Control_FS+0xac>
 800a166:	a201      	add	r2, pc, #4	@ (adr r2, 800a16c <CDC_Control_FS+0x1c>)
 800a168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16c:	0800a1fd 	.word	0x0800a1fd
 800a170:	0800a1fd 	.word	0x0800a1fd
 800a174:	0800a1fd 	.word	0x0800a1fd
 800a178:	0800a1fd 	.word	0x0800a1fd
 800a17c:	0800a1fd 	.word	0x0800a1fd
 800a180:	0800a1fd 	.word	0x0800a1fd
 800a184:	0800a1fd 	.word	0x0800a1fd
 800a188:	0800a1fd 	.word	0x0800a1fd
 800a18c:	0800a1fd 	.word	0x0800a1fd
 800a190:	0800a1fd 	.word	0x0800a1fd
 800a194:	0800a1fd 	.word	0x0800a1fd
 800a198:	0800a1fd 	.word	0x0800a1fd
 800a19c:	0800a1fd 	.word	0x0800a1fd
 800a1a0:	0800a1fd 	.word	0x0800a1fd
 800a1a4:	0800a1fd 	.word	0x0800a1fd
 800a1a8:	0800a1fd 	.word	0x0800a1fd
 800a1ac:	0800a1fd 	.word	0x0800a1fd
 800a1b0:	0800a1fd 	.word	0x0800a1fd
 800a1b4:	0800a1fd 	.word	0x0800a1fd
 800a1b8:	0800a1fd 	.word	0x0800a1fd
 800a1bc:	0800a1fd 	.word	0x0800a1fd
 800a1c0:	0800a1fd 	.word	0x0800a1fd
 800a1c4:	0800a1fd 	.word	0x0800a1fd
 800a1c8:	0800a1fd 	.word	0x0800a1fd
 800a1cc:	0800a1fd 	.word	0x0800a1fd
 800a1d0:	0800a1fd 	.word	0x0800a1fd
 800a1d4:	0800a1fd 	.word	0x0800a1fd
 800a1d8:	0800a1fd 	.word	0x0800a1fd
 800a1dc:	0800a1fd 	.word	0x0800a1fd
 800a1e0:	0800a1fd 	.word	0x0800a1fd
 800a1e4:	0800a1fd 	.word	0x0800a1fd
 800a1e8:	0800a1fd 	.word	0x0800a1fd
 800a1ec:	0800a1fd 	.word	0x0800a1fd
 800a1f0:	0800a1fd 	.word	0x0800a1fd
 800a1f4:	0800a1fd 	.word	0x0800a1fd
 800a1f8:	0800a1fd 	.word	0x0800a1fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1fc:	bf00      	nop
  }

  return (USBD_OK);
 800a1fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a200:	4618      	mov	r0, r3
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	bc80      	pop	{r7}
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop

0800a20c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	4805      	ldr	r0, [pc, #20]	@ (800a230 <CDC_Receive_FS+0x24>)
 800a21a:	f7fe fe4a 	bl	8008eb2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a21e:	4804      	ldr	r0, [pc, #16]	@ (800a230 <CDC_Receive_FS+0x24>)
 800a220:	f7fe fe89 	bl	8008f36 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a224:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	200003d4 	.word	0x200003d4

0800a234 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a244:	4b0d      	ldr	r3, [pc, #52]	@ (800a27c <CDC_Transmit_FS+0x48>)
 800a246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a24a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a256:	2301      	movs	r3, #1
 800a258:	e00b      	b.n	800a272 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a25a:	887b      	ldrh	r3, [r7, #2]
 800a25c:	461a      	mov	r2, r3
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	4806      	ldr	r0, [pc, #24]	@ (800a27c <CDC_Transmit_FS+0x48>)
 800a262:	f7fe fe0d 	bl	8008e80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a266:	4805      	ldr	r0, [pc, #20]	@ (800a27c <CDC_Transmit_FS+0x48>)
 800a268:	f7fe fe36 	bl	8008ed8 <USBD_CDC_TransmitPacket>
 800a26c:	4603      	mov	r3, r0
 800a26e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200003d4 	.word	0x200003d4

0800a280 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	4603      	mov	r3, r0
 800a288:	6039      	str	r1, [r7, #0]
 800a28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2212      	movs	r2, #18
 800a290:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a292:	4b03      	ldr	r3, [pc, #12]	@ (800a2a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	bc80      	pop	{r7}
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	200001e0 	.word	0x200001e0

0800a2a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2204      	movs	r2, #4
 800a2b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2b6:	4b03      	ldr	r3, [pc, #12]	@ (800a2c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bc80      	pop	{r7}
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	200001f4 	.word	0x200001f4

0800a2c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4907      	ldr	r1, [pc, #28]	@ (800a2fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a2de:	4808      	ldr	r0, [pc, #32]	@ (800a300 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2e0:	f7ff fe0d 	bl	8009efe <USBD_GetString>
 800a2e4:	e004      	b.n	800a2f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	4904      	ldr	r1, [pc, #16]	@ (800a2fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a2ea:	4805      	ldr	r0, [pc, #20]	@ (800a300 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2ec:	f7ff fe07 	bl	8009efe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f0:	4b02      	ldr	r3, [pc, #8]	@ (800a2fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000e98 	.word	0x20000e98
 800a300:	0800b370 	.word	0x0800b370

0800a304 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a310:	683a      	ldr	r2, [r7, #0]
 800a312:	4904      	ldr	r1, [pc, #16]	@ (800a324 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a314:	4804      	ldr	r0, [pc, #16]	@ (800a328 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a316:	f7ff fdf2 	bl	8009efe <USBD_GetString>
  return USBD_StrDesc;
 800a31a:	4b02      	ldr	r3, [pc, #8]	@ (800a324 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000e98 	.word	0x20000e98
 800a328:	0800b388 	.word	0x0800b388

0800a32c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	4603      	mov	r3, r0
 800a334:	6039      	str	r1, [r7, #0]
 800a336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	221a      	movs	r2, #26
 800a33c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a33e:	f000 f843 	bl	800a3c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a342:	4b02      	ldr	r3, [pc, #8]	@ (800a34c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a344:	4618      	mov	r0, r3
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	200001f8 	.word	0x200001f8

0800a350 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d105      	bne.n	800a36e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4907      	ldr	r1, [pc, #28]	@ (800a384 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a366:	4808      	ldr	r0, [pc, #32]	@ (800a388 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a368:	f7ff fdc9 	bl	8009efe <USBD_GetString>
 800a36c:	e004      	b.n	800a378 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	4904      	ldr	r1, [pc, #16]	@ (800a384 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a372:	4805      	ldr	r0, [pc, #20]	@ (800a388 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a374:	f7ff fdc3 	bl	8009efe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a378:	4b02      	ldr	r3, [pc, #8]	@ (800a384 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20000e98 	.word	0x20000e98
 800a388:	0800b39c 	.word	0x0800b39c

0800a38c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d105      	bne.n	800a3aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	4907      	ldr	r1, [pc, #28]	@ (800a3c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3a2:	4808      	ldr	r0, [pc, #32]	@ (800a3c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3a4:	f7ff fdab 	bl	8009efe <USBD_GetString>
 800a3a8:	e004      	b.n	800a3b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	4904      	ldr	r1, [pc, #16]	@ (800a3c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3ae:	4805      	ldr	r0, [pc, #20]	@ (800a3c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3b0:	f7ff fda5 	bl	8009efe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3b4:	4b02      	ldr	r3, [pc, #8]	@ (800a3c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000e98 	.word	0x20000e98
 800a3c4:	0800b3a8 	.word	0x0800b3a8

0800a3c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a40c <Get_SerialNum+0x44>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a410 <Get_SerialNum+0x48>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3da:	4b0e      	ldr	r3, [pc, #56]	@ (800a414 <Get_SerialNum+0x4c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d009      	beq.n	800a402 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	4909      	ldr	r1, [pc, #36]	@ (800a418 <Get_SerialNum+0x50>)
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f814 	bl	800a420 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3f8:	2204      	movs	r2, #4
 800a3fa:	4908      	ldr	r1, [pc, #32]	@ (800a41c <Get_SerialNum+0x54>)
 800a3fc:	68b8      	ldr	r0, [r7, #8]
 800a3fe:	f000 f80f 	bl	800a420 <IntToUnicode>
  }
}
 800a402:	bf00      	nop
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	1ffff7e8 	.word	0x1ffff7e8
 800a410:	1ffff7ec 	.word	0x1ffff7ec
 800a414:	1ffff7f0 	.word	0x1ffff7f0
 800a418:	200001fa 	.word	0x200001fa
 800a41c:	2000020a 	.word	0x2000020a

0800a420 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	4613      	mov	r3, r2
 800a42c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a432:	2300      	movs	r3, #0
 800a434:	75fb      	strb	r3, [r7, #23]
 800a436:	e027      	b.n	800a488 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	0f1b      	lsrs	r3, r3, #28
 800a43c:	2b09      	cmp	r3, #9
 800a43e:	d80b      	bhi.n	800a458 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	0f1b      	lsrs	r3, r3, #28
 800a444:	b2da      	uxtb	r2, r3
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	4619      	mov	r1, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	440b      	add	r3, r1
 800a450:	3230      	adds	r2, #48	@ 0x30
 800a452:	b2d2      	uxtb	r2, r2
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	e00a      	b.n	800a46e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	0f1b      	lsrs	r3, r3, #28
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	4619      	mov	r1, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	440b      	add	r3, r1
 800a468:	3237      	adds	r2, #55	@ 0x37
 800a46a:	b2d2      	uxtb	r2, r2
 800a46c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	005b      	lsls	r3, r3, #1
 800a478:	3301      	adds	r3, #1
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4413      	add	r3, r2
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	3301      	adds	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
 800a488:	7dfa      	ldrb	r2, [r7, #23]
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d3d3      	bcc.n	800a438 <IntToUnicode+0x18>
  }
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	371c      	adds	r7, #28
 800a496:	46bd      	mov	sp, r7
 800a498:	bc80      	pop	{r7}
 800a49a:	4770      	bx	lr

0800a49c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a0d      	ldr	r2, [pc, #52]	@ (800a4e0 <HAL_PCD_MspInit+0x44>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d113      	bne.n	800a4d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e4 <HAL_PCD_MspInit+0x48>)
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	4a0c      	ldr	r2, [pc, #48]	@ (800a4e4 <HAL_PCD_MspInit+0x48>)
 800a4b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4b8:	61d3      	str	r3, [r2, #28]
 800a4ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e4 <HAL_PCD_MspInit+0x48>)
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	2014      	movs	r0, #20
 800a4cc:	f7f8 f9a7 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a4d0:	2014      	movs	r0, #20
 800a4d2:	f7f8 f9c0 	bl	8002856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	40005c00 	.word	0x40005c00
 800a4e4:	40021000 	.word	0x40021000

0800a4e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	f7fe fdcf 	bl	80090a2 <USBD_LL_SetupStage>
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a51e:	78fa      	ldrb	r2, [r7, #3]
 800a520:	6879      	ldr	r1, [r7, #4]
 800a522:	4613      	mov	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	00db      	lsls	r3, r3, #3
 800a52a:	440b      	add	r3, r1
 800a52c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	78fb      	ldrb	r3, [r7, #3]
 800a534:	4619      	mov	r1, r3
 800a536:	f7fe fe01 	bl	800913c <USBD_LL_DataOutStage>
}
 800a53a:	bf00      	nop
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	460b      	mov	r3, r1
 800a54c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	440b      	add	r3, r1
 800a562:	3324      	adds	r3, #36	@ 0x24
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	78fb      	ldrb	r3, [r7, #3]
 800a568:	4619      	mov	r1, r3
 800a56a:	f7fe fe58 	bl	800921e <USBD_LL_DataInStage>
}
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe ff68 	bl	800945a <USBD_LL_SOF>
}
 800a58a:	bf00      	nop
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a59a:	2301      	movs	r3, #1
 800a59c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	799b      	ldrb	r3, [r3, #6]
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d001      	beq.n	800a5aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a5a6:	f7f7 f99f 	bl	80018e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5b0:	7bfa      	ldrb	r2, [r7, #15]
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe ff18 	bl	80093ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fe fed1 	bl	8009368 <USBD_LL_Reset>
}
 800a5c6:	bf00      	nop
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe ff12 	bl	8009408 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7a9b      	ldrb	r3, [r3, #10]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d005      	beq.n	800a5f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5ec:	4b04      	ldr	r3, [pc, #16]	@ (800a600 <HAL_PCD_SuspendCallback+0x30>)
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	4a03      	ldr	r2, [pc, #12]	@ (800a600 <HAL_PCD_SuspendCallback+0x30>)
 800a5f2:	f043 0306 	orr.w	r3, r3, #6
 800a5f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5f8:	bf00      	nop
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	e000ed00 	.word	0xe000ed00

0800a604 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe ff0c 	bl	8009430 <USBD_LL_Resume>
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a628:	4a28      	ldr	r2, [pc, #160]	@ (800a6cc <USBD_LL_Init+0xac>)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a26      	ldr	r2, [pc, #152]	@ (800a6cc <USBD_LL_Init+0xac>)
 800a634:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a638:	4b24      	ldr	r3, [pc, #144]	@ (800a6cc <USBD_LL_Init+0xac>)
 800a63a:	4a25      	ldr	r2, [pc, #148]	@ (800a6d0 <USBD_LL_Init+0xb0>)
 800a63c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a63e:	4b23      	ldr	r3, [pc, #140]	@ (800a6cc <USBD_LL_Init+0xac>)
 800a640:	2208      	movs	r2, #8
 800a642:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a644:	4b21      	ldr	r3, [pc, #132]	@ (800a6cc <USBD_LL_Init+0xac>)
 800a646:	2202      	movs	r2, #2
 800a648:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a64a:	4b20      	ldr	r3, [pc, #128]	@ (800a6cc <USBD_LL_Init+0xac>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a650:	4b1e      	ldr	r3, [pc, #120]	@ (800a6cc <USBD_LL_Init+0xac>)
 800a652:	2200      	movs	r2, #0
 800a654:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a656:	4b1d      	ldr	r3, [pc, #116]	@ (800a6cc <USBD_LL_Init+0xac>)
 800a658:	2200      	movs	r2, #0
 800a65a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a65c:	481b      	ldr	r0, [pc, #108]	@ (800a6cc <USBD_LL_Init+0xac>)
 800a65e:	f7f8 faca 	bl	8002bf6 <HAL_PCD_Init>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a668:	f7f7 f93e 	bl	80018e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a672:	2318      	movs	r3, #24
 800a674:	2200      	movs	r2, #0
 800a676:	2100      	movs	r1, #0
 800a678:	f7f9 ffdb 	bl	8004632 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a682:	2358      	movs	r3, #88	@ 0x58
 800a684:	2200      	movs	r2, #0
 800a686:	2180      	movs	r1, #128	@ 0x80
 800a688:	f7f9 ffd3 	bl	8004632 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a692:	23c0      	movs	r3, #192	@ 0xc0
 800a694:	2200      	movs	r2, #0
 800a696:	2181      	movs	r1, #129	@ 0x81
 800a698:	f7f9 ffcb 	bl	8004632 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6a2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	f7f9 ffc2 	bl	8004632 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2182      	movs	r1, #130	@ 0x82
 800a6bc:	f7f9 ffb9 	bl	8004632 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20001098 	.word	0x20001098
 800a6d0:	40005c00 	.word	0x40005c00

0800a6d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f8 fb79 	bl	8002de2 <HAL_PCD_Start>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 f94e 	bl	800a998 <USBD_Get_USB_Status>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a700:	7bbb      	ldrb	r3, [r7, #14]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	4608      	mov	r0, r1
 800a714:	4611      	mov	r1, r2
 800a716:	461a      	mov	r2, r3
 800a718:	4603      	mov	r3, r0
 800a71a:	70fb      	strb	r3, [r7, #3]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70bb      	strb	r3, [r7, #2]
 800a720:	4613      	mov	r3, r2
 800a722:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a732:	78bb      	ldrb	r3, [r7, #2]
 800a734:	883a      	ldrh	r2, [r7, #0]
 800a736:	78f9      	ldrb	r1, [r7, #3]
 800a738:	f7f8 fccd 	bl	80030d6 <HAL_PCD_EP_Open>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	4618      	mov	r0, r3
 800a744:	f000 f928 	bl	800a998 <USBD_Get_USB_Status>
 800a748:	4603      	mov	r3, r0
 800a74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	460b      	mov	r3, r1
 800a760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a770:	78fa      	ldrb	r2, [r7, #3]
 800a772:	4611      	mov	r1, r2
 800a774:	4618      	mov	r0, r3
 800a776:	f7f8 fd0b 	bl	8003190 <HAL_PCD_EP_Close>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 f909 	bl	800a998 <USBD_Get_USB_Status>
 800a786:	4603      	mov	r3, r0
 800a788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7ae:	78fa      	ldrb	r2, [r7, #3]
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7f8 fdb3 	bl	800331e <HAL_PCD_EP_SetStall>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 f8ea 	bl	800a998 <USBD_Get_USB_Status>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7ec:	78fa      	ldrb	r2, [r7, #3]
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7f8 fdf4 	bl	80033de <HAL_PCD_EP_ClrStall>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 f8cb 	bl	800a998 <USBD_Get_USB_Status>
 800a802:	4603      	mov	r3, r0
 800a804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a806:	7bbb      	ldrb	r3, [r7, #14]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a822:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	da0b      	bge.n	800a844 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a832:	68f9      	ldr	r1, [r7, #12]
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	440b      	add	r3, r1
 800a83e:	3312      	adds	r3, #18
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	e00b      	b.n	800a85c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a84a:	68f9      	ldr	r1, [r7, #12]
 800a84c:	4613      	mov	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	440b      	add	r3, r1
 800a856:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a85a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	bc80      	pop	{r7}
 800a864:	4770      	bx	lr

0800a866 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b084      	sub	sp, #16
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	460b      	mov	r3, r1
 800a870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a880:	78fa      	ldrb	r2, [r7, #3]
 800a882:	4611      	mov	r1, r2
 800a884:	4618      	mov	r0, r3
 800a886:	f7f8 fc02 	bl	800308e <HAL_PCD_SetAddress>
 800a88a:	4603      	mov	r3, r0
 800a88c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	4618      	mov	r0, r3
 800a892:	f000 f881 	bl	800a998 <USBD_Get_USB_Status>
 800a896:	4603      	mov	r3, r0
 800a898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a89a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	72fb      	strb	r3, [r7, #11]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8c6:	893b      	ldrh	r3, [r7, #8]
 800a8c8:	7af9      	ldrb	r1, [r7, #11]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	f7f8 fcf0 	bl	80032b0 <HAL_PCD_EP_Transmit>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 f85e 	bl	800a998 <USBD_Get_USB_Status>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3718      	adds	r7, #24
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b086      	sub	sp, #24
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	72fb      	strb	r3, [r7, #11]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a90c:	893b      	ldrh	r3, [r7, #8]
 800a90e:	7af9      	ldrb	r1, [r7, #11]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	f7f8 fc85 	bl	8003220 <HAL_PCD_EP_Receive>
 800a916:	4603      	mov	r3, r0
 800a918:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 f83b 	bl	800a998 <USBD_Get_USB_Status>
 800a922:	4603      	mov	r3, r0
 800a924:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a926:	7dbb      	ldrb	r3, [r7, #22]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	460b      	mov	r3, r1
 800a93a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a942:	78fa      	ldrb	r2, [r7, #3]
 800a944:	4611      	mov	r1, r2
 800a946:	4618      	mov	r0, r3
 800a948:	f7f8 fc9b 	bl	8003282 <HAL_PCD_EP_GetRxCount>
 800a94c:	4603      	mov	r3, r0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
	...

0800a958 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a960:	4b02      	ldr	r3, [pc, #8]	@ (800a96c <USBD_static_malloc+0x14>)
}
 800a962:	4618      	mov	r0, r3
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	bc80      	pop	{r7}
 800a96a:	4770      	bx	lr
 800a96c:	20001370 	.word	0x20001370

0800a970 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]

}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bc80      	pop	{r7}
 800a980:	4770      	bx	lr

0800a982 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a98e:	bf00      	nop
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	bc80      	pop	{r7}
 800a996:	4770      	bx	lr

0800a998 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d817      	bhi.n	800a9dc <USBD_Get_USB_Status+0x44>
 800a9ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b4 <USBD_Get_USB_Status+0x1c>)
 800a9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b2:	bf00      	nop
 800a9b4:	0800a9c5 	.word	0x0800a9c5
 800a9b8:	0800a9cb 	.word	0x0800a9cb
 800a9bc:	0800a9d1 	.word	0x0800a9d1
 800a9c0:	0800a9d7 	.word	0x0800a9d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c8:	e00b      	b.n	800a9e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ce:	e008      	b.n	800a9e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d4:	e005      	b.n	800a9e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9da:	e002      	b.n	800a9e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9dc:	2302      	movs	r3, #2
 800a9de:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e0:	bf00      	nop
  }
  return usb_status;
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bc80      	pop	{r7}
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop

0800a9f0 <siprintf>:
 800a9f0:	b40e      	push	{r1, r2, r3}
 800a9f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a9f6:	b500      	push	{lr}
 800a9f8:	b09c      	sub	sp, #112	@ 0x70
 800a9fa:	ab1d      	add	r3, sp, #116	@ 0x74
 800a9fc:	9002      	str	r0, [sp, #8]
 800a9fe:	9006      	str	r0, [sp, #24]
 800aa00:	9107      	str	r1, [sp, #28]
 800aa02:	9104      	str	r1, [sp, #16]
 800aa04:	4808      	ldr	r0, [pc, #32]	@ (800aa28 <siprintf+0x38>)
 800aa06:	4909      	ldr	r1, [pc, #36]	@ (800aa2c <siprintf+0x3c>)
 800aa08:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa0c:	9105      	str	r1, [sp, #20]
 800aa0e:	6800      	ldr	r0, [r0, #0]
 800aa10:	a902      	add	r1, sp, #8
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	f000 f992 	bl	800ad3c <_svfiprintf_r>
 800aa18:	2200      	movs	r2, #0
 800aa1a:	9b02      	ldr	r3, [sp, #8]
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	b01c      	add	sp, #112	@ 0x70
 800aa20:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa24:	b003      	add	sp, #12
 800aa26:	4770      	bx	lr
 800aa28:	20000214 	.word	0x20000214
 800aa2c:	ffff0208 	.word	0xffff0208

0800aa30 <memset>:
 800aa30:	4603      	mov	r3, r0
 800aa32:	4402      	add	r2, r0
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d100      	bne.n	800aa3a <memset+0xa>
 800aa38:	4770      	bx	lr
 800aa3a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa3e:	e7f9      	b.n	800aa34 <memset+0x4>

0800aa40 <__errno>:
 800aa40:	4b01      	ldr	r3, [pc, #4]	@ (800aa48 <__errno+0x8>)
 800aa42:	6818      	ldr	r0, [r3, #0]
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	20000214 	.word	0x20000214

0800aa4c <__libc_init_array>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	2600      	movs	r6, #0
 800aa50:	4d0c      	ldr	r5, [pc, #48]	@ (800aa84 <__libc_init_array+0x38>)
 800aa52:	4c0d      	ldr	r4, [pc, #52]	@ (800aa88 <__libc_init_array+0x3c>)
 800aa54:	1b64      	subs	r4, r4, r5
 800aa56:	10a4      	asrs	r4, r4, #2
 800aa58:	42a6      	cmp	r6, r4
 800aa5a:	d109      	bne.n	800aa70 <__libc_init_array+0x24>
 800aa5c:	f000 fc78 	bl	800b350 <_init>
 800aa60:	2600      	movs	r6, #0
 800aa62:	4d0a      	ldr	r5, [pc, #40]	@ (800aa8c <__libc_init_array+0x40>)
 800aa64:	4c0a      	ldr	r4, [pc, #40]	@ (800aa90 <__libc_init_array+0x44>)
 800aa66:	1b64      	subs	r4, r4, r5
 800aa68:	10a4      	asrs	r4, r4, #2
 800aa6a:	42a6      	cmp	r6, r4
 800aa6c:	d105      	bne.n	800aa7a <__libc_init_array+0x2e>
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}
 800aa70:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa74:	4798      	blx	r3
 800aa76:	3601      	adds	r6, #1
 800aa78:	e7ee      	b.n	800aa58 <__libc_init_array+0xc>
 800aa7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa7e:	4798      	blx	r3
 800aa80:	3601      	adds	r6, #1
 800aa82:	e7f2      	b.n	800aa6a <__libc_init_array+0x1e>
 800aa84:	0800b418 	.word	0x0800b418
 800aa88:	0800b418 	.word	0x0800b418
 800aa8c:	0800b418 	.word	0x0800b418
 800aa90:	0800b41c 	.word	0x0800b41c

0800aa94 <__retarget_lock_acquire_recursive>:
 800aa94:	4770      	bx	lr

0800aa96 <__retarget_lock_release_recursive>:
 800aa96:	4770      	bx	lr

0800aa98 <_free_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	2900      	cmp	r1, #0
 800aa9e:	d040      	beq.n	800ab22 <_free_r+0x8a>
 800aaa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaa4:	1f0c      	subs	r4, r1, #4
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfb8      	it	lt
 800aaaa:	18e4      	addlt	r4, r4, r3
 800aaac:	f000 f8de 	bl	800ac6c <__malloc_lock>
 800aab0:	4a1c      	ldr	r2, [pc, #112]	@ (800ab24 <_free_r+0x8c>)
 800aab2:	6813      	ldr	r3, [r2, #0]
 800aab4:	b933      	cbnz	r3, 800aac4 <_free_r+0x2c>
 800aab6:	6063      	str	r3, [r4, #4]
 800aab8:	6014      	str	r4, [r2, #0]
 800aaba:	4628      	mov	r0, r5
 800aabc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aac0:	f000 b8da 	b.w	800ac78 <__malloc_unlock>
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	d908      	bls.n	800aada <_free_r+0x42>
 800aac8:	6820      	ldr	r0, [r4, #0]
 800aaca:	1821      	adds	r1, r4, r0
 800aacc:	428b      	cmp	r3, r1
 800aace:	bf01      	itttt	eq
 800aad0:	6819      	ldreq	r1, [r3, #0]
 800aad2:	685b      	ldreq	r3, [r3, #4]
 800aad4:	1809      	addeq	r1, r1, r0
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	e7ed      	b.n	800aab6 <_free_r+0x1e>
 800aada:	461a      	mov	r2, r3
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	b10b      	cbz	r3, 800aae4 <_free_r+0x4c>
 800aae0:	42a3      	cmp	r3, r4
 800aae2:	d9fa      	bls.n	800aada <_free_r+0x42>
 800aae4:	6811      	ldr	r1, [r2, #0]
 800aae6:	1850      	adds	r0, r2, r1
 800aae8:	42a0      	cmp	r0, r4
 800aaea:	d10b      	bne.n	800ab04 <_free_r+0x6c>
 800aaec:	6820      	ldr	r0, [r4, #0]
 800aaee:	4401      	add	r1, r0
 800aaf0:	1850      	adds	r0, r2, r1
 800aaf2:	4283      	cmp	r3, r0
 800aaf4:	6011      	str	r1, [r2, #0]
 800aaf6:	d1e0      	bne.n	800aaba <_free_r+0x22>
 800aaf8:	6818      	ldr	r0, [r3, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4408      	add	r0, r1
 800aafe:	6010      	str	r0, [r2, #0]
 800ab00:	6053      	str	r3, [r2, #4]
 800ab02:	e7da      	b.n	800aaba <_free_r+0x22>
 800ab04:	d902      	bls.n	800ab0c <_free_r+0x74>
 800ab06:	230c      	movs	r3, #12
 800ab08:	602b      	str	r3, [r5, #0]
 800ab0a:	e7d6      	b.n	800aaba <_free_r+0x22>
 800ab0c:	6820      	ldr	r0, [r4, #0]
 800ab0e:	1821      	adds	r1, r4, r0
 800ab10:	428b      	cmp	r3, r1
 800ab12:	bf01      	itttt	eq
 800ab14:	6819      	ldreq	r1, [r3, #0]
 800ab16:	685b      	ldreq	r3, [r3, #4]
 800ab18:	1809      	addeq	r1, r1, r0
 800ab1a:	6021      	streq	r1, [r4, #0]
 800ab1c:	6063      	str	r3, [r4, #4]
 800ab1e:	6054      	str	r4, [r2, #4]
 800ab20:	e7cb      	b.n	800aaba <_free_r+0x22>
 800ab22:	bd38      	pop	{r3, r4, r5, pc}
 800ab24:	200016d4 	.word	0x200016d4

0800ab28 <sbrk_aligned>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	4e0f      	ldr	r6, [pc, #60]	@ (800ab68 <sbrk_aligned+0x40>)
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	6831      	ldr	r1, [r6, #0]
 800ab30:	4605      	mov	r5, r0
 800ab32:	b911      	cbnz	r1, 800ab3a <sbrk_aligned+0x12>
 800ab34:	f000 fbaa 	bl	800b28c <_sbrk_r>
 800ab38:	6030      	str	r0, [r6, #0]
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	f000 fba5 	bl	800b28c <_sbrk_r>
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	d103      	bne.n	800ab4e <sbrk_aligned+0x26>
 800ab46:	f04f 34ff 	mov.w	r4, #4294967295
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	bd70      	pop	{r4, r5, r6, pc}
 800ab4e:	1cc4      	adds	r4, r0, #3
 800ab50:	f024 0403 	bic.w	r4, r4, #3
 800ab54:	42a0      	cmp	r0, r4
 800ab56:	d0f8      	beq.n	800ab4a <sbrk_aligned+0x22>
 800ab58:	1a21      	subs	r1, r4, r0
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f000 fb96 	bl	800b28c <_sbrk_r>
 800ab60:	3001      	adds	r0, #1
 800ab62:	d1f2      	bne.n	800ab4a <sbrk_aligned+0x22>
 800ab64:	e7ef      	b.n	800ab46 <sbrk_aligned+0x1e>
 800ab66:	bf00      	nop
 800ab68:	200016d0 	.word	0x200016d0

0800ab6c <_malloc_r>:
 800ab6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab70:	1ccd      	adds	r5, r1, #3
 800ab72:	f025 0503 	bic.w	r5, r5, #3
 800ab76:	3508      	adds	r5, #8
 800ab78:	2d0c      	cmp	r5, #12
 800ab7a:	bf38      	it	cc
 800ab7c:	250c      	movcc	r5, #12
 800ab7e:	2d00      	cmp	r5, #0
 800ab80:	4606      	mov	r6, r0
 800ab82:	db01      	blt.n	800ab88 <_malloc_r+0x1c>
 800ab84:	42a9      	cmp	r1, r5
 800ab86:	d904      	bls.n	800ab92 <_malloc_r+0x26>
 800ab88:	230c      	movs	r3, #12
 800ab8a:	6033      	str	r3, [r6, #0]
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac68 <_malloc_r+0xfc>
 800ab96:	f000 f869 	bl	800ac6c <__malloc_lock>
 800ab9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab9e:	461c      	mov	r4, r3
 800aba0:	bb44      	cbnz	r4, 800abf4 <_malloc_r+0x88>
 800aba2:	4629      	mov	r1, r5
 800aba4:	4630      	mov	r0, r6
 800aba6:	f7ff ffbf 	bl	800ab28 <sbrk_aligned>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	4604      	mov	r4, r0
 800abae:	d158      	bne.n	800ac62 <_malloc_r+0xf6>
 800abb0:	f8d8 4000 	ldr.w	r4, [r8]
 800abb4:	4627      	mov	r7, r4
 800abb6:	2f00      	cmp	r7, #0
 800abb8:	d143      	bne.n	800ac42 <_malloc_r+0xd6>
 800abba:	2c00      	cmp	r4, #0
 800abbc:	d04b      	beq.n	800ac56 <_malloc_r+0xea>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	4639      	mov	r1, r7
 800abc2:	4630      	mov	r0, r6
 800abc4:	eb04 0903 	add.w	r9, r4, r3
 800abc8:	f000 fb60 	bl	800b28c <_sbrk_r>
 800abcc:	4581      	cmp	r9, r0
 800abce:	d142      	bne.n	800ac56 <_malloc_r+0xea>
 800abd0:	6821      	ldr	r1, [r4, #0]
 800abd2:	4630      	mov	r0, r6
 800abd4:	1a6d      	subs	r5, r5, r1
 800abd6:	4629      	mov	r1, r5
 800abd8:	f7ff ffa6 	bl	800ab28 <sbrk_aligned>
 800abdc:	3001      	adds	r0, #1
 800abde:	d03a      	beq.n	800ac56 <_malloc_r+0xea>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	442b      	add	r3, r5
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	f8d8 3000 	ldr.w	r3, [r8]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	bb62      	cbnz	r2, 800ac48 <_malloc_r+0xdc>
 800abee:	f8c8 7000 	str.w	r7, [r8]
 800abf2:	e00f      	b.n	800ac14 <_malloc_r+0xa8>
 800abf4:	6822      	ldr	r2, [r4, #0]
 800abf6:	1b52      	subs	r2, r2, r5
 800abf8:	d420      	bmi.n	800ac3c <_malloc_r+0xd0>
 800abfa:	2a0b      	cmp	r2, #11
 800abfc:	d917      	bls.n	800ac2e <_malloc_r+0xc2>
 800abfe:	1961      	adds	r1, r4, r5
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	6025      	str	r5, [r4, #0]
 800ac04:	bf18      	it	ne
 800ac06:	6059      	strne	r1, [r3, #4]
 800ac08:	6863      	ldr	r3, [r4, #4]
 800ac0a:	bf08      	it	eq
 800ac0c:	f8c8 1000 	streq.w	r1, [r8]
 800ac10:	5162      	str	r2, [r4, r5]
 800ac12:	604b      	str	r3, [r1, #4]
 800ac14:	4630      	mov	r0, r6
 800ac16:	f000 f82f 	bl	800ac78 <__malloc_unlock>
 800ac1a:	f104 000b 	add.w	r0, r4, #11
 800ac1e:	1d23      	adds	r3, r4, #4
 800ac20:	f020 0007 	bic.w	r0, r0, #7
 800ac24:	1ac2      	subs	r2, r0, r3
 800ac26:	bf1c      	itt	ne
 800ac28:	1a1b      	subne	r3, r3, r0
 800ac2a:	50a3      	strne	r3, [r4, r2]
 800ac2c:	e7af      	b.n	800ab8e <_malloc_r+0x22>
 800ac2e:	6862      	ldr	r2, [r4, #4]
 800ac30:	42a3      	cmp	r3, r4
 800ac32:	bf0c      	ite	eq
 800ac34:	f8c8 2000 	streq.w	r2, [r8]
 800ac38:	605a      	strne	r2, [r3, #4]
 800ac3a:	e7eb      	b.n	800ac14 <_malloc_r+0xa8>
 800ac3c:	4623      	mov	r3, r4
 800ac3e:	6864      	ldr	r4, [r4, #4]
 800ac40:	e7ae      	b.n	800aba0 <_malloc_r+0x34>
 800ac42:	463c      	mov	r4, r7
 800ac44:	687f      	ldr	r7, [r7, #4]
 800ac46:	e7b6      	b.n	800abb6 <_malloc_r+0x4a>
 800ac48:	461a      	mov	r2, r3
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	d1fb      	bne.n	800ac48 <_malloc_r+0xdc>
 800ac50:	2300      	movs	r3, #0
 800ac52:	6053      	str	r3, [r2, #4]
 800ac54:	e7de      	b.n	800ac14 <_malloc_r+0xa8>
 800ac56:	230c      	movs	r3, #12
 800ac58:	4630      	mov	r0, r6
 800ac5a:	6033      	str	r3, [r6, #0]
 800ac5c:	f000 f80c 	bl	800ac78 <__malloc_unlock>
 800ac60:	e794      	b.n	800ab8c <_malloc_r+0x20>
 800ac62:	6005      	str	r5, [r0, #0]
 800ac64:	e7d6      	b.n	800ac14 <_malloc_r+0xa8>
 800ac66:	bf00      	nop
 800ac68:	200016d4 	.word	0x200016d4

0800ac6c <__malloc_lock>:
 800ac6c:	4801      	ldr	r0, [pc, #4]	@ (800ac74 <__malloc_lock+0x8>)
 800ac6e:	f7ff bf11 	b.w	800aa94 <__retarget_lock_acquire_recursive>
 800ac72:	bf00      	nop
 800ac74:	200016cc 	.word	0x200016cc

0800ac78 <__malloc_unlock>:
 800ac78:	4801      	ldr	r0, [pc, #4]	@ (800ac80 <__malloc_unlock+0x8>)
 800ac7a:	f7ff bf0c 	b.w	800aa96 <__retarget_lock_release_recursive>
 800ac7e:	bf00      	nop
 800ac80:	200016cc 	.word	0x200016cc

0800ac84 <__ssputs_r>:
 800ac84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac88:	461f      	mov	r7, r3
 800ac8a:	688e      	ldr	r6, [r1, #8]
 800ac8c:	4682      	mov	sl, r0
 800ac8e:	42be      	cmp	r6, r7
 800ac90:	460c      	mov	r4, r1
 800ac92:	4690      	mov	r8, r2
 800ac94:	680b      	ldr	r3, [r1, #0]
 800ac96:	d82d      	bhi.n	800acf4 <__ssputs_r+0x70>
 800ac98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aca0:	d026      	beq.n	800acf0 <__ssputs_r+0x6c>
 800aca2:	6965      	ldr	r5, [r4, #20]
 800aca4:	6909      	ldr	r1, [r1, #16]
 800aca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acaa:	eba3 0901 	sub.w	r9, r3, r1
 800acae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acb2:	1c7b      	adds	r3, r7, #1
 800acb4:	444b      	add	r3, r9
 800acb6:	106d      	asrs	r5, r5, #1
 800acb8:	429d      	cmp	r5, r3
 800acba:	bf38      	it	cc
 800acbc:	461d      	movcc	r5, r3
 800acbe:	0553      	lsls	r3, r2, #21
 800acc0:	d527      	bpl.n	800ad12 <__ssputs_r+0x8e>
 800acc2:	4629      	mov	r1, r5
 800acc4:	f7ff ff52 	bl	800ab6c <_malloc_r>
 800acc8:	4606      	mov	r6, r0
 800acca:	b360      	cbz	r0, 800ad26 <__ssputs_r+0xa2>
 800accc:	464a      	mov	r2, r9
 800acce:	6921      	ldr	r1, [r4, #16]
 800acd0:	f000 fafa 	bl	800b2c8 <memcpy>
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800acda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acde:	81a3      	strh	r3, [r4, #12]
 800ace0:	6126      	str	r6, [r4, #16]
 800ace2:	444e      	add	r6, r9
 800ace4:	6026      	str	r6, [r4, #0]
 800ace6:	463e      	mov	r6, r7
 800ace8:	6165      	str	r5, [r4, #20]
 800acea:	eba5 0509 	sub.w	r5, r5, r9
 800acee:	60a5      	str	r5, [r4, #8]
 800acf0:	42be      	cmp	r6, r7
 800acf2:	d900      	bls.n	800acf6 <__ssputs_r+0x72>
 800acf4:	463e      	mov	r6, r7
 800acf6:	4632      	mov	r2, r6
 800acf8:	4641      	mov	r1, r8
 800acfa:	6820      	ldr	r0, [r4, #0]
 800acfc:	f000 faac 	bl	800b258 <memmove>
 800ad00:	2000      	movs	r0, #0
 800ad02:	68a3      	ldr	r3, [r4, #8]
 800ad04:	1b9b      	subs	r3, r3, r6
 800ad06:	60a3      	str	r3, [r4, #8]
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	4433      	add	r3, r6
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad12:	462a      	mov	r2, r5
 800ad14:	f000 fae6 	bl	800b2e4 <_realloc_r>
 800ad18:	4606      	mov	r6, r0
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d1e0      	bne.n	800ace0 <__ssputs_r+0x5c>
 800ad1e:	4650      	mov	r0, sl
 800ad20:	6921      	ldr	r1, [r4, #16]
 800ad22:	f7ff feb9 	bl	800aa98 <_free_r>
 800ad26:	230c      	movs	r3, #12
 800ad28:	f8ca 3000 	str.w	r3, [sl]
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad36:	81a3      	strh	r3, [r4, #12]
 800ad38:	e7e9      	b.n	800ad0e <__ssputs_r+0x8a>
	...

0800ad3c <_svfiprintf_r>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	4698      	mov	r8, r3
 800ad42:	898b      	ldrh	r3, [r1, #12]
 800ad44:	4607      	mov	r7, r0
 800ad46:	061b      	lsls	r3, r3, #24
 800ad48:	460d      	mov	r5, r1
 800ad4a:	4614      	mov	r4, r2
 800ad4c:	b09d      	sub	sp, #116	@ 0x74
 800ad4e:	d510      	bpl.n	800ad72 <_svfiprintf_r+0x36>
 800ad50:	690b      	ldr	r3, [r1, #16]
 800ad52:	b973      	cbnz	r3, 800ad72 <_svfiprintf_r+0x36>
 800ad54:	2140      	movs	r1, #64	@ 0x40
 800ad56:	f7ff ff09 	bl	800ab6c <_malloc_r>
 800ad5a:	6028      	str	r0, [r5, #0]
 800ad5c:	6128      	str	r0, [r5, #16]
 800ad5e:	b930      	cbnz	r0, 800ad6e <_svfiprintf_r+0x32>
 800ad60:	230c      	movs	r3, #12
 800ad62:	603b      	str	r3, [r7, #0]
 800ad64:	f04f 30ff 	mov.w	r0, #4294967295
 800ad68:	b01d      	add	sp, #116	@ 0x74
 800ad6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6e:	2340      	movs	r3, #64	@ 0x40
 800ad70:	616b      	str	r3, [r5, #20]
 800ad72:	2300      	movs	r3, #0
 800ad74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad76:	2320      	movs	r3, #32
 800ad78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad7c:	2330      	movs	r3, #48	@ 0x30
 800ad7e:	f04f 0901 	mov.w	r9, #1
 800ad82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800af20 <_svfiprintf_r+0x1e4>
 800ad8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad8e:	4623      	mov	r3, r4
 800ad90:	469a      	mov	sl, r3
 800ad92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad96:	b10a      	cbz	r2, 800ad9c <_svfiprintf_r+0x60>
 800ad98:	2a25      	cmp	r2, #37	@ 0x25
 800ad9a:	d1f9      	bne.n	800ad90 <_svfiprintf_r+0x54>
 800ad9c:	ebba 0b04 	subs.w	fp, sl, r4
 800ada0:	d00b      	beq.n	800adba <_svfiprintf_r+0x7e>
 800ada2:	465b      	mov	r3, fp
 800ada4:	4622      	mov	r2, r4
 800ada6:	4629      	mov	r1, r5
 800ada8:	4638      	mov	r0, r7
 800adaa:	f7ff ff6b 	bl	800ac84 <__ssputs_r>
 800adae:	3001      	adds	r0, #1
 800adb0:	f000 80a7 	beq.w	800af02 <_svfiprintf_r+0x1c6>
 800adb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adb6:	445a      	add	r2, fp
 800adb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800adba:	f89a 3000 	ldrb.w	r3, [sl]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 809f 	beq.w	800af02 <_svfiprintf_r+0x1c6>
 800adc4:	2300      	movs	r3, #0
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295
 800adca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adce:	f10a 0a01 	add.w	sl, sl, #1
 800add2:	9304      	str	r3, [sp, #16]
 800add4:	9307      	str	r3, [sp, #28]
 800add6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adda:	931a      	str	r3, [sp, #104]	@ 0x68
 800addc:	4654      	mov	r4, sl
 800adde:	2205      	movs	r2, #5
 800ade0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade4:	484e      	ldr	r0, [pc, #312]	@ (800af20 <_svfiprintf_r+0x1e4>)
 800ade6:	f000 fa61 	bl	800b2ac <memchr>
 800adea:	9a04      	ldr	r2, [sp, #16]
 800adec:	b9d8      	cbnz	r0, 800ae26 <_svfiprintf_r+0xea>
 800adee:	06d0      	lsls	r0, r2, #27
 800adf0:	bf44      	itt	mi
 800adf2:	2320      	movmi	r3, #32
 800adf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adf8:	0711      	lsls	r1, r2, #28
 800adfa:	bf44      	itt	mi
 800adfc:	232b      	movmi	r3, #43	@ 0x2b
 800adfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae02:	f89a 3000 	ldrb.w	r3, [sl]
 800ae06:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae08:	d015      	beq.n	800ae36 <_svfiprintf_r+0xfa>
 800ae0a:	4654      	mov	r4, sl
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	f04f 0c0a 	mov.w	ip, #10
 800ae12:	9a07      	ldr	r2, [sp, #28]
 800ae14:	4621      	mov	r1, r4
 800ae16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae1a:	3b30      	subs	r3, #48	@ 0x30
 800ae1c:	2b09      	cmp	r3, #9
 800ae1e:	d94b      	bls.n	800aeb8 <_svfiprintf_r+0x17c>
 800ae20:	b1b0      	cbz	r0, 800ae50 <_svfiprintf_r+0x114>
 800ae22:	9207      	str	r2, [sp, #28]
 800ae24:	e014      	b.n	800ae50 <_svfiprintf_r+0x114>
 800ae26:	eba0 0308 	sub.w	r3, r0, r8
 800ae2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	46a2      	mov	sl, r4
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	e7d2      	b.n	800addc <_svfiprintf_r+0xa0>
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	1d19      	adds	r1, r3, #4
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	9103      	str	r1, [sp, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	bfbb      	ittet	lt
 800ae42:	425b      	neglt	r3, r3
 800ae44:	f042 0202 	orrlt.w	r2, r2, #2
 800ae48:	9307      	strge	r3, [sp, #28]
 800ae4a:	9307      	strlt	r3, [sp, #28]
 800ae4c:	bfb8      	it	lt
 800ae4e:	9204      	strlt	r2, [sp, #16]
 800ae50:	7823      	ldrb	r3, [r4, #0]
 800ae52:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae54:	d10a      	bne.n	800ae6c <_svfiprintf_r+0x130>
 800ae56:	7863      	ldrb	r3, [r4, #1]
 800ae58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae5a:	d132      	bne.n	800aec2 <_svfiprintf_r+0x186>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	3402      	adds	r4, #2
 800ae60:	1d1a      	adds	r2, r3, #4
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	9203      	str	r2, [sp, #12]
 800ae66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae6a:	9305      	str	r3, [sp, #20]
 800ae6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800af24 <_svfiprintf_r+0x1e8>
 800ae70:	2203      	movs	r2, #3
 800ae72:	4650      	mov	r0, sl
 800ae74:	7821      	ldrb	r1, [r4, #0]
 800ae76:	f000 fa19 	bl	800b2ac <memchr>
 800ae7a:	b138      	cbz	r0, 800ae8c <_svfiprintf_r+0x150>
 800ae7c:	2240      	movs	r2, #64	@ 0x40
 800ae7e:	9b04      	ldr	r3, [sp, #16]
 800ae80:	eba0 000a 	sub.w	r0, r0, sl
 800ae84:	4082      	lsls	r2, r0
 800ae86:	4313      	orrs	r3, r2
 800ae88:	3401      	adds	r4, #1
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae90:	2206      	movs	r2, #6
 800ae92:	4825      	ldr	r0, [pc, #148]	@ (800af28 <_svfiprintf_r+0x1ec>)
 800ae94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae98:	f000 fa08 	bl	800b2ac <memchr>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d036      	beq.n	800af0e <_svfiprintf_r+0x1d2>
 800aea0:	4b22      	ldr	r3, [pc, #136]	@ (800af2c <_svfiprintf_r+0x1f0>)
 800aea2:	bb1b      	cbnz	r3, 800aeec <_svfiprintf_r+0x1b0>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	3307      	adds	r3, #7
 800aea8:	f023 0307 	bic.w	r3, r3, #7
 800aeac:	3308      	adds	r3, #8
 800aeae:	9303      	str	r3, [sp, #12]
 800aeb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb2:	4433      	add	r3, r6
 800aeb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb6:	e76a      	b.n	800ad8e <_svfiprintf_r+0x52>
 800aeb8:	460c      	mov	r4, r1
 800aeba:	2001      	movs	r0, #1
 800aebc:	fb0c 3202 	mla	r2, ip, r2, r3
 800aec0:	e7a8      	b.n	800ae14 <_svfiprintf_r+0xd8>
 800aec2:	2300      	movs	r3, #0
 800aec4:	f04f 0c0a 	mov.w	ip, #10
 800aec8:	4619      	mov	r1, r3
 800aeca:	3401      	adds	r4, #1
 800aecc:	9305      	str	r3, [sp, #20]
 800aece:	4620      	mov	r0, r4
 800aed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aed4:	3a30      	subs	r2, #48	@ 0x30
 800aed6:	2a09      	cmp	r2, #9
 800aed8:	d903      	bls.n	800aee2 <_svfiprintf_r+0x1a6>
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d0c6      	beq.n	800ae6c <_svfiprintf_r+0x130>
 800aede:	9105      	str	r1, [sp, #20]
 800aee0:	e7c4      	b.n	800ae6c <_svfiprintf_r+0x130>
 800aee2:	4604      	mov	r4, r0
 800aee4:	2301      	movs	r3, #1
 800aee6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeea:	e7f0      	b.n	800aece <_svfiprintf_r+0x192>
 800aeec:	ab03      	add	r3, sp, #12
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	462a      	mov	r2, r5
 800aef2:	4638      	mov	r0, r7
 800aef4:	4b0e      	ldr	r3, [pc, #56]	@ (800af30 <_svfiprintf_r+0x1f4>)
 800aef6:	a904      	add	r1, sp, #16
 800aef8:	f3af 8000 	nop.w
 800aefc:	1c42      	adds	r2, r0, #1
 800aefe:	4606      	mov	r6, r0
 800af00:	d1d6      	bne.n	800aeb0 <_svfiprintf_r+0x174>
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	065b      	lsls	r3, r3, #25
 800af06:	f53f af2d 	bmi.w	800ad64 <_svfiprintf_r+0x28>
 800af0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af0c:	e72c      	b.n	800ad68 <_svfiprintf_r+0x2c>
 800af0e:	ab03      	add	r3, sp, #12
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	462a      	mov	r2, r5
 800af14:	4638      	mov	r0, r7
 800af16:	4b06      	ldr	r3, [pc, #24]	@ (800af30 <_svfiprintf_r+0x1f4>)
 800af18:	a904      	add	r1, sp, #16
 800af1a:	f000 f87d 	bl	800b018 <_printf_i>
 800af1e:	e7ed      	b.n	800aefc <_svfiprintf_r+0x1c0>
 800af20:	0800b3da 	.word	0x0800b3da
 800af24:	0800b3e0 	.word	0x0800b3e0
 800af28:	0800b3e4 	.word	0x0800b3e4
 800af2c:	00000000 	.word	0x00000000
 800af30:	0800ac85 	.word	0x0800ac85

0800af34 <_printf_common>:
 800af34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af38:	4616      	mov	r6, r2
 800af3a:	4698      	mov	r8, r3
 800af3c:	688a      	ldr	r2, [r1, #8]
 800af3e:	690b      	ldr	r3, [r1, #16]
 800af40:	4607      	mov	r7, r0
 800af42:	4293      	cmp	r3, r2
 800af44:	bfb8      	it	lt
 800af46:	4613      	movlt	r3, r2
 800af48:	6033      	str	r3, [r6, #0]
 800af4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af4e:	460c      	mov	r4, r1
 800af50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af54:	b10a      	cbz	r2, 800af5a <_printf_common+0x26>
 800af56:	3301      	adds	r3, #1
 800af58:	6033      	str	r3, [r6, #0]
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	0699      	lsls	r1, r3, #26
 800af5e:	bf42      	ittt	mi
 800af60:	6833      	ldrmi	r3, [r6, #0]
 800af62:	3302      	addmi	r3, #2
 800af64:	6033      	strmi	r3, [r6, #0]
 800af66:	6825      	ldr	r5, [r4, #0]
 800af68:	f015 0506 	ands.w	r5, r5, #6
 800af6c:	d106      	bne.n	800af7c <_printf_common+0x48>
 800af6e:	f104 0a19 	add.w	sl, r4, #25
 800af72:	68e3      	ldr	r3, [r4, #12]
 800af74:	6832      	ldr	r2, [r6, #0]
 800af76:	1a9b      	subs	r3, r3, r2
 800af78:	42ab      	cmp	r3, r5
 800af7a:	dc2b      	bgt.n	800afd4 <_printf_common+0xa0>
 800af7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af80:	6822      	ldr	r2, [r4, #0]
 800af82:	3b00      	subs	r3, #0
 800af84:	bf18      	it	ne
 800af86:	2301      	movne	r3, #1
 800af88:	0692      	lsls	r2, r2, #26
 800af8a:	d430      	bmi.n	800afee <_printf_common+0xba>
 800af8c:	4641      	mov	r1, r8
 800af8e:	4638      	mov	r0, r7
 800af90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af94:	47c8      	blx	r9
 800af96:	3001      	adds	r0, #1
 800af98:	d023      	beq.n	800afe2 <_printf_common+0xae>
 800af9a:	6823      	ldr	r3, [r4, #0]
 800af9c:	6922      	ldr	r2, [r4, #16]
 800af9e:	f003 0306 	and.w	r3, r3, #6
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	bf14      	ite	ne
 800afa6:	2500      	movne	r5, #0
 800afa8:	6833      	ldreq	r3, [r6, #0]
 800afaa:	f04f 0600 	mov.w	r6, #0
 800afae:	bf08      	it	eq
 800afb0:	68e5      	ldreq	r5, [r4, #12]
 800afb2:	f104 041a 	add.w	r4, r4, #26
 800afb6:	bf08      	it	eq
 800afb8:	1aed      	subeq	r5, r5, r3
 800afba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800afbe:	bf08      	it	eq
 800afc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afc4:	4293      	cmp	r3, r2
 800afc6:	bfc4      	itt	gt
 800afc8:	1a9b      	subgt	r3, r3, r2
 800afca:	18ed      	addgt	r5, r5, r3
 800afcc:	42b5      	cmp	r5, r6
 800afce:	d11a      	bne.n	800b006 <_printf_common+0xd2>
 800afd0:	2000      	movs	r0, #0
 800afd2:	e008      	b.n	800afe6 <_printf_common+0xb2>
 800afd4:	2301      	movs	r3, #1
 800afd6:	4652      	mov	r2, sl
 800afd8:	4641      	mov	r1, r8
 800afda:	4638      	mov	r0, r7
 800afdc:	47c8      	blx	r9
 800afde:	3001      	adds	r0, #1
 800afe0:	d103      	bne.n	800afea <_printf_common+0xb6>
 800afe2:	f04f 30ff 	mov.w	r0, #4294967295
 800afe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afea:	3501      	adds	r5, #1
 800afec:	e7c1      	b.n	800af72 <_printf_common+0x3e>
 800afee:	2030      	movs	r0, #48	@ 0x30
 800aff0:	18e1      	adds	r1, r4, r3
 800aff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800affc:	4422      	add	r2, r4
 800affe:	3302      	adds	r3, #2
 800b000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b004:	e7c2      	b.n	800af8c <_printf_common+0x58>
 800b006:	2301      	movs	r3, #1
 800b008:	4622      	mov	r2, r4
 800b00a:	4641      	mov	r1, r8
 800b00c:	4638      	mov	r0, r7
 800b00e:	47c8      	blx	r9
 800b010:	3001      	adds	r0, #1
 800b012:	d0e6      	beq.n	800afe2 <_printf_common+0xae>
 800b014:	3601      	adds	r6, #1
 800b016:	e7d9      	b.n	800afcc <_printf_common+0x98>

0800b018 <_printf_i>:
 800b018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b01c:	7e0f      	ldrb	r7, [r1, #24]
 800b01e:	4691      	mov	r9, r2
 800b020:	2f78      	cmp	r7, #120	@ 0x78
 800b022:	4680      	mov	r8, r0
 800b024:	460c      	mov	r4, r1
 800b026:	469a      	mov	sl, r3
 800b028:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b02a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b02e:	d807      	bhi.n	800b040 <_printf_i+0x28>
 800b030:	2f62      	cmp	r7, #98	@ 0x62
 800b032:	d80a      	bhi.n	800b04a <_printf_i+0x32>
 800b034:	2f00      	cmp	r7, #0
 800b036:	f000 80d3 	beq.w	800b1e0 <_printf_i+0x1c8>
 800b03a:	2f58      	cmp	r7, #88	@ 0x58
 800b03c:	f000 80ba 	beq.w	800b1b4 <_printf_i+0x19c>
 800b040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b048:	e03a      	b.n	800b0c0 <_printf_i+0xa8>
 800b04a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b04e:	2b15      	cmp	r3, #21
 800b050:	d8f6      	bhi.n	800b040 <_printf_i+0x28>
 800b052:	a101      	add	r1, pc, #4	@ (adr r1, 800b058 <_printf_i+0x40>)
 800b054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b058:	0800b0b1 	.word	0x0800b0b1
 800b05c:	0800b0c5 	.word	0x0800b0c5
 800b060:	0800b041 	.word	0x0800b041
 800b064:	0800b041 	.word	0x0800b041
 800b068:	0800b041 	.word	0x0800b041
 800b06c:	0800b041 	.word	0x0800b041
 800b070:	0800b0c5 	.word	0x0800b0c5
 800b074:	0800b041 	.word	0x0800b041
 800b078:	0800b041 	.word	0x0800b041
 800b07c:	0800b041 	.word	0x0800b041
 800b080:	0800b041 	.word	0x0800b041
 800b084:	0800b1c7 	.word	0x0800b1c7
 800b088:	0800b0ef 	.word	0x0800b0ef
 800b08c:	0800b181 	.word	0x0800b181
 800b090:	0800b041 	.word	0x0800b041
 800b094:	0800b041 	.word	0x0800b041
 800b098:	0800b1e9 	.word	0x0800b1e9
 800b09c:	0800b041 	.word	0x0800b041
 800b0a0:	0800b0ef 	.word	0x0800b0ef
 800b0a4:	0800b041 	.word	0x0800b041
 800b0a8:	0800b041 	.word	0x0800b041
 800b0ac:	0800b189 	.word	0x0800b189
 800b0b0:	6833      	ldr	r3, [r6, #0]
 800b0b2:	1d1a      	adds	r2, r3, #4
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6032      	str	r2, [r6, #0]
 800b0b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e09e      	b.n	800b202 <_printf_i+0x1ea>
 800b0c4:	6833      	ldr	r3, [r6, #0]
 800b0c6:	6820      	ldr	r0, [r4, #0]
 800b0c8:	1d19      	adds	r1, r3, #4
 800b0ca:	6031      	str	r1, [r6, #0]
 800b0cc:	0606      	lsls	r6, r0, #24
 800b0ce:	d501      	bpl.n	800b0d4 <_printf_i+0xbc>
 800b0d0:	681d      	ldr	r5, [r3, #0]
 800b0d2:	e003      	b.n	800b0dc <_printf_i+0xc4>
 800b0d4:	0645      	lsls	r5, r0, #25
 800b0d6:	d5fb      	bpl.n	800b0d0 <_printf_i+0xb8>
 800b0d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0dc:	2d00      	cmp	r5, #0
 800b0de:	da03      	bge.n	800b0e8 <_printf_i+0xd0>
 800b0e0:	232d      	movs	r3, #45	@ 0x2d
 800b0e2:	426d      	negs	r5, r5
 800b0e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0e8:	230a      	movs	r3, #10
 800b0ea:	4859      	ldr	r0, [pc, #356]	@ (800b250 <_printf_i+0x238>)
 800b0ec:	e011      	b.n	800b112 <_printf_i+0xfa>
 800b0ee:	6821      	ldr	r1, [r4, #0]
 800b0f0:	6833      	ldr	r3, [r6, #0]
 800b0f2:	0608      	lsls	r0, r1, #24
 800b0f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0f8:	d402      	bmi.n	800b100 <_printf_i+0xe8>
 800b0fa:	0649      	lsls	r1, r1, #25
 800b0fc:	bf48      	it	mi
 800b0fe:	b2ad      	uxthmi	r5, r5
 800b100:	2f6f      	cmp	r7, #111	@ 0x6f
 800b102:	6033      	str	r3, [r6, #0]
 800b104:	bf14      	ite	ne
 800b106:	230a      	movne	r3, #10
 800b108:	2308      	moveq	r3, #8
 800b10a:	4851      	ldr	r0, [pc, #324]	@ (800b250 <_printf_i+0x238>)
 800b10c:	2100      	movs	r1, #0
 800b10e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b112:	6866      	ldr	r6, [r4, #4]
 800b114:	2e00      	cmp	r6, #0
 800b116:	bfa8      	it	ge
 800b118:	6821      	ldrge	r1, [r4, #0]
 800b11a:	60a6      	str	r6, [r4, #8]
 800b11c:	bfa4      	itt	ge
 800b11e:	f021 0104 	bicge.w	r1, r1, #4
 800b122:	6021      	strge	r1, [r4, #0]
 800b124:	b90d      	cbnz	r5, 800b12a <_printf_i+0x112>
 800b126:	2e00      	cmp	r6, #0
 800b128:	d04b      	beq.n	800b1c2 <_printf_i+0x1aa>
 800b12a:	4616      	mov	r6, r2
 800b12c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b130:	fb03 5711 	mls	r7, r3, r1, r5
 800b134:	5dc7      	ldrb	r7, [r0, r7]
 800b136:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b13a:	462f      	mov	r7, r5
 800b13c:	42bb      	cmp	r3, r7
 800b13e:	460d      	mov	r5, r1
 800b140:	d9f4      	bls.n	800b12c <_printf_i+0x114>
 800b142:	2b08      	cmp	r3, #8
 800b144:	d10b      	bne.n	800b15e <_printf_i+0x146>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	07df      	lsls	r7, r3, #31
 800b14a:	d508      	bpl.n	800b15e <_printf_i+0x146>
 800b14c:	6923      	ldr	r3, [r4, #16]
 800b14e:	6861      	ldr	r1, [r4, #4]
 800b150:	4299      	cmp	r1, r3
 800b152:	bfde      	ittt	le
 800b154:	2330      	movle	r3, #48	@ 0x30
 800b156:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b15a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b15e:	1b92      	subs	r2, r2, r6
 800b160:	6122      	str	r2, [r4, #16]
 800b162:	464b      	mov	r3, r9
 800b164:	4621      	mov	r1, r4
 800b166:	4640      	mov	r0, r8
 800b168:	f8cd a000 	str.w	sl, [sp]
 800b16c:	aa03      	add	r2, sp, #12
 800b16e:	f7ff fee1 	bl	800af34 <_printf_common>
 800b172:	3001      	adds	r0, #1
 800b174:	d14a      	bne.n	800b20c <_printf_i+0x1f4>
 800b176:	f04f 30ff 	mov.w	r0, #4294967295
 800b17a:	b004      	add	sp, #16
 800b17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	f043 0320 	orr.w	r3, r3, #32
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	2778      	movs	r7, #120	@ 0x78
 800b18a:	4832      	ldr	r0, [pc, #200]	@ (800b254 <_printf_i+0x23c>)
 800b18c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	6831      	ldr	r1, [r6, #0]
 800b194:	061f      	lsls	r7, r3, #24
 800b196:	f851 5b04 	ldr.w	r5, [r1], #4
 800b19a:	d402      	bmi.n	800b1a2 <_printf_i+0x18a>
 800b19c:	065f      	lsls	r7, r3, #25
 800b19e:	bf48      	it	mi
 800b1a0:	b2ad      	uxthmi	r5, r5
 800b1a2:	6031      	str	r1, [r6, #0]
 800b1a4:	07d9      	lsls	r1, r3, #31
 800b1a6:	bf44      	itt	mi
 800b1a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ac:	6023      	strmi	r3, [r4, #0]
 800b1ae:	b11d      	cbz	r5, 800b1b8 <_printf_i+0x1a0>
 800b1b0:	2310      	movs	r3, #16
 800b1b2:	e7ab      	b.n	800b10c <_printf_i+0xf4>
 800b1b4:	4826      	ldr	r0, [pc, #152]	@ (800b250 <_printf_i+0x238>)
 800b1b6:	e7e9      	b.n	800b18c <_printf_i+0x174>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	f023 0320 	bic.w	r3, r3, #32
 800b1be:	6023      	str	r3, [r4, #0]
 800b1c0:	e7f6      	b.n	800b1b0 <_printf_i+0x198>
 800b1c2:	4616      	mov	r6, r2
 800b1c4:	e7bd      	b.n	800b142 <_printf_i+0x12a>
 800b1c6:	6833      	ldr	r3, [r6, #0]
 800b1c8:	6825      	ldr	r5, [r4, #0]
 800b1ca:	1d18      	adds	r0, r3, #4
 800b1cc:	6961      	ldr	r1, [r4, #20]
 800b1ce:	6030      	str	r0, [r6, #0]
 800b1d0:	062e      	lsls	r6, r5, #24
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	d501      	bpl.n	800b1da <_printf_i+0x1c2>
 800b1d6:	6019      	str	r1, [r3, #0]
 800b1d8:	e002      	b.n	800b1e0 <_printf_i+0x1c8>
 800b1da:	0668      	lsls	r0, r5, #25
 800b1dc:	d5fb      	bpl.n	800b1d6 <_printf_i+0x1be>
 800b1de:	8019      	strh	r1, [r3, #0]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4616      	mov	r6, r2
 800b1e4:	6123      	str	r3, [r4, #16]
 800b1e6:	e7bc      	b.n	800b162 <_printf_i+0x14a>
 800b1e8:	6833      	ldr	r3, [r6, #0]
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	1d1a      	adds	r2, r3, #4
 800b1ee:	6032      	str	r2, [r6, #0]
 800b1f0:	681e      	ldr	r6, [r3, #0]
 800b1f2:	6862      	ldr	r2, [r4, #4]
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f000 f859 	bl	800b2ac <memchr>
 800b1fa:	b108      	cbz	r0, 800b200 <_printf_i+0x1e8>
 800b1fc:	1b80      	subs	r0, r0, r6
 800b1fe:	6060      	str	r0, [r4, #4]
 800b200:	6863      	ldr	r3, [r4, #4]
 800b202:	6123      	str	r3, [r4, #16]
 800b204:	2300      	movs	r3, #0
 800b206:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b20a:	e7aa      	b.n	800b162 <_printf_i+0x14a>
 800b20c:	4632      	mov	r2, r6
 800b20e:	4649      	mov	r1, r9
 800b210:	4640      	mov	r0, r8
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	47d0      	blx	sl
 800b216:	3001      	adds	r0, #1
 800b218:	d0ad      	beq.n	800b176 <_printf_i+0x15e>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	079b      	lsls	r3, r3, #30
 800b21e:	d413      	bmi.n	800b248 <_printf_i+0x230>
 800b220:	68e0      	ldr	r0, [r4, #12]
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	4298      	cmp	r0, r3
 800b226:	bfb8      	it	lt
 800b228:	4618      	movlt	r0, r3
 800b22a:	e7a6      	b.n	800b17a <_printf_i+0x162>
 800b22c:	2301      	movs	r3, #1
 800b22e:	4632      	mov	r2, r6
 800b230:	4649      	mov	r1, r9
 800b232:	4640      	mov	r0, r8
 800b234:	47d0      	blx	sl
 800b236:	3001      	adds	r0, #1
 800b238:	d09d      	beq.n	800b176 <_printf_i+0x15e>
 800b23a:	3501      	adds	r5, #1
 800b23c:	68e3      	ldr	r3, [r4, #12]
 800b23e:	9903      	ldr	r1, [sp, #12]
 800b240:	1a5b      	subs	r3, r3, r1
 800b242:	42ab      	cmp	r3, r5
 800b244:	dcf2      	bgt.n	800b22c <_printf_i+0x214>
 800b246:	e7eb      	b.n	800b220 <_printf_i+0x208>
 800b248:	2500      	movs	r5, #0
 800b24a:	f104 0619 	add.w	r6, r4, #25
 800b24e:	e7f5      	b.n	800b23c <_printf_i+0x224>
 800b250:	0800b3eb 	.word	0x0800b3eb
 800b254:	0800b3fc 	.word	0x0800b3fc

0800b258 <memmove>:
 800b258:	4288      	cmp	r0, r1
 800b25a:	b510      	push	{r4, lr}
 800b25c:	eb01 0402 	add.w	r4, r1, r2
 800b260:	d902      	bls.n	800b268 <memmove+0x10>
 800b262:	4284      	cmp	r4, r0
 800b264:	4623      	mov	r3, r4
 800b266:	d807      	bhi.n	800b278 <memmove+0x20>
 800b268:	1e43      	subs	r3, r0, #1
 800b26a:	42a1      	cmp	r1, r4
 800b26c:	d008      	beq.n	800b280 <memmove+0x28>
 800b26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b272:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b276:	e7f8      	b.n	800b26a <memmove+0x12>
 800b278:	4601      	mov	r1, r0
 800b27a:	4402      	add	r2, r0
 800b27c:	428a      	cmp	r2, r1
 800b27e:	d100      	bne.n	800b282 <memmove+0x2a>
 800b280:	bd10      	pop	{r4, pc}
 800b282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b28a:	e7f7      	b.n	800b27c <memmove+0x24>

0800b28c <_sbrk_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	2300      	movs	r3, #0
 800b290:	4d05      	ldr	r5, [pc, #20]	@ (800b2a8 <_sbrk_r+0x1c>)
 800b292:	4604      	mov	r4, r0
 800b294:	4608      	mov	r0, r1
 800b296:	602b      	str	r3, [r5, #0]
 800b298:	f7f6 fd04 	bl	8001ca4 <_sbrk>
 800b29c:	1c43      	adds	r3, r0, #1
 800b29e:	d102      	bne.n	800b2a6 <_sbrk_r+0x1a>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	b103      	cbz	r3, 800b2a6 <_sbrk_r+0x1a>
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	bd38      	pop	{r3, r4, r5, pc}
 800b2a8:	200016c8 	.word	0x200016c8

0800b2ac <memchr>:
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	b510      	push	{r4, lr}
 800b2b0:	b2c9      	uxtb	r1, r1
 800b2b2:	4402      	add	r2, r0
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	d101      	bne.n	800b2be <memchr+0x12>
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	e003      	b.n	800b2c6 <memchr+0x1a>
 800b2be:	7804      	ldrb	r4, [r0, #0]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	428c      	cmp	r4, r1
 800b2c4:	d1f6      	bne.n	800b2b4 <memchr+0x8>
 800b2c6:	bd10      	pop	{r4, pc}

0800b2c8 <memcpy>:
 800b2c8:	440a      	add	r2, r1
 800b2ca:	4291      	cmp	r1, r2
 800b2cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2d0:	d100      	bne.n	800b2d4 <memcpy+0xc>
 800b2d2:	4770      	bx	lr
 800b2d4:	b510      	push	{r4, lr}
 800b2d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2da:	4291      	cmp	r1, r2
 800b2dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2e0:	d1f9      	bne.n	800b2d6 <memcpy+0xe>
 800b2e2:	bd10      	pop	{r4, pc}

0800b2e4 <_realloc_r>:
 800b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	4615      	mov	r5, r2
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	b921      	cbnz	r1, 800b2fa <_realloc_r+0x16>
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f6:	f7ff bc39 	b.w	800ab6c <_malloc_r>
 800b2fa:	b92a      	cbnz	r2, 800b308 <_realloc_r+0x24>
 800b2fc:	f7ff fbcc 	bl	800aa98 <_free_r>
 800b300:	2400      	movs	r4, #0
 800b302:	4620      	mov	r0, r4
 800b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b308:	f000 f81a 	bl	800b340 <_malloc_usable_size_r>
 800b30c:	4285      	cmp	r5, r0
 800b30e:	4606      	mov	r6, r0
 800b310:	d802      	bhi.n	800b318 <_realloc_r+0x34>
 800b312:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b316:	d8f4      	bhi.n	800b302 <_realloc_r+0x1e>
 800b318:	4629      	mov	r1, r5
 800b31a:	4640      	mov	r0, r8
 800b31c:	f7ff fc26 	bl	800ab6c <_malloc_r>
 800b320:	4607      	mov	r7, r0
 800b322:	2800      	cmp	r0, #0
 800b324:	d0ec      	beq.n	800b300 <_realloc_r+0x1c>
 800b326:	42b5      	cmp	r5, r6
 800b328:	462a      	mov	r2, r5
 800b32a:	4621      	mov	r1, r4
 800b32c:	bf28      	it	cs
 800b32e:	4632      	movcs	r2, r6
 800b330:	f7ff ffca 	bl	800b2c8 <memcpy>
 800b334:	4621      	mov	r1, r4
 800b336:	4640      	mov	r0, r8
 800b338:	f7ff fbae 	bl	800aa98 <_free_r>
 800b33c:	463c      	mov	r4, r7
 800b33e:	e7e0      	b.n	800b302 <_realloc_r+0x1e>

0800b340 <_malloc_usable_size_r>:
 800b340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b344:	1f18      	subs	r0, r3, #4
 800b346:	2b00      	cmp	r3, #0
 800b348:	bfbc      	itt	lt
 800b34a:	580b      	ldrlt	r3, [r1, r0]
 800b34c:	18c0      	addlt	r0, r0, r3
 800b34e:	4770      	bx	lr

0800b350 <_init>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	bf00      	nop
 800b354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b356:	bc08      	pop	{r3}
 800b358:	469e      	mov	lr, r3
 800b35a:	4770      	bx	lr

0800b35c <_fini>:
 800b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35e:	bf00      	nop
 800b360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b362:	bc08      	pop	{r3}
 800b364:	469e      	mov	lr, r3
 800b366:	4770      	bx	lr
